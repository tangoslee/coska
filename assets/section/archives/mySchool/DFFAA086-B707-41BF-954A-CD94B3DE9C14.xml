<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>허현옥</author>
    <comments>
        <comment>
            <author>부기흡</author>
            <date>2006-03-02T00:00:00-05:00</date>
            <content>manager 클래스와 DAO 클래스로 왜 분리해야 되는지가 명확하지 않군요. 그냥 하나로 만들면 더 간단할 것 같은데. 실재 샘플 코드를 보아야 이해가 될듯. JUnit은 action 쪽이든 manager 쪽이든 둘중에 하나면 충분 할 것 같고, 둘 다는 비용낭비라고 생각되네요. 이왕이면 manager쪽이 좋을듯 하구요, 그 전반부는 Ruby/Watir를 통해서 해결 한다고 보면 되니까.</content>
        </comment>
        <comment>
            <author>허현옥</author>
            <date>2006-03-02T00:00:00-05:00</date>
            <content>하나의 이벤트 처리를 위해서 두가지 DAO에 의존해야 되는 경우가 있습니다. 예를 들면 학생에게 강의를 등록 해 줄때는 학생DAO와 CourseDAO 두가지가 다 필요합니다. 이럴경우는 Action에서 두 DAO를 각각생성해서 데이타를 가져오고, 필요한 처리(데이타변환등...)를 Action클래스에서 하게 됩니다.&lt;br&gt; Struts를 소개하는 책이나, Struts+Spring+Hiberante를 소개하는 곳에서도 비지니스 계층을 Struts에서 분리하느 차원에서 Spring이 개발되었다는 것처럼, Spring의 비지니스 계층을 컨트롤러와 완전히(?) 분리함으로서 유지보수및 결합성면에서 더 낫다고 하더군요...^^;  뭐,저야 책에서 본게 맞겠다 싶어서 말씀드리는 거지만...&lt;br&gt;&lt;br&gt;지금 혼자 따로 하고 잇는 작업을 위에것처럼 해봤는데(하이버네이트대신 일반 SQL로 DAO처리)...모델1로 돌아가던, EJB로 올리던, 기본적으로 데이타, 비지니스 로직을 처리하는 부분에 손댈필요없이 간단히 메써드 한번 호출로 원하는 값을 정확히 돌려 주기때문에 프래임웍의 변경및 유지보수에 훨씬 좋은 것으로 보였습니다.^^&lt;br&gt;&lt;br&gt;어디까지나 제 생각이니까요..^^</content>
        </comment>
        <comment>
            <author>부기흡</author>
            <date>2006-03-02T00:00:00-05:00</date>
            <content>In the case of adding a course record to a student, you could just use the model itself and nothing else. See the code example below:&lt;br&gt;&lt;br&gt;// Add a new course record&lt;br&gt;Student student = load a student;&lt;br&gt;Course aCourse = load a course;&lt;br&gt;CourseRecord record = new CourseRecord();&lt;br&gt;record.setCourse(aCourse);&lt;br&gt;record....&lt;br&gt;student.getCourseRecords().add(record);&lt;br&gt;hSession.save(student); // save or update&lt;br&gt;&lt;br&gt;You don't need to worry about how the new record will be persisted. It's all done by the model for you. &lt;br&gt; &lt;br&gt;Theories are always good but it is not there to make a simple thing complicated.</content>
        </comment>
    </comments>
    <content>대강 전체 구조를 이렇게 보고 있습니다...&lt;br&gt;&lt;br&gt;Struts의 Action 클래스는 Manager 클래스를 통해서만 원하는 데이타를 받을 수 잇게요.&lt;br&gt;&lt;br&gt;그렇게 하면 Struts가 아닌 다른 프레임워으로 변경을 하더도,&lt;br&gt;비지니스 로직이나 데이타를 가져오는 데 변경할 사항이 없겟죠..^^&lt;br&gt;&lt;br&gt;그거까지는 &amp;#46124;었는데...&lt;br&gt;&lt;br&gt;Manager 클래스에서 HibernateSession을 생성해서 생성된 Session을 &lt;br&gt;DAO 클래스에 변수로 넘겨주고, 그 session을 이용해서 데이타를 받아오는&lt;br&gt;걸로 생각하고 있습니다만.....그러다 보니 비지니스 레이어(Manager)와 데이타모델(DAO)를 결합성이 높아지는 거 같아서 또 걱정이긴 합니다만...^^;;;&lt;br&gt;&lt;br&gt;그리구..&lt;br&gt;&lt;br&gt;Struts의 Action을 테스트 하는 Unit 테스트도 있더군요..&lt;br&gt;그래서...전체 TDD 구조를 &lt;br&gt;우선은 Manager단위로 기본 JUnit 구조로 생성을 하고,&lt;br&gt;잘되고 나면 Action 클래스를 테스트 하는 걸로 해서..&lt;br&gt;테스트 구조는 크게 두가지가 존재할 것 같습니다...&lt;br&gt;&lt;br&gt;말이 너무 많아서 이해를 하실수 있을 지모르겠네요...ㅜ_ㅜ;&lt;br&gt;&lt;br&gt;혹시 제가 잘못생각하고 잇는 부분이 있으면 답변 달아주세요...&lt;br&gt;&lt;br&gt;ㅜ_ㅜ 제가 뭐 잘하는 게 없어서...</content>
    <postId>DFFAA086-B707-41BF-954A-CD94B3DE9C14</postId>
    <pubDate>2006-03-01T00:00:00-05:00</pubDate>
    <title>현옥이가 생각하는 구조.</title>
</post>
