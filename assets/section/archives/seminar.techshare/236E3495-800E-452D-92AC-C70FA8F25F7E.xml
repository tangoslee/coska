<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>허현옥</author>
    <comments/>
    <content>There are also various theories and metrics, such as McCabe Complexity metrics. It should be kept in mind that excessive use of standards and rules can stifle productivity and creativity. 'Peer reviews', 'buddy checks' code analysis tools, etc. can be used to check for problems and enforce standards. For C and C++ coding, here are some typical ideas to consider in setting rules/standards; these may or may not apply to a particular situation:&lt;br&gt;&amp;#8226; minimize or eliminate use of global variables.&lt;br&gt;&amp;#8226; use descriptive function and method names - use both upper and lower case, avoid abbreviations, use as many characters as necessary to be adequately descriptive (use of more than 20 characters is not out of line); be consistent in naming conventions.&lt;br&gt;&amp;#8226; use descriptive variable names - use both upper and lower case, avoid abbreviations, use as many characters as necessary to be adequately descriptive (use of more than 20 characters is not out of line); be consistent in naming conventions.&lt;br&gt;&amp;#8226; function and method sizes should be minimized; less than 100 lines of code is good, less than 50 lines is preferable.&lt;br&gt;&amp;#8226; function descriptions should be clearly spelled out in comments preceding a function's code.&lt;br&gt;&amp;#8226; organize code for readability.&lt;br&gt;&amp;#8226; use whitespace generously - vertically and horizontally&lt;br&gt;&amp;#8226; each line of code should contain 70 characters max.&lt;br&gt;&amp;#8226; one code statement per line.&lt;br&gt;&amp;#8226; coding style should be consistent throught a program (eg, use of brackets, indentations, naming conventions, etc.)&lt;br&gt;&amp;#8226; in adding comments, err on the side of too many rather than too few comments; a common rule of thumb is that there should be at least as many lines of comments (including header blocks) as lines of code.&lt;br&gt;&amp;#8226; no matter how small, an application should include documentaion of the overall program function and flow (even a few paragraphs is better than nothing); or if possible a separate flow chart and detailed program documentation.&lt;br&gt;&amp;#8226; make extensive use of error handling procedures and status and error logging.&lt;br&gt;&amp;#8226; for C++, to minimize complexity and increase maintainability, avoid too many levels of inheritance in class heirarchies (relative to the size and complexity of the application). Minimize use of multiple inheritance, and minimize use of operator overloading (note that the Java programming language eliminates multiple inheritance and operator overloading.)&lt;br&gt;&amp;#8226; for C++, keep class methods small, less than 50 lines of code per method is preferable.&lt;br&gt;&amp;#8226; for C++, make liberal use of exception handlers&lt;br&gt;&lt;br&gt;Source: http://brsx.co.uk/SWtesting/FAQs/FAQs012.asp</content>
    <postId>236E3495-800E-452D-92AC-C70FA8F25F7E</postId>
    <pubDate>2007-08-29T00:00:00-04:00</pubDate>
    <title>Coding Standard</title>
</post>
