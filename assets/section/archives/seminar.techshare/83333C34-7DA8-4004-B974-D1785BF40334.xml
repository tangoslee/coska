<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>부기흡</author>
    <comments/>
    <content>Rick Ross is the founder of Javalobby. He is a frequent speaker at Java-related events and a well-known advocate for Java developer interests..&lt;br&gt;&lt;br&gt;========&lt;br&gt;Multiple IDEs and practicing what I preach&lt;br&gt;========&lt;br&gt;Following my own advice from last week, I have downloaded and installed the latest versions of NetBeans, IntelliJ IDEA and Eclipse. I've given each of them a fair amount of time, and the honest truth is that each offers something distinct and impressive. I've decided to keep multiple IDEs installed on my system so I can be free to use whichever one offers the best support for any specific task at hand. John Mufarrige started an interesting discussion on the JL forums this week about how to survive lock-in to an obsolete IDE version mandated by his employer, and there was resounding agreement about the strategy of using Ant to mitigate IDE-related dependencies and maximize overall project portability. I think this same strategy should allow developers on a team to select their preferred IDEs independently without making it unreasonably complex for everyone to work together and contribute productively. So, I guess I need to learn some of those details about Ant that I have been avoiding for several years now.&lt;br&gt;&lt;br&gt;===========&lt;br&gt;Is this the form designer you've been waiting for?&lt;br&gt;===========&lt;br&gt;Creating attractive forms and dialogs has been a challenge for most Java developers since the beginning. Although numerous tools have tried to make this task easier, there have been more disappointments than successes in that space. If you haven't seen it yet, then I urge you to spend a few minutes right now to take a look at Roman Strobl's online presentation of the GUI builder that will be included in an upcoming NetBeans release. The GUI builder, called Matisse, is quite simply superb. The comments in the Javalobby thread have been powerful, including "a tear of joy has been shed..." and "I for one will be looking at NetBeans again...just because of this feature." These are pretty strong words, and dozens of other comments echo the same sentiments. If the new "natural" layout and the generated code to drive it are as nice as this demo, then we can expect Matisse to be a very compelling NetBeans enhancement. It's exciting to see this kind of progress emerging from the heated competition for developer support at the IDE and tools platform level. Let's hope we see a lot more of the same!&lt;br&gt;&lt;br&gt;===============&lt;br&gt;Are plugins the competitive advantage of Eclipse?&lt;br&gt;===============&lt;br&gt;I guess I have spent the most time this past week using version 3.1RC1 of the Eclipse platform. Talking about Eclipse as a product isn't really correct any more, since it would be rare to find someone who hasn't installed any plugins from the vast number that are now available. Eclipse, without plugins, doesn't actually do all that much by itself. You could make the case that the core of Eclipse is basically a container that is very good at organizing, running, updating and configuring plugin extensions. Even the SDK distribution of Eclipse (the primary package most of us download and use) is really the bare-bones core Eclipse platform configured with a large number of standard plugins for Java development, version control, debugging and more. Beyond that standard set, there is also a vibrant and thriving ecosystem of 3rd-party plugins supporting Eclipse, which would appear to affirm the wisdom of the open source project's early choice to rely heavily on plugins. At eclipse-plugins.info there are over 800 plugins registered, and that's a lot!&lt;br&gt;&lt;br&gt;==============&lt;br&gt;Sun could easily inspire and reward NetBeans plugin development&lt;br&gt;==============&lt;br&gt;Some may not realize it, but NetBeans also has very rich support for plugins at the platform level. Almost 90 plugins are listed at the NetBeans plugin catalog, but there appears to be far less current activity in the NetBeans plugin world than there is in the Eclipse world. When I looked at the page showing all new plugins added in the last 30 days the list was almost empty, although perhaps someone is just falling down on the job of maintaining the catalog. In any case, a shortage of active plugin developers and current plugins could add up to a serious disadvantage for NetBeans. It would probably be strategic for and cost-effective for Sun to institute a program that motivates and rewards people to actively develop NetBeans platform plugins. Sun could learn from Google's "Summer of Code" example and provide direct financial support for those who successfully build NetBeans-compatible, open source plugins. An investment of a mere $50,000 in this could yield surprisingly positive results and improve the overall competitive value proposition of the NetBeans platform. If they don't do something along these lines, then I suspect it will ultimately be much harder for NetBeans to remain a contender. Despite the valiant efforts of Sun's NetBeans group to compete and innovate, if there's no 3rd-party plugin development activity Sun will be going it alone once again, and that would be both unwise and unnecessary. Jonathan, show some love and support to the NetBeans team, write them a check and make a NetBeans plugin scholarship program happen before JavaOne. Sun can inspire, but only with inspiring leadership. &lt;br&gt;&lt;br&gt;Until next time,&lt;br&gt;Rick Ross&lt;br&gt;rick@javalobby.org&lt;br&gt;AIM or Yahoo Messenger: RickRossJL&lt;br&gt;</content>
    <postId>83333C34-7DA8-4004-B974-D1785BF40334</postId>
    <pubDate>2005-06-08T00:00:00-04:00</pubDate>
    <title>A Developer's Perspective</title>
</post>
