<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>김희경</author>
    <comments>
        <comment>
            <author>지나가던이</author>
            <date>2004-03-28T00:00:00-05:00</date>
            <content>푸하하~!</content>
        </comment>
    </comments>
    <content>모니터 화면에 "Hello World"를 찍기 위한 프로그램입니다.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;중고등학생 (High School/Jr.High)&lt;br&gt;================================&lt;br&gt;&lt;br&gt;10 PRINT "HELLO WORLD"&lt;br&gt;20 END&lt;br&gt;&lt;br&gt;아주 간단하지요 ^^;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;대학 신입생 (First year in College)&lt;br&gt;===================================&lt;br&gt;&lt;br&gt;program Hello(input, output)&lt;br&gt;begin&lt;br&gt;writeln('Hello World')&lt;br&gt;end.&lt;br&gt;&lt;br&gt;&lt;br&gt;대학 졸업반 (Senior year in College)&lt;br&gt;====================================&lt;br&gt;&lt;br&gt;(defun hello&lt;br&gt;(print&lt;br&gt;(cons 'Hello (list 'World))))&lt;br&gt;&lt;br&gt;&lt;br&gt;신입 사원 (New professional)&lt;br&gt;============================&lt;br&gt;&lt;br&gt;#include&lt;br&gt;void main(void)&lt;br&gt;{ &lt;br&gt;char *message[] = {"Hello ", "World"}; &lt;br&gt;int i; &lt;br&gt;&lt;br&gt;for(i = 0; i &amp;lt; 2; ++i) &lt;br&gt;printf("%s", message[i]); &lt;br&gt;printf("&lt;br&gt;"); &lt;br&gt;} &lt;br&gt;&lt;br&gt;&lt;br&gt;숙련된 사원 (Seasoned professional) &lt;br&gt;=================================== &lt;br&gt;&lt;br&gt;&lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;&lt;br&gt;class string &lt;br&gt;{ &lt;br&gt;private: &lt;br&gt;int size; &lt;br&gt;char *ptr; &lt;br&gt;&lt;br&gt;public: &lt;br&gt;string() : size(0), ptr(new char('')) {} &lt;br&gt;&lt;br&gt;string(const string &amp;s) : size(s.size) &lt;br&gt;{ &lt;br&gt;ptr = new char[size + 1]; &lt;br&gt;strcpy(ptr, s.ptr); &lt;br&gt;} &lt;br&gt;&lt;br&gt;~string() &lt;br&gt;{ &lt;br&gt;delete [] ptr; &lt;br&gt;} &lt;br&gt;&lt;br&gt;friend ostream &amp;operator &amp;lt;&amp;lt;(ostream &amp;, const string &amp;); &lt;br&gt;string &amp;operator=(const char *); &lt;br&gt;}; &lt;br&gt;&lt;br&gt;ostream &amp;operator&amp;lt;&amp;lt;(ostream &amp;stream, const string &amp;s) &lt;br&gt;{ &lt;br&gt;rettream &amp;lt;&amp;lt; s.ptr); &lt;br&gt;} &lt;br&gt;&lt;br&gt;string &amp;string::operator=(const char *chrs) &lt;br&gt;{ &lt;br&gt;if (this != &amp;chrs) &lt;br&gt;{ &lt;br&gt;delete [] ptr; &lt;br&gt;size = strlen(chrs); &lt;br&gt;ptr = new char[size + 1]; &lt;br&gt;strcpy(ptr, chrs); &lt;br&gt;} &lt;br&gt;return(*this); &lt;br&gt;} &lt;br&gt;&lt;br&gt;int main() &lt;br&gt;{ &lt;br&gt;string str; &lt;br&gt;&lt;br&gt;str = "Hello World"; &lt;br&gt;cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl; &lt;br&gt;return(0); &lt;br&gt;} &lt;br&gt;&lt;br&gt;슬슬...쓸데없이 복잡해 지기 시작 -_-;;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;마스터 프로그래머 (Master Programmer) &lt;br&gt;===================================== &lt;br&gt;&lt;br&gt;[ &lt;br&gt;uuid(2573F8F4-CFEE-101A-9A9F-00AA00342820) &lt;br&gt;] &lt;br&gt;library LHello &lt;br&gt;{ &lt;br&gt;// bring in the master library &lt;br&gt;importlib("actimp.tlb"); &lt;br&gt;importlib("actexp.tlb"); &lt;br&gt;&lt;br&gt;// bring in my interfaces &lt;br&gt;#include "pshlo.idl" &lt;br&gt;&lt;br&gt;[ &lt;br&gt;uuid(2573F8F5-CFEE-101A-9A9F-00AA00342820) &lt;br&gt;] &lt;br&gt;cotype THello &lt;br&gt;{ &lt;br&gt;interface IHello; &lt;br&gt;interface IPersistFile; &lt;br&gt;}; &lt;br&gt;}; &lt;br&gt;&lt;br&gt;[ &lt;br&gt;exe, &lt;br&gt;uuid(2573F890-CFEE-101A-9A9F-00AA00342820) &lt;br&gt;] &lt;br&gt;module CHelloLib &lt;br&gt;{ &lt;br&gt;&lt;br&gt;// some code related header files &lt;br&gt;importheade&lt;br&gt;r();&lt;br&gt;importheader();&lt;br&gt;importheader();&lt;br&gt;importheader("pshlo.h");&lt;br&gt;importheader("shlo.hxx");&lt;br&gt;importheader("mycls.hxx");&lt;br&gt;&lt;br&gt;// needed typelibs&lt;br&gt;importlibctimp.tlb");&lt;br&gt;importlib("actexp.tlb");&lt;br&gt;importlib("thlo.tlb");&lt;br&gt;&lt;br&gt;[ &lt;br&gt;uuid(2573F891-CFEE-101A-9A9F-00AA00342820),&amp;gt; &lt;br&gt;&lt;br&gt;#include "ipfix.hxx" &lt;br&gt;&lt;br&gt;extern HANDLE hEvent; &lt;br&gt;&lt;br&gt;class CHello : public CHelloBase &lt;br&gt;{ &lt;br&gt;public: &lt;br&gt;IPFIX(CLSID_CHello); &lt;br&gt;&lt;br&gt;CHello(IUnknown *pUnk); &lt;br&gt;~CHello(); &lt;br&gt;&lt;br&gt;HRESULT __stdcall PrintSz(LPWSTR pwszString); &lt;br&gt;&lt;br&gt;aggregatable &lt;br&gt;] &lt;br&gt;&lt;br&gt;coclass CHello &lt;br&gt;{ &lt;br&gt;cotype THello; &lt;br&gt;}; &lt;br&gt;}; &lt;br&gt;private: &lt;br&gt;static int cObjRef; &lt;br&gt;}; &lt;br&gt;&lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;#include "thlo.h" &lt;br&gt;#include "pshlo.h" &lt;br&gt;#include "shlo.hxx" &lt;br&gt;#include "mycls.hxx" &lt;br&gt;&lt;br&gt;int CHello::cObjRef = 0; &lt;br&gt;&lt;br&gt;CHello::CHello(IUnknown *pUnk) : CHelloBase(pUnk) &lt;br&gt;{ &lt;br&gt;cObjRef++; &lt;br&gt;return; &lt;br&gt;} &lt;br&gt;&lt;br&gt;HRESULT __stdcall CHello::PrintSz(LPWSTR pwszString) &lt;br&gt;{ &lt;br&gt;printf("%ws&lt;br&gt;", pwszString); &lt;br&gt;return(ResultFromScode(S_OK)); &lt;br&gt;} &lt;br&gt;&lt;br&gt;CHello::~CHello(void) &lt;br&gt;{ &lt;br&gt;&lt;br&gt;// when the object count goes to zero, stop the server &lt;br&gt;cObjRef--; &lt;br&gt;if( cObjRef == 0 ) &lt;br&gt;PulseEvent(hEvent); &lt;br&gt;&lt;br&gt;return; &lt;br&gt;} &lt;br&gt;&lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;&lt;br&gt;#include "ipfix.hxx" &lt;br&gt;&lt;br&gt;extern HANDLE hEvent; &lt;br&gt;&lt;br&gt;class CHello : public CHelloBase &lt;br&gt;{ &lt;br&gt;public: &lt;br&gt;IPFIX(CLSID_CHello); &lt;br&gt;&lt;br&gt;CHello(IUnknown *pUnk); &lt;br&gt;~CHello(); &lt;br&gt;HRESULT __stdcall PrintSz(LPWSTR pwszString); &lt;br&gt;&lt;br&gt;aggregatable &lt;br&gt;] &lt;br&gt;coclass CHello &lt;br&gt;{ &lt;br&gt;cotype THello; &lt;br&gt;}; &lt;br&gt;}; &lt;br&gt;private: &lt;br&gt;static int cObjRef; &lt;br&gt;}; &lt;br&gt;&lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;#include "thlo.h" &lt;br&gt;#include "pshlo.h" &lt;br&gt;#include "shlo.hxx" &lt;br&gt;#include "mycls.hxx" &lt;br&gt;int CHello::cObjRef = 0; &lt;br&gt;&lt;br&gt;CHello::CHello(IUnknown *pUnk) : CHelloBase(pUnk) &lt;br&gt;{ &lt;br&gt;cObjRef++; &lt;br&gt;return; &lt;br&gt;} &lt;br&gt;&lt;br&gt;HRESULT __stdcall CHello::PrintSz(LPWSTR pwszString) &lt;br&gt;{ &lt;br&gt;printf("%ws&lt;br&gt;", pwszString); &lt;br&gt;return(ResultFromScode(S_OK)); &lt;br&gt;} &lt;br&gt;&lt;br&gt;CHello::~CHello(void) &lt;br&gt;{ &lt;br&gt;&lt;br&gt;// when the object count goes to zero, stop the server &lt;br&gt;cObjRef--; &lt;br&gt;if( cObjRef == 0 ) &lt;br&gt;PulseEvent(hEvent); &lt;br&gt;return; &lt;br&gt;} &lt;br&gt;&lt;br&gt;#include &lt;br&gt;nclude "pshlo.h" &lt;br&gt;&lt;br&gt;#include "shlo.hxx"&lt;br&gt;#include "mycls.hxx"&lt;br&gt;HANDLE hEvent;&lt;br&gt;&lt;br&gt;int _cdecl&lt;br&gt;n( &lt;br&gt;int argc, &lt;br&gt;char * argv[] &lt;br&gt;) { &lt;br&gt;ULONG ulRef; &lt;br&gt;DWORD dwRegistration; &lt;br&gt;CHelloCF *pCF = new CHelloCF(); &lt;br&gt;hEvent = CreateEvent(NULL, FALSE, FALSE, NULL); &lt;br&gt;&lt;br&gt;// Initialize the OLE libraries &lt;br&gt;CoInitializeEx(NULL, COINIT_MULTITHREADED); &lt;br&gt;CoRegisterClassObject(CLSID_CHello, pCF, CLSCTX_LOCAL_SERVER, &lt;br&gt;REGCLS_MULTIPLEUSE, &amp;dwRegistration); &lt;br&gt;&lt;br&gt;// wait on an event to stop &lt;br&gt;WaitForSingleObject(hEvent, INFINITE); &lt;br&gt;&lt;br&gt;// revoke and release the class object &lt;br&gt;CoRevokeClassObject(dwRegistration); &lt;br&gt;ulRef = pCF-&amp;gt;Release(); &lt;br&gt;&lt;br&gt;// Tell OLE we are going away. &lt;br&gt;CoUninitialize(); &lt;br&gt;&lt;br&gt;return(0); } &lt;br&gt;&lt;br&gt;extern CLSID CLSID_CHello; &lt;br&gt;extern UUID LIBID_CHelloLib; &lt;br&gt;&lt;br&gt;CLSID CLSID_CHello = { /* 2573F891-CFEE-101A-9A9F-00AA00342820 */ &lt;br&gt;0x2573F891, &lt;br&gt;0xCFEE, &lt;br&gt;0x101A, &lt;br&gt;{ 0x9A, 0x9F, 0x00, 0xAA, 0x00, 0x34, 0x28, 0x20 } &lt;br&gt;}; &lt;br&gt;&lt;br&gt;UUID LIBID_CHelloLib = { /* 2573F890-CFEE-101A-9A9F-00AA00342820 */ &lt;br&gt;0x2573F890, &lt;br&gt;0xCFEE, &lt;br&gt;0x101A, &lt;br&gt;nclude &lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;#include &lt;br&gt;#include "pshlo.h" &lt;br&gt;#include "shlo.hxx" &lt;br&gt;#include "clsid.h" &lt;br&gt;&lt;br&gt;int _cdecl main( &lt;br&gt;int argc, &lt;br&gt;char * argv[] &lt;br&gt;) { &lt;br&gt;HRESULT hRslt; &lt;br&gt;IHello *pHello; &lt;br&gt;ULONG ulCnt; &lt;br&gt;IMoniker * pmk; &lt;br&gt;WCHAR wcsT[_MAX_PATH]; &lt;br&gt;WCHAR wcsPath[2 * _MAX_PATH]; &lt;br&gt;&lt;br&gt;// get object path &lt;br&gt;wcsPath[0] = ''; &lt;br&gt;wcsT[0] = ''; &lt;br&gt;if( argc &amp;gt; 1) { &lt;br&gt;mbstowcs(wcsPath, argv[1], strlen(argv[1]) + 1); &lt;br&gt;wcsupr(wcsPath); &lt;br&gt;} &lt;br&gt;else { &lt;br&gt;fprintf(stderr, "Object path must be specified&lt;br&gt;"); &lt;br&gt;return(1); &lt;br&gt;} &lt;br&gt;&lt;br&gt;// get print string &lt;br&gt;if(argc &amp;gt; 2) &lt;br&gt;mbstowcs(wcsT, argv[2], strlen(argv[2]) + 1); &lt;br&gt;else &lt;br&gt;wcscpy(wcsT, L"Hello World"); &lt;br&gt;&lt;br&gt;printf("Linking to object %ws&lt;br&gt;", wcsPath); &lt;br&gt;printf("Text String %ws&lt;br&gt;", wcsT); &lt;br&gt;&lt;br&gt;// Initialize the OLE libraries &lt;br&gt;&lt;br&gt;hRslt = CoInitializeEx(NULL, COINIT_MULTITHREADED); &lt;br&gt;&lt;br&gt;if(SUCCEEDED(hRslt)) { &lt;br&gt;&lt;br&gt;hRslt = CreateFileMoniker(wcsPath, &amp;pmk); &lt;br&gt;if(SUCCEEDED(hRslt)) &lt;br&gt;hRslt = BindMoniker(pmk, 0, IID_IHello, (void &lt;br&gt;&lt;br&gt;CEEDED(hRslt)) { &lt;br&gt;&lt;br&gt;// print a string out &lt;br&gt;pHello-&amp;gt;Print&lt;br&gt;Sz(wcsT);&lt;br&gt;Sleep(2000);&lt;br&gt;ulCnt = pHello-&amp;gt;Release();&lt;br&gt;}&lt;br&gt;else&lt;br&gt;printf("Failure to connect, status: %lx", hRslt);&lt;br&gt;&lt;br&gt;// Tell OLE we are going away.&lt;br&gt;CoUninitialize();&lt;br&gt;}&lt;br&gt;return(0);&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;br&gt;초보 해커 (Apprentice Hacker)&lt;br&gt;=============================&lt;br&gt;&lt;br&gt;#!/usr/local/bin/perl&lt;br&gt;$msg="Hello, world.&lt;br&gt;";&lt;br&gt;if ($#ARGV &amp;gt;= 0)&lt;br&gt;&lt;br&gt;while(defined($arg=shift(@ARGV)))&lt;br&gt;&lt;br&gt;$outfilename = $arg;&lt;br&gt;open(FILE, "&amp;gt;" . $outfilename) || die "Can't write $arg: $!&lt;br&gt;";&lt;br&gt;print (FILE $msg);&lt;br&gt;close(FILE)die "Can't close $arg: $!&lt;br&gt;";&lt;br&gt;}&lt;br&gt;} else&lt;br&gt;&lt;br&gt;print ($msg);&lt;br&gt;}&lt;br&gt;1;&lt;br&gt;&lt;br&gt;&lt;br&gt;경력 해커 (Experienced Hacker)&lt;br&gt;==============================&lt;br&gt;&lt;br&gt;#include&lt;br&gt;#define S "Hello, World&lt;br&gt;"&lt;br&gt;main(){exit(printf(S) == strlen(S) ? 0 : 1);}&lt;br&gt;&lt;br&gt;&lt;br&gt;숙련된 해커 (Seasoned Hacker)&lt;br&gt;==============================&lt;br&gt;&lt;br&gt;% cc -o a.out ~/src/misc/hw/hw.c&lt;br&gt;&lt;br&gt;&lt;br&gt;구루(지존) 해커 (Guru Hacker)&lt;br&gt;=============================&lt;br&gt;&lt;br&gt;% cat&lt;br&gt;Hello, world.&lt;br&gt;^D&lt;br&gt;&lt;br&gt;&lt;br&gt;신임 관리자 (New Manager)&lt;br&gt;=========================&lt;br&gt;&lt;br&gt;10 PRINT "HELLO WORLD"&lt;br&gt;20 END&lt;br&gt;&lt;br&gt;&lt;br&gt;중견 관리자 (Middle Manager)&lt;br&gt;============================&lt;br&gt;&lt;br&gt;mail -s "Hello, world." bob(at)b12 &lt;br&gt;밥, "Hello, world."를 출력하는 프로그램 소스를 좀 보내주겠나?&lt;br&gt;내일까지 부탁하네.&lt;br&gt;^D&lt;br&gt;&lt;br&gt;&lt;br&gt;고위 관리자 (Senior Manager)&lt;br&gt;============================&lt;br&gt;&lt;br&gt;% zmail jim&lt;br&gt;"Hello, world." 프로그램이 오늘 오후까지 필요함.&lt;br&gt;&lt;br&gt;&lt;br&gt;최고 경영자 (Chief Executive)&lt;br&gt;=============================&lt;br&gt;&lt;br&gt;% letter&lt;br&gt;letter: Command not found.&lt;br&gt;% mail&lt;br&gt;To: ^X ^F ^C&lt;br&gt;% help mail&lt;br&gt;help: Command not found.&lt;br&gt;% damn!&lt;br&gt;!: Event unrecognized&lt;br&gt;% logout&lt;br&gt;&lt;br&gt; &lt;br&gt; </content>
    <postId>4F257A3E-6A05-4F25-A3A6-E7E62BD4A589</postId>
    <pubDate>2004-03-26T00:00:00-05:00</pubDate>
    <title>[펌] 프로그래머 -길어요. 끝까지 보세요</title>
</post>
