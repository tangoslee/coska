<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>박진호</author>
    <comments/>
    <content>&lt;b&gt;Object-oriented programming&lt;/b&gt;&lt;br&gt;&lt;br&gt;저번에 내 준 숙제들 다 하셨나요? 숙제가 뭐 였냐구여? 헉... 그런 질문을..&lt;br&gt;저번 튜토리얼 다시 읽어보세요!!! &lt;br&gt;&lt;br&gt;object의 has-a 와 is-a 관계에 대해선 어느정도 감이 잡히셨으리라 믿구여 다음으로 넘어갑니다. 오늘은 &lt;font color="blue"&gt;abstraction, encapsulation, polymorphism, inheritance&lt;/font&gt;에 대해서 공부하겠습니다.&lt;br&gt;&amp;#8226;Objects - Packaging data and functionality together into units within a running computer program; objects are the basis of modularity and structure in an object-oriented computer program.&lt;br&gt;&amp;#8226;Abstraction - The ability for a program to ignore some aspects of the information that it is manipulating, i.e. the ability to focus on the essential.&lt;br&gt;&amp;#8226;Encapsulation - Ensures that users of an object cannot change the internal state of the object in unexpected ways; only the object's own internal methods are allowed to access its state. Each object exposes an interface that specifies how other objects may interact with it. Other objects will not know and thus rely upon this object's internal representation.&lt;br&gt;&amp;#8226;Polymorphism via message sending. Instead of subroutine calls, object-oriented languages can make message sends; the specific method which responds to a message send depends on what specific object the message is sent to. This gains polymorphism, because a single variable in the program text can hold different kinds of objects as the program runs, and thus the same program text can invoke different methods at different times in the same execution. To contrast, functional languages gain polymorphism through the use of first-class functions.&lt;br&gt;&amp;#8226;Inheritance- Organizes and facilitates polymorphism and encapsulation by permitting objects to be defined and created that are specialized types of already-existing objects - these can share (and extend) their behavior without having to re-implement that behavior. (Object-based languages do not always have inheritance.)&lt;br&gt;&lt;br&gt;&lt;b&gt;Abstraction&lt;/b&gt;&lt;br&gt;&lt;br&gt;Abstraction에는 control abstraction과 data abstraction이 있습니다.&lt;br&gt;&lt;br&gt;Control abstraction&lt;br&gt;&lt;br&gt;Control abstraction은 컴퓨터 프로그래밍 언어를 예로 들면 간단히 이해할 수 있습니다. 아시다시피 컴터는 0하고 1밖에 모릅니다. &lt;br&gt;a := (1 + 2) * 5&lt;br&gt;사람한테는 이게 쉬울지 몰라도, 컴터한테는 불가능한 일이죠. control abstraction없이는 아마 programmer가 무슨 바이너리 값을 어떤 register에 넣고 계산하는지 이런 자질구래한 것들을 지정해 줘야하는데 이런식으로 하면 프로그래머 못해먹죠...단순노가다라는 말 아시죠?&lt;br&gt;그래서 자질구래한 하드웨어 관련 코드는 컴파일러가 알아서 하게 하고, 프로그래머는 로직에만 집중하게 만들었죠. 요새 나오는 언어들 대부분이 이런 역할을 하고있습니다.&lt;br&gt;&lt;br&gt;Data abstraction&lt;br&gt;&lt;br&gt;Data abstraction은abstract properties of a data type과 concrete details of its implementation을 분리 시키는 것을 말합니다.Abstract properties 라는 놈은 the interface to the data type이라고도 할 수 있어요. 피자를 주문할때 우리는 피자만 관심이 있지, 밀가루는 어디서 사오고, 양파는 어디서 키우고..이런것들에는 관심이 없죠. 같은 맥락으로 이해하시면 편하실 꺼예요.&lt;br&gt;&lt;br&gt;&lt;b&gt;Polymorphism&lt;/b&gt;&lt;br&gt;&lt;br&gt;산넘어 산, 계속 말이 어려워 지죠? 저도 죽겠네요..ㅎㅎ polymorphism(한글로는 다형성 이라고 하네요)의 실제적인 예를 몇가지 들어보면, virtual function calling(late binding), operator overloading등을 들 수 있읍니다.&lt;br&gt;&lt;br&gt;무슨 말인지 모르시겠다구요? ㅎㅎ 그건 별들에게 물어봐! (썰렁해서 죄성합니당.)&lt;br&gt;&lt;br&gt;더 자세하게 들어가면 Parametric polymorphism, sub-typing polymorphism, Ad-hoc polymorphism등이 있는데 이런 용어들은 각자 공부하세요.&lt;br&gt;&lt;br&gt;&lt;b&gt;Inheritance &lt;/b&gt;&lt;br&gt;&lt;br&gt;생물학적 유전은 뭘 말하는 걸까요? 유전형질을 상속받은 자식은 어미 혹은 아버지의 특징을 일부분 가지고 있지요. 컴터 프로그래밍도 마찬가지입니다. &lt;br&gt;&lt;br&gt;"is-a" 관계를 가진 두data structure들을 엮는 거죠. 이를 subclassing이라고도 합니다.예를 들면, “개”는 “포유류”이구요 “포유류”는 “동물”입니다. 개 &amp;lt; 포유류 &amp;lt; 동물&lt;br&gt;&lt;br&gt;컴터의 예를 들어볼까요? 자바나, C#의 경우 모든 클래스 들은 System.object라는 클래스로 부터 상속을 받습니다. 당연한 소리지요?&lt;br&gt;더 자세한 사항이나 질문 사항은 내일 수업시간에 처리하는 걸로 하구, 여기서 이만 펜을…아니 자판을 놓겠습니다.&lt;br&gt;&lt;br&gt;두번에 걸쳐 Object-oriented에 대한 개념을 정리해 봤는데, 이해가 가시나요? 도움이 되셨으면 하는 바램입니다.&lt;br&gt;&lt;br&gt;내일 7시에 뵙겠습니다.&lt;br&gt;내일 수업때는 다시 설명 안합니다. 대신 질문을 받겠습니다.&lt;br&gt;1)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OOP에 대한 질문 및 대답&lt;br&gt;2)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;VS IDE 사용법 설명.&lt;br&gt;3)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;간단한 C# 프로젝트 : create new project -&gt; compile -&gt; run&lt;br&gt;감사합니다.&lt;br&gt;&lt;br&gt;더 자세하게 공부하고 싶으신 분들은 wekipedia에 가서 OOP 검색해 보세요. 원본 나옵니다.</content>
    <postId>CED4B144-F2FD-483B-8AB1-B6DC87B5A0CC</postId>
    <pubDate>2005-07-05T00:00:00-04:00</pubDate>
    <title>[불새 병아리] 수업 준비 노트</title>
</post>
