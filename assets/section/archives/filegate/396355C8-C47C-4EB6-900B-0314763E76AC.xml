<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>최선두</author>
    <comments>
        <comment>
            <author>Kelly J Lee</author>
            <date>2005-07-04T00:00:00-04:00</date>
            <content>최 선두씨, 심플하고 명확한 예습이네요. &lt;br&gt;열심히 하시는 불새팀 분위기 참 좋으네요 ^__^&lt;br&gt;화이팅~~~~^_________^</content>
        </comment>
    </comments>
    <content>Inheritance 는 깔끔하게 설명해주셔서 Polymorphism 만 미리 예습했습니다. ^___^&lt;br&gt;&lt;br&gt;Polymorphism allows you to implement derived class methods through a base class pointer during run-time.&amp;nbsp;&amp;nbsp;This is handy when you need to assign a group of objects to an array and then invoke each of their methods.&amp;nbsp;&amp;nbsp;They won't necessarily have to be the same object type.&amp;nbsp;&amp;nbsp;If they all share the same method name, that method of each object can be invoked.&lt;br&gt;&lt;br&gt;// A Base Class With a Virtual Method:&amp;nbsp;&amp;nbsp;DrawingObject.cs&lt;br&gt;using System;&lt;br&gt;&lt;br&gt;public class DrawingObject&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public virtual void Draw()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine("I'm just a generic drawing object.");&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;}&lt;br&gt;&lt;br&gt;// Derived Classes With Override Methods:&amp;nbsp;&amp;nbsp;Line.cs, Circle.cs, and Square.cs&lt;br&gt;using System;&lt;br&gt;&lt;br&gt;public class Line : DrawingObject&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public override void Draw()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine("I'm a Line.");&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;}&lt;br&gt;&lt;br&gt;public class Circle : DrawingObject&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public override void Draw()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine("I'm a Circle.");&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;}&lt;br&gt;&lt;br&gt;public class Square : DrawingObject&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public override void Draw()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine("I'm a Square.");&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;}&lt;br&gt;&lt;br&gt;NOTE: The override will happen only if the class is referenced through a base class reference.&amp;nbsp;&amp;nbsp;Overriding methods must have the same signature, name and parameters, as the virtual base class method it is overriding.&lt;br&gt;&lt;br&gt;//&amp;nbsp;&amp;nbsp;(Main) Program Implementing Polymorphism:&amp;nbsp;&amp;nbsp;DrawDemo.cs&lt;br&gt;using System;&lt;br&gt;&lt;br&gt;public class DrawDemo&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static int Main( )&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DrawingObject[] dObj = new DrawingObject[4];&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dObj[0] = new Line();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dObj[1] = new Circle();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dObj[2] = new Square();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dObj[3] = new DrawingObject();&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;foreach (DrawingObject drawObj in dObj)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;drawObj.Draw();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return 0;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;}&lt;br&gt;&lt;br&gt;Output:&lt;br&gt;&lt;br&gt;I'm a Line.&lt;br&gt;I'm a Circle.&lt;br&gt;I'm a Square.&lt;br&gt;I'm just a generic drawing object.&lt;br&gt;&lt;br&gt;NOTE: The last line is from the virtual Draw() method of the DrawingObject class.&amp;nbsp;&amp;nbsp;This is because the actual run-time type of the fourth array element was a DrawingObject object.&lt;br&gt;&lt;br&gt;NOTE: Inheritance에 대한 추가 설명으로, c#에선 multiple inheritance는 없다고 하네요. 대신 multiple interface inheritance 를 사용하실수 있답니다.&lt;br&gt;&lt;br&gt;Reference&lt;br&gt;&lt;br&gt;http://www.csharp-station.com/Tutorial.aspx</content>
    <postId>396355C8-C47C-4EB6-900B-0314763E76AC</postId>
    <pubDate>2005-06-30T00:00:00-04:00</pubDate>
    <title>[re] 불새 병아리팀 첫날 준비 노트 (예습용)</title>
</post>
