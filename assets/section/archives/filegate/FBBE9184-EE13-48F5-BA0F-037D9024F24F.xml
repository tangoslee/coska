<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>Park Jinho</author>
    <comments>
        <comment>
            <author>변성민</author>
            <date>2005-06-04T00:00:00-04:00</date>
            <content>As far as I am concerned ^^&lt;br&gt;Stack 과 Heap 에 대해서 약간 헷갈려하시는 거 같은데...부족하지만 제가 아는 바를 올려 볼게요.&lt;br&gt;1. SomeClass a = new SomeClass(); &lt;br&gt;2. SomeValueType b = initial value;&lt;br&gt;&lt;br&gt;이 경우에 a와 b는 둘 다 Stack에 생성 됩니다. 단 a 의 경우 Heap 에 생성된 Object에 대한 reference (일종의 메모리 address)를 가지고 있는 것이죠. new 라는 키워드 자체가 이미 시스템으로 부터 하나의 Heap memory 를 할당 받는 것입니다. 초기화는 new 다음의 class name을 적어줌으로써 수행되는 거구요.&lt;br&gt;</content>
        </comment>
        <comment>
            <author>변성민</author>
            <date>2005-06-04T00:00:00-04:00</date>
            <content>ValueType은 abstract class 여서 new keyword를 사용하지 못하는 클래스입니다. &lt;br&gt;System.Object(무조건 최상위 class) &amp;lt;-- System.ValueType &amp;lt;--- ( 여러 Value type 구조체 )&lt;br&gt;&lt;br&gt;단 여러 value type 구조체로 new keyword를 사용해서 초기화 할 수는 있지만, value type으로 선언을 할 때는 99.9% ... 바로 new 키워드 없이 선언을 해주는 게 일반적입니다. 이유는 바로 부모인System.ValueType class 자체가 이미 선언(implict declaration)을 해주었기 때문입니다.&lt;br&gt;&lt;br&gt;ex)&lt;br&gt;int i;&lt;br&gt;long l;&lt;br&gt;...&lt;br&gt;</content>
        </comment>
        <comment>
            <author>Park Jinho</author>
            <date>2005-06-06T00:00:00-04:00</date>
            <content>아하!!! 감사합니다. 이제 이해가 되네요.</content>
        </comment>
    </comments>
    <content>오늘은 약속대로 소스 분석입니당.&lt;br&gt;&lt;br&gt;1:&amp;nbsp;&amp;nbsp;//reference Type declaration&lt;br&gt;2:&amp;nbsp;&amp;nbsp;class ReferenceType {&lt;br&gt;3:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int myData;&lt;br&gt;4:&amp;nbsp;&amp;nbsp;}&lt;br&gt;&lt;br&gt;class 는 reference type 이구요,&lt;br&gt;&lt;br&gt;5:&amp;nbsp;&amp;nbsp;&lt;br&gt;6:&amp;nbsp;&amp;nbsp;//value Type declaration&lt;br&gt;7:&amp;nbsp;&amp;nbsp;struct ValueType {&lt;br&gt;8:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int myData;&lt;br&gt;9:&amp;nbsp;&amp;nbsp;}&lt;br&gt;&lt;br&gt;struct 는 value type 입니다.&lt;br&gt;&lt;br&gt;10: &lt;br&gt;11: class Test {&lt;br&gt;12:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static void Main() {&lt;br&gt;&lt;br&gt;value type 과 reference type 둘 다 new를 써서 constructor를 부를 수 있습니다. value type constructor가 단순히 object값을 초기화 하는데 반해, reference type constructor는 새로운 object를 heap에 생성하고 난후, object를 초기화 시킵니다. reference는 이 heap에 생성된 object의 memory address를 저장하죠. &lt;br&gt;&lt;br&gt;13:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ReferenceType a;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //reference a 생성&lt;br&gt;14:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a = new ReferenceType();&amp;nbsp;&amp;nbsp; //object 생성 --&gt; address 를 reference 에 저장&lt;br&gt;&lt;br&gt;a 는 heap에 생성된 reference type object 의 주소를 저장합니다.&lt;br&gt;&lt;br&gt;15:&lt;br&gt;16:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ValueType b;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //object 생성&lt;br&gt;17:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b = new ValueType();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//b값이 초기화 됨... &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (틀리면 지적해 주세요..책에 없어서 제가 그냥 짐작으로 적었습니다.)&lt;br&gt;&lt;br&gt;a가 heap에 생성이 되면...b 는 어디에 생성될까요? 궁금하네요...누군가가 대답해 주실 수 있으신가요? reference type이 heap에 생성이 된다니까...그냥 짐작으로 때려보면..stack이 남네요.&lt;br&gt;&lt;br&gt;저는 요놈들이 정확히 어떻게 작동되는지 잘 모르거든요...제가 좀 더 공부를 해서 추후에 올려드릴께요.&lt;br&gt;(잘 아시는 분이 올려주시면 더 좋구여. ^_^v )&lt;br&gt;&lt;br&gt;&lt;br&gt;18:&lt;br&gt;19:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a.myData = 123;&lt;br&gt;&lt;br&gt;a 의 myData에 123값을 넣구&lt;br&gt;&lt;br&gt;20:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.myData = 456;&lt;br&gt;&lt;br&gt;b 의 myData에는 456을..&lt;br&gt;&lt;br&gt;21:&lt;br&gt;22:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ReferenceType c = a;&lt;br&gt;&lt;br&gt;새로 c 라는 reference 를 생성한 후 위에 14번째 줄에서 만들어진 a (memory address of object) 값을 넘깁니다. 다른 말로하면, a 와 c 가 같은 메모리 주소를 가리키고 있는거죠.&lt;br&gt;&lt;br&gt;23:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ValueType d = b;&lt;br&gt;&lt;br&gt;위에서는 메모리 주소를 넘기는 반면, value type에서는 값을 넘깁니다. b object의 myData가 456d을 가지고 있으니까.. d.myData 도 456 이 들어가겠지요. reference 와는 다르게 이경우 두 object가 생깁니다. b 와 d는 메모리 상에 서로 다른 주소를 가지고 있죠...값만 같습니다...카피를 했으니까.&lt;br&gt;&lt;br&gt;24:&lt;br&gt;25:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c.myData = 777;&lt;br&gt;26:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d.myData = 777;&lt;br&gt;&lt;br&gt;c.myData와 d.myData의 값을 바꿨습니다.&lt;br&gt;&lt;br&gt;27:&lt;br&gt;28:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(a.myData); //prints 777&lt;br&gt;29:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(b.myData); //prints 456&lt;br&gt;30:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(c.myData); //prints 777&lt;br&gt;31:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(d.myData); //prints 777&lt;br&gt;32:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;33:&amp;nbsp;&amp;nbsp;}&lt;br&gt;&lt;br&gt;a 와 c가 같은 메모리를 가르키고 있기때문에 어느 한쪽을 바꾸면 다른 쪽도 바뀝니다.&lt;br&gt;제가 아파트 102호에 살고 있는데 103호 친구가 제 소개를 자기네집 오른쪽에 사는 놈, 101호 친구가 자기네집 왼쪽에 사는 놈...요런식으로 소개를 하는 거죠. 그래서 103의 neighbor가 바뀌면, 101호의 neighbor도 바뀌는 거죠.&lt;br&gt;&lt;br&gt;헉헉..제 나름대로는 이해가 됐는데 설명이 제대로 됐는지 모르겠습니다. (동욱 성님, 나 잘하구 있수?)&lt;br&gt;&lt;br&gt;아직 많이 모자라지만 열심히 하겠습니다. 꾸벅</content>
    <postId>FBBE9184-EE13-48F5-BA0F-037D9024F24F</postId>
    <pubDate>2005-06-02T00:00:00-04:00</pubDate>
    <title>C# 스터디 노트 - 두번째</title>
</post>
