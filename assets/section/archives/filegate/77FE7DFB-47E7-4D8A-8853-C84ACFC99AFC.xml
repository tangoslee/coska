<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>Park Jinho</author>
    <comments>
        <comment>
            <author>김석</author>
            <date>2005-06-02T00:00:00-04:00</date>
            <content>&lt;br&gt;1.1을쓸건지 2.0을 쓸건지 결정을 하는것도 중요한것같읍니다.&lt;br&gt;2.0은 9월쯤 나온다고하고 지금은 베타 2 까지 나온거로 아는데 2.0도 좋긴하지만 아무래도 베타쓰다 쓰린경험이 많아서... 여러분들은 어떤 의견을 가지고 계신지요??</content>
        </comment>
        <comment>
            <author>khboo</author>
            <date>2005-06-03T00:00:00-04:00</date>
            <content>let's discuss this at the meeting</content>
        </comment>
        <comment>
            <author>나수환</author>
            <date>2005-06-03T00:00:00-04:00</date>
            <content>저한테 좋은 기회가 될거라 생각합니다....꾸벅..아자!&lt;br&gt;</content>
        </comment>
        <comment>
            <author>김형태</author>
            <date>2005-06-06T00:00:00-04:00</date>
            <content>2.0 beta 로는 안정적인 작업을 하기 어려울 것 같습니다만... 그래도 중론을 모아 보도록 하겠습니다.</content>
        </comment>
    </comments>
    <content>안녕하세요. 박진호 입니다.&lt;br&gt;&lt;br&gt;저번주 부터 C# 공부를 시작해서 아직은 아무것도 모르지만, 아직 미처 C#을 접해보지 못하신 분들, 그리고 바빠서 책 볼 시간이 없으신 분들을 위해 제 스터디 노트를 공개하려고 합니다.나중에 Reference로 쓸려고 책보고 대충 중요하다 싶은거만 요약한거니까 자세한 내용은 기대하시지 마시기 바랍니다. 그리고, 학교에서 튜터를 하면서 느낀건데, 남들에게 설명하려고 복습을 하다보면 제가 더 많이 배우게 되더라구여 자기가 잘 알지 못한 상태에서는 설명이 안되니까요. 그리고 코스카에도 이런 KnowledgeBase 같은게 있으면 좋을것 같아서... 이런 저런 이유로 여기에 올리기로 맘 먹었습니다. 부족한점 완전 많을테니까 많이 보충해 주시구여, 열심히 할 테니까 많이 응원해 주세요. ^_^ &lt;br&gt;&lt;br&gt;참고로 하고 있는 책은 O'Reilly C# Language : Pocket reference 입니다. 책이 작아서 불필요한 말이 없어 좋더라구여. (책 선전 하는거 아닙니당)&lt;br&gt;&lt;br&gt;그럼 지금부터 C# 맛을 좀 보겠습니다.&lt;br&gt;--------------------------------------------&lt;br&gt;&lt;br&gt;* C# 이 뭐야?&lt;br&gt;&lt;br&gt;마이크로 소프트에서 만든 ( 어찌보면 거진 베낀거 같은...^_^;) 프로그래밍 언어입니다. .NET(DOT net 이라구 읽죠) Framework를 기반으로 디자인 되었습니다. 어떤 언어가 제일 낫다라고는 말할 수 없지만, msdn.com 에 방대한 자료와 Visual Studio 의 강력한 기능덕분에 많은 사람들이 C#을 애용하고 있답니다.&lt;br&gt;&lt;br&gt;다들 들어 보셨겠지만, .NET 오픈소스 버젼이 있네요.&lt;br&gt;DotGNU Protable .NET ( http://www.dotgnu.org ) 라는 곳 하고, &lt;br&gt;Mono ( http://www.go-mono.com ) 이 있으니까 궁금하시면 함 들려보시구여 Shared Source CLI ( http://msdn.microsoft.com/net/sscli )&amp;nbsp;&amp;nbsp;에서는 소스 공개도 되어 있으니까 필요하시면, 북마크 해두세요.&lt;br&gt;&lt;br&gt;현재 Framework 1.1 버젼이 주로 쓰이고 있구요, Visual Studio 2005 가 2.0 버젼 출시를 목표로 준비단계에 있습니다. (Beta 버젼 다운받아서 써보세요..)&lt;br&gt;&lt;br&gt;-------------------------------------------&lt;br&gt;&lt;br&gt;1) Identifiers and Keyword&lt;br&gt;&lt;br&gt;Identifiers 란 프로그래머가 Variable , data types, methods 등에 붙여주는 이름을 지칭하는 말입니다. 유니코드를 지원하니까 한글로도 코딩이 가능합니다. 물론 호완성을 위해서 comment만 한글로 하시는게..^_^ 간단하게 지켜야 될 것들만 나열해 보겠습니다.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; - case sensitive&lt;br&gt;&amp;nbsp;&amp;nbsp; - should not use keyword for your identifiers&lt;br&gt;&amp;nbsp;&amp;nbsp; - @ prefix may be used to clash with a keyword..하지만 안 쓰는게 좋을 것 같습니다.&lt;br&gt;&lt;br&gt;2) Fundamental Elements&lt;br&gt;&lt;br&gt;C# 프로그램을 크게 세 요소로 나눌 수 있습니다.&lt;br&gt;&amp;nbsp;&amp;nbsp; - Functions : way of manupulating data&lt;br&gt;&amp;nbsp;&amp;nbsp; - Data : data always have particular type ( In other word, data is always an instance of a type)&lt;br&gt;&amp;nbsp;&amp;nbsp; - Types : the most common types are classes and struct&lt;br&gt;&lt;br&gt;당연한 얘기죠? ㅋㅋ 그럼 Types 에 대해서 좀더 자세하게 들어가 보겠습니다.&lt;br&gt;&lt;br&gt;3) Types : Value vs. Reference Types&lt;br&gt;&lt;br&gt;Types는 memory handling 방식에 따라서 다시 두 종류로 나눌 수 있습니다.&lt;br&gt;&amp;nbsp;&amp;nbsp; - value types : struct , enum&lt;br&gt;&amp;nbsp;&amp;nbsp; - reference types : class , array , delegate , interface&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; 1&gt; Value Types&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- value type directly contain data, such as int type&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- a copy made of the value is assigned to another value&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; 2&gt; Reference Types&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- an object + a reference to that object&lt;br&gt;&lt;br&gt;헷갈리시나요? ㅋㅋ 저만 그런가?&lt;br&gt;예를 보면 좀 눈에 확 들어오겠죠?(참고로 예제들은 아까 위에서 말한 책에서 베꼈습니다.)&lt;br&gt;&lt;br&gt;//reference Type declaration&lt;br&gt;class ReferenceType {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int myData;&lt;br&gt;}&lt;br&gt;&lt;br&gt;//value Type declaration&lt;br&gt;struct ValueType {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int myData;&lt;br&gt;}&lt;br&gt;&lt;br&gt;class Test {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static void Main() {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ReferenceType a;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a = new ReferenceType();&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ValueType b;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b = new ValueType();&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a.myData = 123;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.myData = 456;&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ReferenceType c = a;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ValueType d = b;&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c.myData = 777;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d.myData = 777;&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(a.myData); //prints 777&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(b.myData); //prints 456&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(c.myData); //prints 777&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Console.WriteLine(d.myData); //prints 777&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;}&lt;br&gt;&lt;br&gt;감이 오시나요?&lt;br&gt;&lt;br&gt;낼은 위에 있는 소스코드 함 다시 분석해 보고, &lt;br&gt;reference type이랑 value type의 차이점도 함 비교해 보고.. 그외 predefined types 들도 함 짚어보고 넘어가겠습니다.&lt;br&gt;&lt;br&gt;간단하게 C#을 소개한 사이트 입니다. 둘러보세요.&lt;br&gt;http://en.wikipedia.org/wiki/C_Sharp_programming_language&lt;br&gt;&lt;br&gt;ㅋㅋ 도움이 되셨나요? </content>
    <postId>77FE7DFB-47E7-4D8A-8853-C84ACFC99AFC</postId>
    <pubDate>2005-06-01T00:00:00-04:00</pubDate>
    <title>C# 스터디 노트 - 시작하기</title>
</post>
