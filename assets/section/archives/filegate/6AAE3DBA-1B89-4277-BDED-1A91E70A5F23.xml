<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>Park Jinho</author>
    <comments>
        <comment>
            <author>alexna</author>
            <date>2005-06-29T00:00:00-04:00</date>
            <content>역쉬....먹는걸로 야기하니 무자게 좋네..앞으로 피자 사먹게되면 "has" &amp; "is"관계를 생각하고 먹어야지..&lt;br&gt;배우는 학생 자세가됨.. 안그러유?</content>
        </comment>
        <comment>
            <author>Sonia</author>
            <date>2005-06-29T00:00:00-04:00</date>
            <content>진호군 수고했어요. 내용이 좋네요.</content>
        </comment>
        <comment>
            <author>박재홍</author>
            <date>2005-06-29T00:00:00-04:00</date>
            <content>박진호씨는 훌륭한 강사가 되겠습니다.</content>
        </comment>
        <comment>
            <author>Kelly J Lee</author>
            <date>2005-06-29T00:00:00-04:00</date>
            <content>진호씨, 열심히 하는 모습 정말 보기 좋아요.&lt;br&gt;화이팅~~~불새팀 신나게 공부하실 수 있겠네요. ^_^</content>
        </comment>
        <comment>
            <author>Park Jinho</author>
            <date>2005-06-30T00:00:00-04:00</date>
            <content>헤헤...칭찬해 주시니 기분 좋네요. 열심히 공부해서 다음것도 조만간 올려드리겠습니다.</content>
        </comment>
    </comments>
    <content>&lt;b&gt;Object-Oriented Programming Concept&lt;/b&gt;&lt;br&gt;&lt;br&gt;안녕하세요. 박진호 입니다.&lt;br&gt;불새 병아리 팀의 첫번째 수업을 위한 노트를 준비해 봤습니다. 저도 아직 배우고 있는 수준이기 때문에 제가 이해를 잘 못하고 있거나 부족한 점들이 많습니?? 그런 사항들을 발견하시면 언제든지 수정 부탁드립니다.&lt;br&gt;&lt;br&gt;많은 분들이object-oriented programming 이라고 하면 감이 안 온다고 하시더라구요. 저는 OOP로 프로그래밍을 시작한 경우라 반대의 경우가 잘 감이 안오네요.ㅎㅎ&lt;br&gt;&lt;br&gt;이런 저런 자료를 둘러본 결과, 차이점을 나름대로 발견했습니다. &lt;br&gt;기존의 프로그램들은 Flow Chart를 그리고 어떤 Logic으로 데이타들이 처리가 될지를 생각했다면, OOP는 논리보다는 오히려 다루고자 하는 Object에 중점을 두고 생각하는 방식이 아닌가 생각합니다. 그래서 OOP프로그램을 시작하기에 앞서 프로그램에 관련된 모든 object와, 그것들이 서로 어떤 연관성이 있는지를 식별하는 - 흔히 데이터 모델링이라고 부르는 &amp;#8211; 작업을 합니다. 지금 각 팀(UI,IO,Network,Config)에서 진행되고 있는 설계가 주로 이런 역할을 하지요.&lt;br&gt;OOP 에 관한 자료들을 찾아보면, 이런 말들이 나옵니다. polymorphism, encapsulation, inheritance, access control, object reuse, late binding 흐흐흐 머리 아프시죠? 저도 잘 모릅니다. 숙제로 해오세요!!!&lt;br&gt;&lt;br&gt;Object-oriented programming 을 이해하려면 우선 Object끼리의 관계를 먼저 아는게 중요합니다. &lt;b&gt;"has-a" &lt;/b&gt; relationship 하고 &lt;b&gt;"is-a"&lt;/b&gt; relationship 이라는 것이죠.&lt;br&gt;&lt;br&gt;먼저 브레인 스토밍을 합니다. 그걸로 시나리오를 작성을 하죠. 개념설명이 길어지면 졸립기만 하실테니까 간단한 예로 Pizza를 object으로 만들어 보겠습니다.&lt;br&gt;&lt;br&gt;&lt;b&gt;Has-a Relationship&lt;/b&gt;&lt;br&gt;&lt;br&gt;피자를 잘 보면, 크러스트 위에 소스를 바르고 토핑을 올립니다. pizza "has" a topping 이 맞습니다. Pizza “is” a topping 이라고 생각하시는분…병원 함 가보세요.&lt;br&gt;&lt;b&gt;&lt;br&gt;public class Pizza {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private int topping;//has-a relationship--&gt;member field&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private String sauce;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int getTopping(){&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return topping;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void setTopping(int howMany) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.topping = howMany;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public String getSauce() {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return sauce;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void setSauce(String somesSauce) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.sauce = someSauce;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;}&lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;참, Object에 관해서 설명을 좀 드리고 가야겠네요. Object는properties 와 behaviors로 설명할 수 있습니다. Properties 는 topping 이나 소스 처럼 그 피자만의 데이터 이구요, behaviors 는 그 Object가 수행하는 역할들을 설명합니다. 쉽게 말하면,&amp;nbsp;&amp;nbsp;properties 는 fields 구요, behaviors는 functions입니다.&lt;br&gt;&lt;br&gt;&lt;b&gt;Is-a Relationship&lt;/b&gt;&lt;br&gt;&lt;br&gt;다음 개념은 "is-a" relationship 입니다. Inheritance relationship 이죠. 다시 피자로 예를 들겠습니다. 피자가 하나만 있느냐….아닙니다. 무쟈게 많죠. 하지만&amp;nbsp;&amp;nbsp;피자소스 바르고 토핑올라 간건 어느피자나 다 똑같고 이름도 피자라고 끝에 붙이지요. 그래서 피자헛 치즈 크러스트 피자 “is” a pizza 입니다. 코드 보시죠&lt;br&gt; &lt;br&gt;&lt;b&gt;&lt;br&gt;public class CheeseCrustPizza : Pizza {//is-a relationship&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private int size;//has a relationship&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private String style;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int getSize() {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return size;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void setSize(int sz) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.size = sz;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public String getStyle() {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return style;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void setStyle(String style) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.style = style;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;}&lt;br&gt;&lt;/b&gt;&lt;br&gt;위에서 토핑수랑 소스는 결정해 줬으니까 상속받은 클래스 에서는 또 한번더 코딩할 필요가 없습니다. 디자인을 잘 하면 코딩할 양이 많이 줄죠.&lt;br&gt;&lt;br&gt;&lt;b&gt;know more&lt;/b&gt;&lt;br&gt;&lt;br&gt;젤 간단한 단계를 넘으셨는데 앞으로 산이 높습니다. 우선 용어나 함 볼까요? &lt;br&gt;&lt;br&gt;1.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Abstraction &lt;br&gt;2.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Encapsulation &lt;br&gt;3.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Inheritance &lt;br&gt;4.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Polymorphism&lt;br&gt; &lt;br&gt;허걱!! 첩첩산중입니다. 오늘은 여기 까지만 하고 다음에 다시 공부해서 올려드리겠습니다.&lt;br&gt;몇가지 링크를 올려드릴테니까 참고하세요.&lt;br&gt;&lt;br&gt;이 튜토리얼의 오리지날 원본 입니다.&lt;br&gt;http://www.javacamp.org/moreclasses/oop/oop.html&lt;br&gt;Java vs&amp;nbsp;&amp;nbsp;c# : 자바를 배우신 분은 쉽게 c# 에 접근할 수 있을것 같아 이 링크도 추가합니다.&lt;br&gt;http://www.javacamp.org/javavscsharp/index.html &lt;br&gt;대표적인 oop 프로그래밍 언어지요. 자바 튜토리얼 입니다.&lt;br&gt;http://java.sun.com/docs/books/tutorial/java/concepts/&lt;br&gt;Object Oriented Concepts in C# 이라는 제목이네요.&lt;br&gt;http://www.c-sharpcorner.com/Code/2003/Dec/OOPS%20In%20CSharp%201.0.asp&lt;br&gt;한국말이 더 어렵습니다. 허걱….함 체험해 보시길..ㅋㅋㅋ&lt;br&gt;http://www.terms.co.kr/OOP.htm&lt;br&gt;위에 있는 자바 튜토리얼을 번역한 듯한 내용이네요. &lt;br&gt;http://www.javastudy.co.kr/docs/yopark/chap03/chap03.html&lt;br&gt;&lt;br&gt;</content>
    <postId>6AAE3DBA-1B89-4277-BDED-1A91E70A5F23</postId>
    <pubDate>2005-06-28T00:00:00-04:00</pubDate>
    <title>불새 병아리팀 첫날 준비 노트 (예습용)</title>
</post>
