<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>scott lee</author>
    <comments/>
    <content>&#xD;
&#xD;
 유형열씨가 정리한 EJB에 관한 글을 보고, 이 기술을 소개하는 것에 그치지 않았나하는 생각이든다. &#xD;
distributed environment라는 것을 자세히 보면 application distributed or server platform distributed인지를 구분해야 할것이다. EJB는 application distributed 상황에서 필요한데, &#xD;
이것을 multiple server이지만, 모든 component가 하나의 application에서 돌고 있고, 그 application이 한 server에서 운영된다면 굳이 RMI를 바탕에 둔 EJB를 쓸필요가 없다. &#xD;
&#xD;
Sun에서 보여준 EJB architecture는 규모가 큰 enterprise환경을 의미한다. 내가 볼때, EJB architecture는 Java로 server side application을 만들수 있다는 가능성을 보여준 것이지, server에서 Java program을 만드는 모든 회사에서 선택해야 할것이라고 보지는 않는다. 즉, 그런  heavy architecture를 사용해야하는 situation이 있는것이다. &#xD;
&#xD;
또 다른 EJB의 문제는 유씨의 글에서 처럼, 개발이 용이하다는 것이 아니라 복잡하다는 것이다. EJB remote interface, home interface, EJB bean으로 나뉘어지는 spec 자체가 일반 초보또는 중급자바기술자들이 이해하기가 쉽지 않고, program이 완성되고 나서도 debugging이 골치 아파진다. Simple Java bean과는 달리 EJB는 주로 IDE에 의존을 많이하게 되는데, EJB business logic을 programming  하고 난다음에 deployment descriptor setup, EJB registration과정이 복잡하여 시간이 많이 소요된다. &#xD;
&#xD;
가장 심각한 EJB based program의 문제는 바로 performance이다. 예를 들어 Hello World를 하나 화면에 보여주기위해서 15개의 object이 생성되어야 한다는 글도 읽은 적이 있다. 따라서 server platform의 CPU speed, memory size등이 powerful하지 않고서는 감당하기가 힘들다. 따라서 동시에 다수가 접속해야하는 e-commerce에서는 현재의 EJB architecture가 어떤식으로 라도 변형이 되어야 한다고 본다. &#xD;
&#xD;
또 하나 유씨가 언급하지 못한 것은 server side objects들간에 EJB화, None EJB화하는 비율조정이다. UML로 design한 모든 class를 EJB로 변경하고 나면, 모든 object이 home , remote interface, RMI라는 장비를 달고 다니게 됨으로 비효율적인 system이 되고 만다. 반드시 remote access가 되어야 할 object만 EJB로 하고, Session EJB에 의해서 불려지는 Model에 해당하는 object은 pure Java object을 사용할 수 있다. 이런 점에서 현재의 EJB architecture의 guide line 이 없는 형편이다. &#xD;
&#xD;
EJB가 왜 기원되었는가에 대한 이해가 없이 EJB로만 E-commerce 를 할 수 있을까? E-commerce입장에서 보면, EJB architecture에서 나타니지 않은 부분들, 즉, Web interface management, Web to Server object controller, Data source access mechanizm, Document exchange and format conversion, multi-channel UI management등 cover해야할 architecture area가 많다. EJB는 단지 distributed environment하에서 Java component - 이 component의 개념에 있어서도 분석적인 시각이 필요하다 - 의 persisitent, transaction, security를 어떻게 이룰수 있는지 보여준 sample에 불과하다. 현재, Session Bean과 Entity Bean으로 강요되는 object type에도 문제가 있다. 경우에 따라서는 이 둘도 아닌 제 3의 경우가 있기 때문이다. 모든 object이 remote access, transaction, security가 되어야 한다는 가정에서 출발한 현재의 EJB spec의 향후 조정되어야 한다. &#xD;
&#xD;
이런 관점에서 architecture는 자기 고객의 환경, 조건에 맞추어 알맞는 사이즈의 옷을 입혀야 한다고 사료된다. &#xD;
EJB 낙관주의에서 벗어나야 한다고 본다. &#xD;
&#xD;
&#xD;
&#xD;
  &#xD;
 </content>
    <postId>C4B5DF64-D6B2-4566-B802-6ED4B672F45F</postId>
    <pubDate>2001-03-25T00:00:00-05:00</pubDate>
    <title> EJB 를 반드시 사용해야 하나?</title>
</post>
