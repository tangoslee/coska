<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>Bran</author>
    <comments/>
    <content>I've excerted following from Sun's java forum and these may give us how to use EJBs in designing  and implementing one system. It's only dealing og EC's topic but there are some hints in those. Let's think about that and I excepted my personal opinion. (There are some wrong ideas also)&#xD;
&#xD;
(Q)&#xD;
I am in the process of designing an application using JSP, EJBs, JavaBeans &amp; Servlets. I would like to use statful Session EJBs to manage the business objects (ie: Customer, Order, etc.) and stateless Session EJBs to manage something like a Product as well as to handle form processing (ie: customer "clicks"). I am also in the process of building a tag that will enable our JSP/HTML developers to request an EJB and use it in the JSP. &#xD;
&#xD;
Is this the "right" way to do it? &#xD;
&#xD;
I am interested in current opinions about architecting a system around EJBs. Is there a decision tree for determining which objects should be EJBs and which objects should be simple JavaBeans and how those objects (EJBs in particular) should be accessed via JSP? &#xD;
&#xD;
(A1)&#xD;
In your example, I would not use stateful SB. I would use only stateless SB to perform actions on business objects that I would implement as regular classes or entity beans (Customer would be a regular class since its's attributes don't change frequently; &#xD;
Order is a business object that changes it's attributes, goes through some checks maybe and I would like it to be persistent in the event of a server crash; that makes the Order a good candidate for an entity bean). &#xD;
And another hint : do not use the EJBs directly in the JSPs. Put a Servlet in between (refere to the Model View Controller for more details). &#xD;
.... and I personally don't like JavaBeans... I prefer to use regular classes instead. &#xD;
&#xD;
(A2)&#xD;
please don't use statefull session beans. &#xD;
&#xD;
I hope what you mentioned custoner, order, etc.. represents table in database or some persistent store. So please use entity beans in that case. &#xD;
&#xD;
You can also try the following &#xD;
&#xD;
JSP -&gt; bean -&gt; session EJB -&gt; EntityEJB &#xD;
&#xD;
JSP:- mainly used for dynamic HTML generation &#xD;
BEAN:- normal java class which handle the request of jsp and send it to session EJB &#xD;
SESSIONEJB:- collects the data from EntityEJB(s) and send it to the bean &#xD;
ENTITYEJB:- represents the data in the database &#xD;
&#xD;
(A3)&#xD;
I don't know that I agree with you... an Entity Bean is shared across clients and I don't want clients sharing an Order. Consequently, it seems to make more sense to have an order be managed by a Stateful Session Bean... perhaps that stateful session bean would just manage a regular "Order" object then... but that bean would tie that order to a particular client. A stateless session bean would be used to perform actions against that order (ie: add a product, subtotal, etc.). &#xD;
&#xD;
I think the architecture I've settled on with look like this: &#xD;
&#xD;
Entity Beans to represent objects that are shared between all clients. These beans will be populated once. &#xD;
&#xD;
Stateful Session Beans that hold regular "java beans" that represent persistent data for ONE client. These beans will be originally populated once and updated as necessary during the client's session. I realize that this might be better done by an entity bean, but I don't want all my clients sharing the same Order, or the same Customer Profile. If you have a better way to do this, let me know. &#xD;
&#xD;
Stateless Session Beans that perform actions against the Stateful Session Beans based on a customer click. This is where the form validation and such occurs before a Stateful Session Bean is called to store the information in the user's profile. &#xD;
&#xD;
</content>
    <postId>26352300-F4E6-495B-A7B3-36DBFADFFCE2</postId>
    <pubDate>2001-05-03T00:00:00-04:00</pubDate>
    <title>How to use EJBs. (1)</title>
</post>
