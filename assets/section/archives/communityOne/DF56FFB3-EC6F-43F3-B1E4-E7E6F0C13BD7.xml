<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>신민용</author>
    <comments/>
    <content>package Util;&#xD;
&#xD;
use strict;&#xD;
&#xD;
use JSON;&#xD;
my $json  = JSON-&gt;new-&gt;utf8;&#xD;
&#xD;
sub encode&#xD;
{&#xD;
    my $value = shift;&#xD;
    return $json-&gt;encode($value);&#xD;
}    &#xD;
&#xD;
sub decode&#xD;
{&#xD;
    my $value = shift;&#xD;
    return $json-&gt;decode($value);&#xD;
}    &#xD;
&#xD;
sub dump&#xD;
{&#xD;
    my $value = shift;&#xD;
    &#xD;
    print Data::Dumper($value);&#xD;
}&#xD;
&#xD;
sub nowFull&#xD;
{&#xD;
    my ($sec,$min,$hour,$day,$mon,$year) = localtime;    &#xD;
    return sprintf("%d-%02d-%02d %02d:%02d:%02d",$year+1900,$mon+1,$day, $hour,$min,$sec );&#xD;
}&#xD;
&#xD;
sub nowDate&#xD;
{&#xD;
    my ($sec,$min,$hour,$day,$mon,$year) = localtime;    &#xD;
    return sprintf("%d-%02d-%02d",$year+1900,$mon+1,$day);&#xD;
}&#xD;
&#xD;
sub now&#xD;
{&#xD;
    my ($sec,$min,$hour,$day,$mon,$year) = localtime;    &#xD;
    return sprintf("%d-%02d-%02d %02d:%02d",$year+1900,$mon+1,$day, $hour,$min);&#xD;
}&#xD;
&#xD;
1;&#xD;
&#xD;
package User;&#xD;
&#xD;
use Dbx;&#xD;
&#xD;
sub insert&#xD;
{&#xD;
     my $sql = shift;&#xD;
     &#xD;
     my $pwd = crypt $sql-&gt;{PASSWORD},'$$'.$sql-&gt;{USER_ID};&#xD;
     &#xD;
     $sql-&gt;{PASSWORD} = $pwd;&#xD;
     &#xD;
     if ( $sql-&gt;{EMAIL} )&#xD;
     {&#xD;
         my $checkEmailDupSQL = "SELECT count(*) from USERS where EMAIL = '$sql-&gt;{EMAIL}'";&#xD;
         &#xD;
         my $cnt = Dbx::get($checkEmailDupSQL);&#xD;
         &#xD;
         if ( $cnt &gt; 0 ) &#xD;
         {&#xD;
            return "Dup Account!" &#xD;
         }&#xD;
     }    &#xD;
          &#xD;
     Dbx::insert('USERS',$sql);&#xD;
     &#xD;
     return "ok";&#xD;
}&#xD;
&#xD;
sub login&#xD;
{&#xD;
    my ($userID,$password) = @_;&#xD;
    &#xD;
    my $sql = "SELECT USER_NAME,ENG_NAME,USER_TYPE,PASSWORD FROM USERS WHERE USER_ID='$userID'";&#xD;
    &#xD;
    my $ref = Dbx::getRef($sql);&#xD;
    &#xD;
    if ( $ref == undef )&#xD;
    {&#xD;
         $ref = { error=&gt;'Username is not found!' };&#xD;
         &#xD;
         return $ref;&#xD;
    }&#xD;
        &#xD;
    my $pwd = crypt $password, '$$'.$userID;&#xD;
    &#xD;
    if ( $pwd ne $ref-&gt;{PASSWORD} )&#xD;
    {&#xD;
        $ref = { error=&gt;'password is wrong' };&#xD;
    }&#xD;
    else&#xD;
    {&#xD;
         delete $ref-&gt;{PASSWORD};&#xD;
    }    &#xD;
    &#xD;
    return $ref;&#xD;
}&#xD;
&#xD;
1;&#xD;
&#xD;
use strict 'vars';&#xD;
use strict 'subs';&#xD;
&#xD;
package Session;&#xD;
&#xD;
use Cache;&#xD;
&#xD;
my $cache =  Cache-&gt;new("session");&#xD;
&#xD;
sub addUser&#xD;
{&#xD;
    my $userID = $_[0];&#xD;
    &#xD;
    my $sessRef = $cache-&gt;checkOut;&#xD;
    &#xD;
    my $userInfo;&#xD;
    &#xD;
    eval&#xD;
    {&#xD;
        $userInfo = $sessRef-&gt;{$userID};&#xD;
        &#xD;
        if ( $userInfo == undef )&#xD;
        {&#xD;
             $userInfo = []; &#xD;
             $userInfo-&gt;[0] = time();  ## login  date&#xD;
             $userInfo-&gt;[1] = undef;      ## logout date&#xD;
             $userInfo-&gt;[2] = [];      ## memo array&#xD;
    &#xD;
             $sessRef-&gt;{$userID} = $userInfo;         &#xD;
        }&#xD;
        else&#xD;
        {&#xD;
             $userInfo-&gt;[0] = time();&#xD;
             $userInfo-&gt;[1] = undef;&#xD;
        }&#xD;
        &#xD;
        $cache-&gt;commit;&#xD;
    };&#xD;
    &#xD;
    if ( $@ )&#xD;
    {&#xD;
        $cache-&gt;rollback;&#xD;
        die "[$@]";&#xD;
    }&#xD;
    &#xD;
    return $userInfo;&#xD;
}&#xD;
&#xD;
sub addMemo&#xD;
{&#xD;
    my ($recvID,$memo) = @_;   &#xD;
    &#xD;
    my $sessRef = $cache-&gt;checkOut;&#xD;
    &#xD;
    my $userInfo;&#xD;
    &#xD;
    eval&#xD;
    {&#xD;
        $userInfo = $sessRef-&gt;{$recvID};&#xD;
        &#xD;
        if ( $userInfo == undef )&#xD;
        {&#xD;
             $userInfo = []; &#xD;
             $userInfo-&gt;[0] = undef;&#xD;
             $userInfo-&gt;[1] = time();&#xD;
             $userInfo-&gt;[2] = [];&#xD;
    &#xD;
             $sessRef-&gt;{$recvID} = $userInfo;         &#xD;
        }&#xD;
        &#xD;
        &#xD;
        my $arr = $userInfo-&gt;[2];&#xD;
        &#xD;
        &#xD;
        push(@$arr,$memo);&#xD;
        &#xD;
        $cache-&gt;commit;&#xD;
    };&#xD;
    &#xD;
    if ( $@ )&#xD;
    {&#xD;
        $cache-&gt;rollback;&#xD;
        die "[$@]";&#xD;
    }&#xD;
}&#xD;
&#xD;
sub getMemo&#xD;
{&#xD;
    my $userID = $_[0];   &#xD;
    &#xD;
    my $sessRef = $cache-&gt;readOut;&#xD;
    &#xD;
    my $userInfo;&#xD;
    &#xD;
    $userInfo = $sessRef-&gt;{$userID};&#xD;
        &#xD;
    if ( $userInfo == undef )&#xD;
    {&#xD;
         return [];&#xD;
    }&#xD;
    &#xD;
    my $arr = $userInfo-&gt;[2];&#xD;
    &#xD;
    return $arr;&#xD;
}&#xD;
&#xD;
sub userList&#xD;
{&#xD;
    my $userID = $_[0];   &#xD;
    &#xD;
    my $sessRef = $cache-&gt;readOut;&#xD;
    &#xD;
    my $now   = time();&#xD;
    my $limit = 60*60;  ## 1 hour&#xD;
    &#xD;
    my $needUpdate;&#xD;
    &#xD;
    my @result = ();&#xD;
    &#xD;
    while ( my($loginUser,$dataSet) = each(%$sessRef) )&#xD;
    {&#xD;
           if ( $dataSet-&gt;[1] )&#xD;
           {&#xD;
                 next; &#xD;
           }&#xD;
            &#xD;
           my $gap = $now - $dataSet-&gt;[0];&#xD;
           &#xD;
           if ( $gap &gt; $limit )&#xD;
           {&#xD;
                $needUpdate = 1;&#xD;
                next;&#xD;
           }&#xD;
           &#xD;
           my @cell = ( $loginUser, $gap );&#xD;
           push(@result,[@cell]);&#xD;
    }    &#xD;
    &#xD;
    return \@result;&#xD;
}&#xD;
&#xD;
&#xD;
&#xD;
1;&#xD;
__END__&#xD;
&#xD;
&#xD;
&#xD;
use Fcntl ':flock';&#xD;
&#xD;
package Log;&#xD;
&#xD;
my $mode = 0;&#xD;
my $name = 'myLog.xml';&#xD;
my $file;&#xD;
&#xD;
open($file , "&gt;$name") or die "&gt;&gt;&gt;Cannot open file. error&lt;&lt;&lt;";&#xD;
&#xD;
sub init&#xD;
{&#xD;
&#xD;
}&#xD;
&#xD;
sub close&#xD;
{&#xD;
    print $file "\n";&#xD;
    &#xD;
    close($file);   &#xD;
}&#xD;
&#xD;
sub out&#xD;
{&#xD;
	  if ( $mode == 0 ) &#xD;
	  {&#xD;
            flock($file, LOCK_EX);&#xD;
	        foreach $var (@_)&#xD;
	        {&#xD;
	            print $file $var,"\n";   &#xD;
	        }&#xD;
	        flock($file, LOCK_UN);    &#xD;
	  }      &#xD;
}&#xD;
&#xD;
sub debug&#xD;
{&#xD;
	  if ( $mode == 0 ) &#xD;
	  {&#xD;
            flock($file, LOCK_EX);&#xD;
	        printLog(\@_);  &#xD;
	        flock($file, LOCK_UN);    &#xD;
	  }      &#xD;
}&#xD;
&#xD;
sub info&#xD;
{&#xD;
            flock($file, LOCK_EX);&#xD;
	        printLog(\@_);  &#xD;
	        flock($file, LOCK_UN);    &#xD;
}&#xD;
&#xD;
sub error&#xD;
{&#xD;
	   flock($file, LOCK_EX);&#xD;
	   print $file "################# ERROR ###############\n";&#xD;
	   printLog(\@_);  	   &#xD;
	   &#xD;
	   $i = 1;&#xD;
	   &#xD;
	   $line = (caller(0))[2];&#xD;
	   &#xD;
	  ($package, $filename, $line2, $subroutine) = caller($i); &#xD;
	  &#xD;
	  while ( $subroutine )&#xD;
	  {&#xD;
	  	  print $file '  --&gt; @',$subroutine,'] #',$line,"\n";&#xD;
	  	  $i++;&#xD;
	  	  $line = $line2;&#xD;
	  	  ($package, $filename, $line2, $subroutine) = caller($i); &#xD;
	  }&#xD;
	  &#xD;
	  print $file "\n";&#xD;
	   &#xD;
	  flock($file, LOCK_UN);    &#xD;
	   &#xD;
}&#xD;
&#xD;
sub printLog&#xD;
{&#xD;
	  my $msg = shift;&#xD;
	  &#xD;
	  ($package2, $filename, $line) = caller(1);&#xD;
	  &#xD;
	  ($package, $filename2, $line2, $subroutine, $hasargs, $wantarray, $evaltext, $is_require, $hints, $bitmask) = caller(2); &#xD;
&#xD;
	  my $log;&#xD;
	  $flag = 0;&#xD;
	  foreach $x (@$msg)&#xD;
	  {&#xD;
	  	 if ( $flag == 0 )&#xD;
	  	 {&#xD;
	  	    $log .= '{'.$x.'}';&#xD;
	  	    $flag = 1;&#xD;
	  	 }&#xD;
	  	 else&#xD;
	  	 {&#xD;
	  	    $log .= '=&gt;['.$x.'] ';&#xD;
	  	    $flag = 0;&#xD;
	  	 }&#xD;
	  }&#xD;
	  &#xD;
	  my $idx = rindex($filename,'/');&#xD;
	  if ( $idx &gt; 0 )&#xD;
	  {&#xD;
	       $filename = substr($filename,$idx); &#xD;
	  }&#xD;
	  &#xD;
    print $file '[',$filename,'@',$subroutine,'] #',$line,': ',$log,"\n";&#xD;
    &#xD;
}&#xD;
&#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
package Dbx;&#xD;
&#xD;
use strict;&#xD;
&#xD;
use DBI;&#xD;
use Setup;&#xD;
&#xD;
&#xD;
my $dbh;&#xD;
my $dataSrc = Setup::dataSource;&#xD;
   if ( $dataSrc )&#xD;
   {&#xD;
        $dbh = DBI-&gt;connect(@$dataSrc,{PrintError=&gt;0}) || die "Could not connect to database:"; &#xD;
   }     &#xD;
&#xD;
sub begin&#xD;
{&#xD;
    $dbh-&gt;{RaiseError} = 1; &#xD;
    $dbh-&gt;{AutoCommit} = 0;&#xD;
}&#xD;
&#xD;
sub commit&#xD;
{&#xD;
    $dbh-&gt;commit() || die "\n&gt;&gt;&gt;[$!:COMMIT.ERROR]&lt;&lt;&lt;\n---end---\n\n";&#xD;
}    &#xD;
&#xD;
sub rollback&#xD;
{&#xD;
    $dbh-&gt;rollback() || die "\n&gt;&gt;&gt;[$!:ROLLBACK.ERROR]&lt;&lt;&lt;\n---end---\n\n";&#xD;
}    &#xD;
&#xD;
sub init&#xD;
{&#xD;
    if ( ! $dbh  )&#xD;
    {&#xD;
        my($url)  = $_[0];&#xD;
        my($user) = $_[1];&#xD;
        my($pwd)  = $_[2];&#xD;
        &#xD;
        ###print $url,"\n";&#xD;
        &#xD;
        $dbh = DBI-&gt;connect($url,$user,$pwd ) || die "Could not connect to database:"; &#xD;
    }    &#xD;
}&#xD;
&#xD;
sub insert&#xD;
{&#xD;
	 my $tableName   = $_[0];&#xD;
     my $fieldValues = $_[1];&#xD;
     &#xD;
     die "Not enough argment in Dbx::insert()" if  $fieldValues == undef;&#xD;
     &#xD;
     my $sql = 'INSERT INTO '.$tableName.' (';&#xD;
     &#xD;
     my $values = ")\n  VALUES(";&#xD;
     &#xD;
     my ($key,$value) = each(%$fieldValues);&#xD;
     &#xD;
     $sql .= $key;&#xD;
     $values .= '\''.$value.'\'';&#xD;
     &#xD;
     while( ($key,$value) = each(%$fieldValues) )&#xD;
     {&#xD;
         $sql .=','.$key;&#xD;
         $values .= ',\''.$value.'\'';&#xD;
     }	&#xD;
     &#xD;
     $sql .= $values.')';&#xD;
     &#xD;
     $dbh-&gt;do($sql) or die "\n&gt;&gt;&gt;[INSERT.ERROR]&lt;&lt;&lt;\n$DBI::errstr\n\n$sql\n";&#xD;
}&#xD;
	&#xD;
sub update&#xD;
{&#xD;
     my ($tableName,$fieldValues,$whereValues) = @_;&#xD;
     &#xD;
     my $sql = 'UPDATE '.$tableName."\n SET ";&#xD;
     &#xD;
     my ($key,$value) = each(%$fieldValues);&#xD;
     &#xD;
     $sql .=$key.'=\''.$value.'\'';&#xD;
     &#xD;
     while( ($key,$value) = each(%$fieldValues) )&#xD;
     {&#xD;
         $sql .=','.$key.'=\''.$value.'\'';&#xD;
     }	&#xD;
     &#xD;
     ($key,$value) = each(%$whereValues);&#xD;
     &#xD;
     $sql .="\n WHERE ".$key.'=\''.$value.'\'';&#xD;
     &#xD;
     while( ($key,$value) = each(%$whereValues) )&#xD;
     {&#xD;
         $sql .="\n AND ".$key.'=\''.$value.'\'';&#xD;
     }	&#xD;
     &#xD;
     $dbh-&gt;do($sql) || die "\n&gt;&gt;&gt;[$!:UPDATE ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
}&#xD;
&#xD;
sub delete&#xD;
{&#xD;
     my ($tableName,$whereValues) = @_;&#xD;
     &#xD;
     my $sql = 'DELETE '.$tableName;&#xD;
     &#xD;
     my ($key,$value) = each(%$whereValues);&#xD;
     &#xD;
     if ( $key )&#xD;
     {&#xD;
         $sql .="\n WHERE ".$key.'=\''.$value.'\'';&#xD;
         &#xD;
         while( ($key,$value) = each(%$whereValues) )&#xD;
         {&#xD;
             $sql .="\n AND ".$key.'=\''.$value.'\'';&#xD;
         }	&#xD;
     }    &#xD;
     &#xD;
     $dbh-&gt;do($sql) || die "\n&gt;&gt;&gt;[$!:DELETE ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
}&#xD;
&#xD;
sub getRef&#xD;
{&#xD;
	  my $sth = $dbh-&gt;prepare($_[0]); &#xD;
	  &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:getRef.ERROR]&lt;&lt;&lt;\n$_[0]\n---end---\n\n";&#xD;
&#xD;
	  return $sth-&gt;fetchrow_hashref; &#xD;
}&#xD;
&#xD;
sub get&#xD;
{&#xD;
	  my $sth = $dbh-&gt;prepare($_[0]); &#xD;
	  &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:get.ERROR]&lt;&lt;&lt;\n$_[0]\n---end---\n\n";&#xD;
&#xD;
	  return ($sth-&gt;fetchrow_array)[0]; &#xD;
}&#xD;
&#xD;
sub query&#xD;
{&#xD;
	  my $sql   = $_[0];&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  &#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:query.ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
	  &#xD;
&#xD;
	  while ( my @row = $sth-&gt;fetchrow_array ) &#xD;
	  { &#xD;
	      push(@$resultList,[@row]);&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub rangeQuery&#xD;
{&#xD;
	  my $sql   = $_[0];&#xD;
	  my $skip  = $_[1];&#xD;
	  my $cnt   = $_[2];&#xD;
	  &#xD;
	  if ( $cnt == undef )&#xD;
	  {&#xD;
	       $cnt = 9999;&#xD;
	  }&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:rangeQuery.ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
	  &#xD;
	  &#xD;
	  my @row;&#xD;
	  &#xD;
	  while( $skip &gt; 0 )&#xD;
	  {&#xD;
	       @row = $sth-&gt;fetchrow_array;&#xD;
	       &#xD;
	       if ( ! @row )&#xD;
	       {&#xD;
	            return $resultList;&#xD;
	       }&#xD;
	       $skip--;&#xD;
	  }&#xD;
&#xD;
	  while ( @row = $sth-&gt;fetchrow_array ) &#xD;
	  { &#xD;
	      if ( $cnt &gt; 0 )&#xD;
	      {&#xD;
	           push(@$resultList,[@row]);&#xD;
	           $cnt--;&#xD;
	      }     &#xD;
	      else&#xD;
	      {&#xD;
	           return $resultList;&#xD;
	      }&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub singleQuery&#xD;
{&#xD;
	  my $sql   = $_[0];&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  &#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:singleQuery.ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
	  &#xD;
&#xD;
	  while ( my @row = $sth-&gt;fetchrow_array ) &#xD;
	  { &#xD;
	      push(@$resultList,$row[0]);&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub hashQuery&#xD;
{&#xD;
	  my $sql = $_[0];&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  &#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:hashQuery.ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
	  &#xD;
&#xD;
	  while ( my $hashref = $sth-&gt;fetchrow_hashref ) &#xD;
	  { &#xD;
	      push(@$resultList,$hashref);&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub info()&#xD;
{&#xD;
	return $dbh;&#xD;
}&#xD;
&#xD;
1;&#xD;
&#xD;
__END__&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
package Cache;&#xD;
&#xD;
use strict;&#xD;
&#xD;
use Storable;&#xD;
use Fcntl ':flock';&#xD;
&#xD;
sub new&#xD;
{&#xD;
    my($type) = $_[0];&#xD;
    my($name) = $_[1];&#xD;
    &#xD;
    my $fd;&#xD;
    &#xD;
    open($fd, "+&lt;$name.dat") or &#xD;
        ##print "try again\n!";&#xD;
        open($fd, "+&gt;$name.dat") or&#xD;
              die "&gt;&gt;&gt;Cannot open file[$name.dat].[$!] error&lt;&lt;&lt;";&#xD;
    &#xD;
    binmode($fd);&#xD;
&#xD;
    my($self) = {};&#xD;
&#xD;
    $self-&gt;{fd} = $fd;&#xD;
     &#xD;
    bless($self, $type);&#xD;
    return($self);&#xD;
}&#xD;
&#xD;
sub commit&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    &#xD;
    my $table  = $self-&gt;{data};&#xD;
    my $fd     = $self-&gt;{fd};&#xD;
&#xD;
    my $serialized = Storable::freeze $table;&#xD;
    &#xD;
    truncate( $fd, 0 );&#xD;
    seek($fd,0,0);&#xD;
    print $fd $serialized;&#xD;
    flock($fd, LOCK_UN);    &#xD;
}&#xD;
&#xD;
sub rollback&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    &#xD;
    my $fd     = $self-&gt;{fd};&#xD;
    &#xD;
    flock($fd, LOCK_UN);    &#xD;
}&#xD;
&#xD;
sub checkOut&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    my $fd = $self-&gt;{fd};&#xD;
    &#xD;
    flock($fd, LOCK_EX);&#xD;
    &#xD;
    seek($fd,0,0);&#xD;
    &#xD;
    my $serialized;&#xD;
    my $buffer;&#xD;
    &#xD;
    while ( my $nBytes = read($fd, $buffer, 1024) ) &#xD;
    {&#xD;
        $serialized .= $buffer;   &#xD;
    }    &#xD;
    &#xD;
    if ( length($serialized) == 0 )&#xD;
    {&#xD;
         $self-&gt;{data} = {};&#xD;
    }&#xD;
&#xD;
    else&#xD;
    {&#xD;
         $self-&gt;{data} = Storable::thaw($serialized);&#xD;
    }    &#xD;
    &#xD;
    return $self-&gt;{data};&#xD;
}&#xD;
&#xD;
sub readOut&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    my $fd = $self-&gt;{fd};&#xD;
    &#xD;
    &#xD;
    flock($fd, LOCK_SH);&#xD;
    &#xD;
    seek($fd,0,0);&#xD;
    &#xD;
    my $serialized;&#xD;
    my $buffer;&#xD;
    &#xD;
    while ( my $nBytes = read($fd, $buffer, 1024) ) &#xD;
    {&#xD;
        $serialized .= $buffer;   &#xD;
    }    &#xD;
    &#xD;
    &#xD;
&#xD;
    flock($fd, LOCK_UN);    &#xD;
    &#xD;
    if ( length($serialized) == 0 )&#xD;
    {&#xD;
         return {};   &#xD;
    }&#xD;
&#xD;
    return Storable::thaw($serialized);&#xD;
}&#xD;
&#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
package BoardManager;&#xD;
&#xD;
use strict 'vars';&#xD;
use strict 'subs';&#xD;
##use strict 'refs';&#xD;
&#xD;
########################################&#xD;
#   select ($cgi);&#xD;
#   insert ($cgi);&#xD;
#   detail ($cgi);&#xD;
#   comment($cgi);&#xD;
#   update ($cgi);&#xD;
########################################&#xD;
use Setup;&#xD;
use Cache;&#xD;
use Dbx;&#xD;
use CGI;&#xD;
use Data::Dumper;&#xD;
########################################&#xD;
my $PageSize = Setup::PageSize;  &#xD;
########################################&#xD;
&#xD;
&#xD;
sub execute&#xD;
{&#xD;
    my $action;&#xD;
    my $result;&#xD;
    eval&#xD;
    {&#xD;
       my $cgi = shift;&#xD;
       &#xD;
       $action = $cgi-&gt;param('action');&#xD;
       &#xD;
       $result = &amp;${action}($cgi);              &#xD;
    };&#xD;
    &#xD;
    if ( $@ )&#xD;
    {&#xD;
        $result = { error=&gt;$@  , action=&gt;$action };&#xD;
    }   &#xD;
    &#xD;
    #use Log;&#xD;
    #Log::out( Dumper($result) );&#xD;
    return $result;&#xD;
}&#xD;
&#xD;
##########################################################&#xD;
### select&#xD;
##########################################################&#xD;
sub select&#xD;
{   &#xD;
     my $cgi = shift;&#xD;
   &#xD;
     my $pageNo    = $cgi-&gt;param('page');&#xD;
     my $boardName = $cgi-&gt;param('board');&#xD;
     &#xD;
     my $cache     =  Cache-&gt;new($boardName);&#xD;
     my $cachedRef = $cache-&gt;readOut;&#xD;
     my $list      = $cachedRef-&gt;{list};&#xD;
     &#xD;
     my $size      = @$list;&#xD;
     &#xD;
     if ( $pageNo &gt; $size )&#xD;
     {&#xD;
          $pageNo = $size;&#xD;
     }&#xD;
     &#xD;
     my $startPage = ($pageNo-1) * $PageSize;&#xD;
&#xD;
     my $rowCnt = 0;     &#xD;
          &#xD;
     my $startID = 0;&#xD;
     my $endID   = 99999999999999;&#xD;
     my $skip;&#xD;
     &#xD;
     my $pageCnt = 0;&#xD;
     &#xD;
     my $prevID = 0;&#xD;
     my $row;&#xD;
     &#xD;
     my $i;&#xD;
     for ( $i = 0; $i &lt; $size; $i++ )&#xD;
     {&#xD;
          $row = $list-&gt;[$i];&#xD;
          &#xD;
          $rowCnt += $row-&gt;[1];  &#xD;
          &#xD;
          ##print "rowCnt=$rowCnt ==&gt; $row-&gt;[0]\n";&#xD;
          &#xD;
          if ( $rowCnt &gt; $startPage )&#xD;
          {&#xD;
               $startID = $prevID;&#xD;
               $pageCnt = $rowCnt-$startPage;&#xD;
               &#xD;
               $skip    = $startPage - ($rowCnt-$row-&gt;[1]);&#xD;
               &#xD;
               $i++;&#xD;
               last;&#xD;
          }&#xD;
          &#xD;
          $prevID = $row-&gt;[0];&#xD;
     }&#xD;
     &#xD;
     for ( ; $i &lt; $size; $i++ )&#xD;
     {&#xD;
          $row = $list-&gt;[$i];&#xD;
          &#xD;
          $pageCnt += $row-&gt;[1];  &#xD;
          &#xD;
          if ( $pageCnt &gt;= $PageSize )&#xD;
          {&#xD;
               $endID = $row-&gt;[0];&#xD;
               last;&#xD;
          }&#xD;
     }&#xD;
     &#xD;
     ##print "start=$startID, end=$endID, pageCnt=$pageCnt, skip=$skip\n";&#xD;
     &#xD;
     my $fields = 'BOARD_ID,USER_NAME,SUBJECT,READ_COUNT,GOOD_COUNT,CMMT_COUNT,UPDATED';&#xD;
     &#xD;
     my $sql = "SELECT $fields FROM BOARD ";&#xD;
        $sql .= "WHERE BOARD_NAME = '$boardName' AND BOARD_ID &gt; $startID and BOARD_ID &lt; $endID order by BOARD_ID";&#xD;
             &#xD;
     my $resultList = Dbx::rangeQuery($sql,$skip,$PageSize);&#xD;
          &#xD;
     my $resultRef = {};&#xD;
        $resultRef-&gt;{fields} = $fields;&#xD;
        $resultRef-&gt;{list}   = $resultList;&#xD;
        $resultRef-&gt;{page}   = $pageNo;&#xD;
     &#xD;
     return $resultRef;&#xD;
}&#xD;
&#xD;
&#xD;
##########################################################&#xD;
### insert&#xD;
##########################################################&#xD;
sub insert&#xD;
{&#xD;
    my $cgi = shift;&#xD;
    &#xD;
    my $boardName = $cgi-&gt;param('board');&#xD;
    my $baseID    = $cgi-&gt;param('id');&#xD;
    &#xD;
    my %sql = ();&#xD;
       $sql{BOARD_NAME} = $boardName;&#xD;
       $sql{USER_ID}    = $cgi-&gt;param('userID');&#xD;
       $sql{USER_NAME}  = $cgi-&gt;param('userName');&#xD;
       $sql{SUBJECT}    = $cgi-&gt;param('subject');&#xD;
       $sql{CONTENT}    = $cgi-&gt;param('content');&#xD;
       $sql{ATTACHED}   = $cgi-&gt;param('attached');&#xD;
       $sql{OPTIONS}    = $cgi-&gt;param('options');&#xD;
   &#xD;
    &#xD;
    my $cache     =  Cache-&gt;new($boardName);&#xD;
    my $cachedRef = $cache-&gt;checkOut;&#xD;
    my $resultList;&#xD;
    &#xD;
    eval&#xD;
    {&#xD;
        my $list = $cachedRef-&gt;{list};&#xD;
        &#xD;
        if ( $list == undef )&#xD;
        {&#xD;
             $list = [];   &#xD;
             $cachedRef-&gt;{list} = $list;&#xD;
        }&#xD;
        &#xD;
        my $size = @$list;&#xD;
        &#xD;
        my @row;&#xD;
        &#xD;
        my $inputID;&#xD;
        &#xD;
        my $rest = 100000000;&#xD;
    &#xD;
        ##############################################################&#xD;
        if ( $baseID == 0 )&#xD;
        {&#xD;
             $inputID  = $cachedRef-&gt;{lastID};&#xD;
             &#xD;
             if ( $inputID == undef )&#xD;
             {&#xD;
                  $inputID = 999999;&#xD;
             }&#xD;
                             &#xD;
             $cachedRef-&gt;{lastID} = $inputID - 1;&#xD;
             &#xD;
             $inputID = $inputID * $rest;&#xD;
            &#xD;
             if ( $size == 0 )&#xD;
             {&#xD;
                  $row[0] = $inputID;&#xD;
                  $row[1] = 1;&#xD;
                  push(@$list,[@row]);&#xD;
             }&#xD;
             else&#xD;
             {&#xD;
                  my $rowref = $list-&gt;[0];&#xD;
                  &#xD;
                  if ( $rowref-&gt;[1] &lt; $PageSize )&#xD;
                  {&#xD;
                       $rowref-&gt;[1]++;&#xD;
                  }&#xD;
                  else&#xD;
                  {&#xD;
                      $row[0] = $inputID;&#xD;
                      $row[1] = 1;&#xD;
                      unshift(@$list,[@row]);&#xD;
                  } &#xD;
             }    &#xD;
        }&#xD;
        ##############################################################&#xD;
        else&#xD;
        {&#xD;
              my $offset = &amp;_getLevelOffset_insert($baseID);&#xD;
             &#xD;
              my $endID  = $baseID + $offset;&#xD;
              &#xD;
              my $maxIDSQL = "SELECT max(BOARD_ID) as maxID from BOARD where BOARD_NAME = '$boardName' "&#xD;
                           . "and BOARD_ID &gt;= $baseID and BOARD_ID &lt; $endID";&#xD;
              &#xD;
              &#xD;
              $inputID = Dbx::get($maxIDSQL);&#xD;
              &#xD;
    &#xD;
              $offset = $offset / 100;&#xD;
              &#xD;
              $inputID = $inputID / $offset;&#xD;
              $inputID++;&#xD;
              $inputID = $inputID * $offset;&#xD;
              &#xD;
              ###print "result2=$inputID\n"; &#xD;
              &#xD;
              &amp;_addList_insert ($list,$inputID);&#xD;
        }&#xD;
        &#xD;
        $sql{BOARD_ID}       = $inputID;&#xD;
        $sql{READ_COUNT}     = 0;&#xD;
        $sql{GOOD_COUNT}     = 0;&#xD;
        $sql{CMMT_COUNT}     = 0;&#xD;
       &#xD;
        Dbx::insert('BOARD',\%sql);&#xD;
       &#xD;
        ######$resultList = &amp;_getListByID_($inputID,$list,$self-&gt;{boardName});&#xD;
    };&#xD;
      &#xD;
    if ( $@ )&#xD;
    {&#xD;
        $cache-&gt;rollback;&#xD;
        die $@;&#xD;
    }&#xD;
    else&#xD;
    {  &#xD;
        $cache-&gt;commit;&#xD;
        return \%sql;&#xD;
    }    &#xD;
}&#xD;
&#xD;
sub _getLevelOffset_insert&#xD;
{&#xD;
     my $baseID = shift;&#xD;
     &#xD;
     my $offset = 100000000;&#xD;
     &#xD;
     if ( ($baseID % $offset) == 0 )  &#xD;
     {&#xD;
           return $offset;  &#xD;
     }   &#xD;
     &#xD;
     $offset = $offset/100;&#xD;
     &#xD;
     if ( ($baseID % $offset) == 0 )  &#xD;
     {&#xD;
           return $offset;    ## 1000000&#xD;
     }   &#xD;
     &#xD;
     $offset = $offset/100;&#xD;
     &#xD;
     if ( ($baseID % $offset) == 0 )  &#xD;
     {&#xD;
           return $offset;  ## 10000&#xD;
     }   &#xD;
     &#xD;
     $offset = $offset/100;&#xD;
     &#xD;
     if ( ($baseID % $offset) == 0 )  &#xD;
     {&#xD;
           return $offset;  ## 100&#xD;
     }   &#xD;
     &#xD;
     return 1;&#xD;
}&#xD;
&#xD;
sub _addList_insert&#xD;
{&#xD;
     my $list  = shift;&#xD;
     my $newID = shift;   &#xD;
     &#xD;
     my $size = @$list;&#xD;
     &#xD;
     if ( $size == 0 )&#xD;
     {&#xD;
          return;  &#xD;
     }&#xD;
     &#xD;
     for ( my $i = 0; $i &lt; $size; $i++ )&#xD;
     {&#xD;
          my $row = $list-&gt;[$i];  &#xD;
          &#xD;
          if ( $newID &lt; $row-&gt;[0] )&#xD;
          {&#xD;
               if ( $i == 0 )&#xD;
               {&#xD;
                    if ( $row-&gt;[1] &gt;= 10 )&#xD;
                    {&#xD;
                         my @newRow = ($newID,1);&#xD;
                         unshift(@$list,[@newRow]);                        &#xD;
                         return;&#xD;
                    }&#xD;
               }  &#xD;
               &#xD;
               $row-&gt;[1]++;&#xD;
               &#xD;
               ### split &#xD;
               ##if ( $row-&gt;[1] &gt; $pageSize*2 )&#xD;
               ###&#xD;
               return;&#xD;
          }&#xD;
     }&#xD;
     &#xD;
     my $lastRow = $list-&gt;[$size-1];&#xD;
        $lastRow-&gt;[0] = $newID;&#xD;
        $lastRow-&gt;[1]++;&#xD;
}&#xD;
&#xD;
&#xD;
&#xD;
##########################################################&#xD;
### detail&#xD;
##########################################################&#xD;
sub detail&#xD;
{&#xD;
    my $cgi = shift;&#xD;
    my $boardName = $cgi-&gt;param('board');&#xD;
    my $boardID   = $cgi-&gt;param('id');&#xD;
    &#xD;
    &amp;_detail_($boardName,$boardID);&#xD;
}&#xD;
    &#xD;
sub _detail_&#xD;
{&#xD;
    my ($boardName,$boardID) = @_;&#xD;
    &#xD;
    my $fields = 'BOARD_ID,USER_NAME,SUBJECT,READ_COUNT,GOOD_COUNT,CMMT_COUNT,UPDATED';&#xD;
     &#xD;
    my $sql = "SELECT $fields FROM BOARD ";&#xD;
       $sql .= "WHERE BOARD_NAME = '$boardName' AND BOARD_ID = $boardID";&#xD;
    &#xD;
    my $resultSet = Dbx::getRef($sql);&#xD;
    &#xD;
    my $sql  = "SELECT USER_NAME,UPDATED,COMMENT FROM COMMENTS ";&#xD;
       $sql .= "WHERE BOARD_NAME = '$boardName' AND BOARD_ID = $boardID order by SERIAL_NO";&#xD;
       &#xD;
       $resultSet-&gt;{commentList} = Dbx::query($sql);&#xD;
&#xD;
    return $resultSet;&#xD;
}&#xD;
&#xD;
&#xD;
##########################################################&#xD;
### comment&#xD;
##########################################################&#xD;
sub comment&#xD;
{&#xD;
    my $cgi = shift;&#xD;
    my $boardName = $cgi-&gt;param('board');&#xD;
    my $boardID   = $cgi-&gt;param('id');&#xD;
    &#xD;
    my $getSerialNoSQL = "SELECT max(SERIAL_NO) from COMMENTS where BOARD_NAME='$boardName' and BOARD_ID = $boardID";&#xD;
    &#xD;
    my $resultRef;&#xD;
    &#xD;
    Dbx::begin();&#xD;
         &#xD;
    eval&#xD;
    {&#xD;
       my $serialNo = Dbx::get($getSerialNoSQL)+1;&#xD;
       my %sql = ();&#xD;
          $sql{BOARD_NAME} = $boardName;&#xD;
          $sql{BOARD_ID}   = $boardID;&#xD;
          $sql{SERIAL_NO}  = $serialNo;&#xD;
          $sql{USER_ID}    = $cgi-&gt;param('userID');&#xD;
          $sql{USER_NAME}  = $cgi-&gt;param('userName');&#xD;
          $sql{COMMENT}    = $cgi-&gt;param('comment');&#xD;
          &#xD;
         Dbx::insert('COMMENTS',\%sql);&#xD;
         &#xD;
         Dbx::commit();&#xD;
&#xD;
         $resultRef = _detail_($boardName,$boardID);         &#xD;
    };  &#xD;
    &#xD;
    if ( $@ )&#xD;
    {&#xD;
        Dbx::rollback();&#xD;
        $resultRef = {};&#xD;
        $resultRef-&gt;{error}=$@;&#xD;
    }    &#xD;
    &#xD;
    return ($resultRef);            &#xD;
}&#xD;
&#xD;
1;&#xD;
__END__   &#xD;
&#xD;
board.cgi&#xD;
#!C:\app\Perls\perl\bin\perl.exe&#xD;
use strict 'vars';&#xD;
use strict 'subs';&#xD;
&#xD;
&#xD;
use BoardManager;&#xD;
use Log;&#xD;
use Data::Dumper;&#xD;
use Util;&#xD;
&#xD;
   print "Content-Type: text/html\n\n";&#xD;
   &#xD;
   my $cgi = CGI-&gt;new;&#xD;
   &#xD;
   Log::debug("action",$cgi-&gt;param('action'),"name",$cgi-&gt;param('board'),"page",$cgi-&gt;param('page'));&#xD;
      &#xD;
   my $resultRef = BoardManager::execute($cgi);   &#xD;
      $resultRef-&gt;{action} = $action;&#xD;
      &#xD;
   my $result = Util::encode($resultRef);&#xD;
   &#xD;
   print $result;&#xD;
   &#xD;
1;   &#xD;
__END__   &#xD;
&#xD;
user.cgi&#xD;
#!C:\app\Perls\perl\bin\perl.exe&#xD;
use strict 'vars';&#xD;
use strict 'subs';&#xD;
&#xD;
use Log;&#xD;
use CGI;&#xD;
use Data::Dumper;&#xD;
&#xD;
use Util;&#xD;
use User;&#xD;
use Session;&#xD;
&#xD;
&#xD;
print "Content-Type: text/html\n\n";&#xD;
my $input;&#xD;
&#xD;
   #$input = { action=&gt;'login', username=&gt;'test',password=&gt;'test' };&#xD;
   #$input = { action=&gt;'addMemo', &#xD;
   #           userID=&gt;'test2', userName=&gt;'test2.name', &#xD;
   #           recvID=&gt;'test',message=&gt;'my second message' , &#xD;
   #           oldName=&gt;'old2.name',oldMsg=&gt;'old2.msg'};&#xD;
   &#xD;
my $cgi; &#xD;
&#xD;
######### main #############################&#xD;
{&#xD;
   if ( $input == undef )&#xD;
   {&#xD;
        $cgi = CGI-&gt;new;&#xD;
   }&#xD;
   else&#xD;
   {&#xD;
        $cgi = CGI-&gt;new($input); &#xD;
   }     &#xD;
   &#xD;
   my $action = $cgi-&gt;param('action');&#xD;
   &#xD;
   my $result = &amp;${action}($cgi);              &#xD;
   &#xD;
   &#xD;
   print Util::encode($result);&#xD;
}&#xD;
   &#xD;
######### login #############################&#xD;
sub login&#xD;
{&#xD;
    my $cgi = shift;   &#xD;
    &#xD;
    Log::debug("action",$cgi-&gt;param('action'),"name",$cgi-&gt;param('username'),"password",$cgi-&gt;param('password'));&#xD;
   &#xD;
    my $username = $cgi-&gt;param('username');&#xD;
    my $password = $cgi-&gt;param('password');&#xD;
   &#xD;
    my $ref = User::login($username,$password);&#xD;
       $ref-&gt;{onlineUserList} = Session::userList($username);&#xD;
       $ref-&gt;{memoList}       = Session::getMemo($username);&#xD;
&#xD;
    ###print Dumper($ref);&#xD;
    &#xD;
    return $ref;&#xD;
    &#xD;
}   &#xD;
&#xD;
######### login #############################&#xD;
sub addMemo&#xD;
{&#xD;
    my $cgi = shift;   &#xD;
    &#xD;
    my $userID   = $cgi-&gt;param('userID');&#xD;
    my $userName = $cgi-&gt;param('userName');&#xD;
    &#xD;
    my $recvID   = $cgi-&gt;param('recvID');&#xD;
    my $message  = $cgi-&gt;param('message');&#xD;
    &#xD;
    my $oldName = $cgi-&gt;param('oldName');&#xD;
    my $oldMsg  = $cgi-&gt;param('oldMsg');&#xD;
    &#xD;
    &#xD;
    my @msg  = ($oldName,$oldMsg,$userName,$message);&#xD;
    my @memo = ($userID,$userName,Util::now,[@msg]);&#xD;
    &#xD;
    Session::addMemo($recvID,[@memo]);&#xD;
    &#xD;
    my $result = {};&#xD;
    &#xD;
    return $result;&#xD;
}    &#xD;
1;&#xD;
&#xD;
__END__   &#xD;
   &#xD;
&#xD;
cgiTest.cgi&#xD;
use CGI;&#xD;
use BoardManager;&#xD;
use Data::Dumper;&#xD;
use Cache;&#xD;
use Log;&#xD;
use Session;&#xD;
use Util;&#xD;
##use strict 'vars';&#xD;
&#xD;
#&amp;input1;&#xD;
#&amp;cacheDump;&#xD;
&#xD;
#&amp;select1;&#xD;
&#xD;
#&amp;memo1;&#xD;
#&amp;session1;&#xD;
#&amp;session2;&#xD;
&amp;memo3;&#xD;
&#xD;
sub login1()&#xD;
{&#xD;
    my $ref = Session::userList('test');&#xD;
    &#xD;
    print Dumper($ref);&#xD;
}&#xD;
&#xD;
sub session2()&#xD;
{&#xD;
    my $ref = Session::userList('test');&#xD;
    &#xD;
    print Dumper($ref);&#xD;
}&#xD;
&#xD;
sub session1()&#xD;
{&#xD;
    my $ref = Session::addUser('test');&#xD;
    &#xD;
    print Dumper($ref);&#xD;
}&#xD;
&#xD;
sub memo3()&#xD;
{&#xD;
    my $ref = Session::getMemo('test');&#xD;
    &#xD;
    print Dumper($ref);&#xD;
}&#xD;
&#xD;
sub memo1()&#xD;
{&#xD;
    my @msg  = ('msg.recv','msg.send');&#xD;
    my @memo = ('sender',Util::now,[@msg]);&#xD;
    &#xD;
    Session::addMemo('test',\@memo);&#xD;
}&#xD;
&#xD;
sub input1&#xD;
{&#xD;
my $input = { action=&gt;'insert' , &#xD;
              board=&gt;'general', &#xD;
              id=&gt;0,&#xD;
              userID=&gt;'test',&#xD;
              userName=&gt;'test',&#xD;
              subject=&gt;'this subject1',&#xD;
              content=&gt;'test content1' };&#xD;
    &#xD;
    execute($input);&#xD;
}&#xD;
&#xD;
sub select1&#xD;
{&#xD;
    my $input = { action=&gt;'select' , board=&gt;'general', page=&gt;5 };&#xD;
    &#xD;
    execute($input);&#xD;
}&#xD;
&#xD;
sub execute&#xD;
{&#xD;
    my $input = shift;&#xD;
    &#xD;
    my $cgi = CGI-&gt;new($input);&#xD;
    &#xD;
    my $resultRef = BoardManager::execute($cgi);&#xD;
    &#xD;
    ##print "\n\n------------dump.start------------\n";&#xD;
    ##print Dumper($resultRef);&#xD;
    ##print "\n------------dump.end------------\n";&#xD;
    &#xD;
}&#xD;
&#xD;
sub cacheDump&#xD;
{&#xD;
    my $cache = Cache-&gt;new('general');&#xD;
    &#xD;
    my $cachedRef = $cache-&gt;readOut;&#xD;
    &#xD;
    print "\n\n------------cache------------\n";&#xD;
    &#xD;
    ##print Dumper($cachedRef);&#xD;
    ##print "\n------------cache.end------------\n";&#xD;
    &#xD;
    my $list = $cachedRef-&gt;{list};&#xD;
    &#xD;
    my $size = @$list;&#xD;
    &#xD;
    foreach my $row (@$list)&#xD;
    {&#xD;
         my $id1 = substr($row-&gt;[0],0,6);;&#xD;
         my $id2 = substr($row-&gt;[0],6);;&#xD;
         print $id1,'-&gt;',$id2,'  #',$row-&gt;[1],"\n";&#xD;
    }   &#xD;
}&#xD;
&#xD;
sub testx&#xD;
{&#xD;
     my $size;&#xD;
     &#xD;
     if ( $size == 0 )&#xD;
     {&#xD;
         print "yes\n";&#xD;
     }&#xD;
     else&#xD;
     {&#xD;
         print "no\n";&#xD;
     }&#xD;
}&#xD;
&#xD;
&#xD;
&#xD;
1;&#xD;
&#xD;
test.cgi&#xD;
use Cache;&#xD;
use BoardManager;&#xD;
use Factory;&#xD;
use Util;&#xD;
&#xD;
#&amp;init;&#xD;
#&amp;test2;&#xD;
#&amp;insertTest;&#xD;
#&amp;test2;&#xD;
&#xD;
#&amp;test3;&#xD;
&#xD;
&amp;test5;&#xD;
&#xD;
&#xD;
&#xD;
sub test5&#xD;
{&#xD;
     my $today = Util::now;&#xD;
     print "[$today]\n";&#xD;
     &#xD;
     my $today1 = Util::nowDate;&#xD;
     print "[$today1]\n";&#xD;
     &#xD;
     my $rightnow = time();&#xD;
     print "[$rightnow]\n";&#xD;
     &#xD;
     @timeData = localtime(time);&#xD;
     print join(' ', @timeData),"\n"; &#xD;
     sleep(2);&#xD;
&#xD;
     @timeData = localtime(time);&#xD;
     print join(' ', @timeData),"\n"; &#xD;
     sleep(2);&#xD;
&#xD;
     @timeData = localtime(time);&#xD;
     print join(' ', @timeData),"\n"; &#xD;
&#xD;
}&#xD;
&#xD;
sub test4&#xD;
{&#xD;
    &#xD;
    $now_string = localtime; &#xD;
    &#xD;
    print "[$now_string]\n";&#xD;
    &#xD;
    @timeData = localtime(time);&#xD;
    print join(' ', @timeData),"\n"; &#xD;
    &#xD;
    ($sec,$min,$hour,$day,$mon,$year,$wday,$yday,$isdst) = localtime;&#xD;
    &#xD;
    $year += 1900;&#xD;
    $mon++;&#xD;
    &#xD;
    print "$hour:$min:$sec $year-$mon-$day week=$wday\n";&#xD;
    &#xD;
     my $today = sprintf("%d-%02d-%02d %02d:%02d:%02d",$year,$mon,$day, $hour,$min,$sec );&#xD;
     &#xD;
     print "today=[$today]\n";&#xD;
    &#xD;
}&#xD;
&#xD;
sub test3&#xD;
{&#xD;
    my $bm = BoardManager-&gt;new("general");&#xD;
       $bm-&gt;getPageList(1);&#xD;
       $bm-&gt;getPageList(2);&#xD;
}&#xD;
&#xD;
sub test2&#xD;
{&#xD;
    my $cache = Cache-&gt;new('general');&#xD;
    my $hashref = $cache-&gt;readOut();&#xD;
    &#xD;
    my $list = $hashref-&gt;{list};&#xD;
    &#xD;
    my $sum = 0;&#xD;
     &#xD;
    print "======\n";&#xD;
    foreach $row (@$list)&#xD;
    {&#xD;
         $sum += $row-&gt;[1];&#xD;
         print $row-&gt;[0],' = ',$row-&gt;[1],"   #$sum\n";   &#xD;
    }  &#xD;
    print "\nlastID=$hashref-&gt;{lastID}======\n";&#xD;
}&#xD;
&#xD;
sub insertTest&#xD;
{&#xD;
    my $userID = 100;&#xD;
    my $userName = 'test.for.line';&#xD;
    my $subject  = 'new.subject';&#xD;
    my $content  = 'myContent';&#xD;
    &#xD;
    my $bm = BoardManager-&gt;new("general");&#xD;
    &#xD;
    $bm-&gt;insert(99993400000000,$userID,$userName,$subject,$content);&#xD;
       &#xD;
}&#xD;
&#xD;
sub init&#xD;
{&#xD;
    Factory::cacheInit('general');&#xD;
}&#xD;
&#xD;
sub test1&#xD;
{&#xD;
    $hashref={ id=&gt;100,name=&gt;'asheen'};&#xD;
    &#xD;
    while( ($key,$val) = each(%$hashref) )&#xD;
    {&#xD;
        print $key, '&lt;==&gt;',$val,"\n";  &#xD;
    }&#xD;
    &#xD;
    $hash1 = {%$hashref};&#xD;
    &#xD;
    while( ($key,$val) = each(%$hash1) )&#xD;
    {&#xD;
        print $key, '&lt;==&gt;',$val,"\n";  &#xD;
    }&#xD;
}&#xD;
&#xD;
====================================&#xD;
package events&#xD;
{&#xD;
	import flash.events.Event;&#xD;
	&#xD;
	public class MenuClicked extends Event&#xD;
	{&#xD;
		public static const menuClicked:String = "menuClicked";&#xD;
		&#xD;
		public static const PAGE_LIST:String = "pageList";&#xD;
		public static const DETAIL_PAGE:String = "detailPage";&#xD;
		&#xD;
		private var menuID:String;&#xD;
		&#xD;
		public function MenuClicked(type:String, menuID:String, bubbles:Boolean=false, cancelable:Boolean=false)&#xD;
		{&#xD;
			   super(type, bubbles, cancelable);&#xD;
			   &#xD;
			   this.menuID = menuID;&#xD;
		}&#xD;
		&#xD;
		public function getMenuID():String&#xD;
		{&#xD;
			   return this.menuID;&#xD;
		}&#xD;
	}&#xD;
}&#xD;
&#xD;
&#xD;
package events&#xD;
{&#xD;
	import flash.events.Event;&#xD;
	&#xD;
	public class MyMessage extends Event&#xD;
	{&#xD;
		public static const subjectClicked:String = "subjectClicked";&#xD;
		&#xD;
		private var msg:Object;&#xD;
		&#xD;
		public function MyMessage(type:String, root:Object, bubbles:Boolean=false, cancelable:Boolean=false)&#xD;
		{&#xD;
			super(type, bubbles, cancelable);&#xD;
			&#xD;
			this.msg = root;&#xD;
		}&#xD;
		&#xD;
		public function getMessage():Object&#xD;
		{&#xD;
			return this.msg;&#xD;
		}&#xD;
	}&#xD;
}&#xD;
&#xD;
MemoWindow.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:TitleWindow &#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	layout="vertical" &#xD;
	width="800"&#xD;
    height="100%"&#xD;
	title="Memo"&#xD;
	horizontalAlign="center" &#xD;
	showCloseButton="true" &#xD;
	close="closeWindow(event);" &gt;  &#xD;
	&#xD;
	&lt;mx:Style&gt;&#xD;
		.bold2 {&#xD;
			fontWeight: bold;&#xD;
		}&#xD;
		&#xD;
		.bold3 {&#xD;
			fontWeight: normal;&#xD;
		}&#xD;
	&lt;/mx:Style&gt;	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import com.adobe.serialization.json.JSON;&#xD;
			&#xD;
			import events.MyMessage;&#xD;
			&#xD;
			import mx.controls.Alert;&#xD;
			import mx.core.IFlexDisplayObject;&#xD;
			import mx.events.CloseEvent;&#xD;
			import mx.managers.PopUpManager;&#xD;
			import mx.rpc.events.ResultEvent;&#xD;
			&#xD;
			//[Style(name="fillColors",type="Array",format="Color",inherit="no")]&#xD;
			&#xD;
			[Bindable]&#xD;
			public var memoList:Array = new Array();&#xD;
			&#xD;
			[Bindable]&#xD;
			public var myTitle:String;&#xD;
			&#xD;
			private var senderID:String;&#xD;
			private var senderName:String;&#xD;
			&#xD;
			public function setMemo(memo:Array):void &#xD;
			{&#xD;
			     this.senderID   = memo[0];	&#xD;
				 this.senderName = memo[1];&#xD;
				 var stamp:String = memo[2];&#xD;
				 &#xD;
				 myTitle = senderName + ' (' + stamp + ')'; &#xD;
				 &#xD;
				 memoList.length = 0;&#xD;
				 &#xD;
				 var list:Array = memo[3];&#xD;
				 var len:int = list.length;&#xD;
				 var x:int = 0;&#xD;
				 &#xD;
				 &#xD;
				 while ( x &lt; len )&#xD;
				 {&#xD;
					  var name:String = list[x++]; &#xD;
					  var msg:String  = list[x++];&#xD;
					  &#xD;
					  var item:Object = new Object();&#xD;
					  &#xD;
					  item.name = name;&#xD;
					  item.msg  = msg;&#xD;
					  &#xD;
					  memoList.push(item);&#xD;
				 }&#xD;
			}&#xD;
			&#xD;
			private function closeWindow(e:CloseEvent):void &#xD;
			{  			&#xD;
				//PopUpManager.removePopUp(e.target as IFlexDisplayObject);&#xD;
				PopUpManager.removePopUp(this);&#xD;
			}  &#xD;
			&#xD;
			private function reset_click():void &#xD;
			{&#xD;
				&#xD;
			}&#xD;
			protected function resultHandler(event:ResultEvent):void&#xD;
			{&#xD;
				var root:Object = JSON.decode(event.result as String);&#xD;
				&#xD;
				&#xD;
			}&#xD;
			&#xD;
			private function submit_click(event:MouseEvent):void &#xD;
			{&#xD;
				var msg:String = event.currentTarget.parent.getChildByName('sending').text;&#xD;
				//var uid:String = event.currentTarget.parent.getChildByName('currentID').text;				&#xD;
				//Alert.show(msg+ "/" + uid);&#xD;
				&#xD;
				var param:Object = new Object();&#xD;
				//param.username = username.text;&#xD;
				//param.password = password.text;&#xD;
				&#xD;
				///loginService.send(param);&#xD;
			}&#xD;
			&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
&#xD;
		&lt;mx:Panel width="100%" id="myPanel" &#xD;
				 borderStyle="solid" &#xD;
				 borderColor="0x888888"&#xD;
				 backgroundColor="0xFFF8C6"&gt;&#xD;
			&#xD;
			&lt;!--&#xD;
			&lt;mx:Label text="{memo1.currentIndex+1}"/&gt;&#xD;
			--&gt;&#xD;
			&lt;mx:Repeater id="item" dataProvider="{memoList}"&gt;&#xD;
				&lt;mx:HBox width="100%"&gt;&#xD;
					&lt;mx:Label id="sender"  text="{item.currentItem.name}"  width="100" &#xD;
							  fontWeight="bold"&#xD;
							  fontSize="10"/&gt;&#xD;
					&lt;mx:Text  id="msg"     htmlText="{item.currentItem.msg}" /&gt;&#xD;
				&lt;/mx:HBox&gt;&#xD;
			&lt;/mx:Repeater&gt;&#xD;
			&#xD;
			&lt;mx:HBox width="100%" id="testx"&gt;&#xD;
				&lt;mx:Spacer width="5"/&gt;&#xD;
				&lt;mx:TextArea id="sending" height="60" width="90%"/&gt;&#xD;
				&lt;mx:Button label="send" width="10%" height="44" click="submit_click(event)"/&gt;&#xD;
				&lt;mx:Spacer width="4"/&gt;&#xD;
			&lt;/mx:HBox&gt;&#xD;
			&#xD;
		&lt;/mx:Panel&gt;&#xD;
&#xD;
	&lt;mx:HTTPService id="userService" &#xD;
					url="http://localhost/cgi-bin/user.cgi"&#xD;
					method="POST"&#xD;
					result="resultHandler(event)" /&gt;&#xD;
&#xD;
	&#xD;
	&lt;!--&#xD;
	&lt;mx:ControlBar horizontalAlign="right"&gt;&#xD;
	&lt;mx:Button id="submit"&#xD;
	label="Submit"&#xD;
	click="submit_click();" /&gt;&#xD;
	&lt;mx:Button id="reset"&#xD;
	label="Reset"&#xD;
	click="reset_click();" /&gt;&#xD;
	&lt;/mx:ControlBar&gt;&#xD;
	--&gt;&#xD;
	&#xD;
	&#xD;
	&#xD;
&lt;/mx:TitleWindow&gt;&#xD;
&#xD;
MyWindow.mxml&#xD;
&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:TitleWindow &#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	layout="vertical" &#xD;
	width="320" height="200" &#xD;
	title="Login" &#xD;
	horizontalAlign="center" &#xD;
	showCloseButton="false" &#xD;
	creationComplete="onCreated()"&#xD;
	close="closeWindow(event);" &gt;  &#xD;
	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import com.adobe.serialization.json.JSON;&#xD;
			&#xD;
			import events.MyMessage;&#xD;
			&#xD;
			import mx.controls.Alert;&#xD;
			import mx.core.IFlexDisplayObject;&#xD;
			import mx.events.CloseEvent;&#xD;
			import mx.managers.PopUpManager;&#xD;
			import mx.rpc.events.ResultEvent;&#xD;
			&#xD;
			private function onCreated():void &#xD;
			{&#xD;
				    username.text = "test";&#xD;
					password.text = "test";&#xD;
			}&#xD;
			&#xD;
			private function closeWindow(e:CloseEvent):void &#xD;
			{  			&#xD;
				    //PopUpManager.removePopUp(e.target as IFlexDisplayObject);&#xD;
				    //dispatchEvent( new Event("close") );&#xD;
			}  &#xD;
			&#xD;
			private function submit_click():void &#xD;
			{&#xD;
				    var param:Object   = new Object();&#xD;
					    param.action   = "login";&#xD;
						param.username = username.text;&#xD;
						param.password = password.text;&#xD;
						&#xD;
				        loginService.send(param);&#xD;
						&#xD;
						//dispatchEvent( new MyMessage("success",param) );&#xD;
						//PopUpManager.removePopUp(this);&#xD;
			}&#xD;
			&#xD;
			private function reset_click():void &#xD;
			{&#xD;
				&#xD;
			}&#xD;
			protected function resultHandler(event:ResultEvent):void&#xD;
			{&#xD;
				      var value:String = event.result as String;&#xD;
					  trace("-----------start------");&#xD;
					  trace(value);&#xD;
					  trace("-----------end------");&#xD;
				      var result:Object = JSON.decode(event.result as String);&#xD;
					  &#xD;
					  &#xD;
					  if ( result.error != null )&#xD;
					  {&#xD;
                           Alert.show("error = " + result.error );&#xD;
						   return;&#xD;
					  }&#xD;
					  &#xD;
					  //Alert.show("name = " + result.USER_NAME + "/" + result.USER_TYPE);&#xD;
					  &#xD;
					  //Alert.show("memoList = " + memoList );&#xD;
						  &#xD;
						  &#xD;
					  dispatchEvent( new MyMessage("success",result) );&#xD;
					  PopUpManager.removePopUp(this);&#xD;
			}&#xD;
			&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
	&#xD;
	&lt;mx:Form&gt;&#xD;
		&lt;mx:FormHeading label="Sign in"/&gt;&#xD;
		&#xD;
		&lt;mx:FormItem label="Username :" width="220" required="true"&gt;		&#xD;
			&lt;mx:TextInput id="username" width="100%"/&gt;&#xD;
		&lt;/mx:FormItem&gt;&#xD;
		&#xD;
		&lt;mx:FormItem label="Password :" width="220" required="true"&gt;&#xD;
			&lt;mx:TextInput id="password" width="100%" displayAsPassword="true"/&gt;&#xD;
		&lt;/mx:FormItem&gt;&#xD;
&#xD;
		&lt;mx:FormItem&gt;&#xD;
			&lt;mx:Spacer/&gt;&#xD;
			&lt;mx:HBox&gt;&#xD;
			&lt;mx:Button id="submit"&#xD;
					   label="Submit"&#xD;
					   click="submit_click();" /&gt;&#xD;
			&lt;mx:Button id="reset"&#xD;
					   label="Reset"&#xD;
					   click="reset_click();" /&gt;&#xD;
			&lt;/mx:HBox&gt;&#xD;
		&lt;/mx:FormItem&gt;&#xD;
		&#xD;
	&lt;/mx:Form&gt;&#xD;
&#xD;
	&lt;mx:HTTPService id="loginService" &#xD;
					url="http://localhost/cgi-bin/user.cgi"&#xD;
					method="POST"&#xD;
					result="resultHandler(event)" /&gt;&#xD;
	&#xD;
	&lt;!--&#xD;
	&lt;mx:ControlBar horizontalAlign="right"&gt;&#xD;
		&lt;mx:Button id="submit"&#xD;
				   label="Submit"&#xD;
				   click="submit_click();" /&gt;&#xD;
		&lt;mx:Button id="reset"&#xD;
				   label="Reset"&#xD;
				   click="reset_click();" /&gt;&#xD;
	&lt;/mx:ControlBar&gt;&#xD;
	--&gt;&#xD;
	&#xD;
	&#xD;
	&#xD;
&lt;/mx:TitleWindow&gt;&#xD;
&#xD;
&#xD;
MyServcie.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;!-- 	horizontalAlign="center"  --&gt;&#xD;
 &#xD;
&lt;mx:HBox &#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	width="100%" &gt;&#xD;
&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import com.adobe.serialization.json.JSON;&#xD;
			&#xD;
			import events.MyMessage;&#xD;
			&#xD;
			import mx.collections.ArrayCollection;&#xD;
			import mx.controls.Alert;&#xD;
			import mx.rpc.events.ResultEvent;&#xD;
			&#xD;
			&#xD;
			public var boardName:String;&#xD;
			public var sessionID:String;&#xD;
			&#xD;
			private var callback:Function;&#xD;
			&#xD;
			&#xD;
			////////////////////////////////////////////////////////////////////&#xD;
			public function request(param:Object, callback:Function):void &#xD;
			{&#xD;
				      if ( this.loading.visible == true )&#xD;
					  {&#xD;
						   Alert.show("The previous request is still processing!");&#xD;
						   return;&#xD;
					  }&#xD;
					  &#xD;
				      this.loading.visible = true;&#xD;
				      param.board   = this.boardName;&#xD;
					  ///param.session = this.sessionID;&#xD;
&#xD;
					  this.callback = callback;&#xD;
					  httpService.send(param);&#xD;
			}&#xD;
			&#xD;
			////////////////////////////////////////////////////////////////////&#xD;
			protected function resultHandler(event:ResultEvent):void&#xD;
			{&#xD;
				      var root:Object = JSON.decode(event.result as String);&#xD;
					  					  &#xD;
					  this.callback(root);&#xD;
					  &#xD;
					  this.loading.visible = false;&#xD;
			}&#xD;
			&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
	&lt;mx:Label id="loading" text="..Loading.." visible="false"/&gt;&#xD;
&#xD;
	&lt;mx:HTTPService id="httpService" &#xD;
					url="http://localhost/cgi-bin/board.cgi"&#xD;
					method="POST"&#xD;
					result="resultHandler(event)" /&gt;&#xD;
	&#xD;
&lt;/mx:HBox&gt;&#xD;
&#xD;
&#xD;
DetailPage.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:VBox &#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	width="100%" &#xD;
	height="100%"&#xD;
	&gt;&#xD;
	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import com.adobe.serialization.json.JSON;&#xD;
			&#xD;
			import events.MyMessage;&#xD;
			&#xD;
			import mx.collections.ArrayCollection;&#xD;
			import mx.controls.Alert;&#xD;
			import mx.rpc.events.ResultEvent;&#xD;
			&#xD;
			[Bindable]&#xD;
			public var commentList:ArrayCollection = new ArrayCollection();&#xD;
			&#xD;
			public function showDetail(result:Object):void &#xD;
			{&#xD;
				   subject.htmlText = result.subject;	&#xD;
				   content.htmlText = result.content;&#xD;
				   &#xD;
				   &#xD;
				   commentList.removeAll();&#xD;
				   &#xD;
				   var newList:ArrayCollection = new ArrayCollection();&#xD;
				   &#xD;
				   for each ( var subList:Array in result.list )&#xD;
				   {&#xD;
					   var item:Object = new Object();&#xD;
					       item.name = subList[0] + '(' + subList[1] + ')';&#xD;
					       item.comment = subList[2] + "\n test for line!";&#xD;
					   &#xD;
					   newList.addItem(item);&#xD;
				   }&#xD;
				   &#xD;
				   comment.dataProvider = newList;&#xD;
				   &#xD;
				   &#xD;
				   ///Alert.show("size=" + commentList.length );&#xD;
				   &#xD;
				   &#xD;
				   ///commentList = new ArrayCollection(result.list);&#xD;
			}&#xD;
			&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
&#xD;
	&lt;!--&#xD;
	&lt;mx:Label height="20%" text="detail1 another"/&gt;&#xD;
	&lt;mx:Label height="20%" text="detail2"/&gt;&#xD;
	&lt;mx:Label height="60%" text="detail3"/&gt;&#xD;
	--&gt;&#xD;
	&#xD;
	&lt;mx:Text id="subject" width="100%" /&gt;&#xD;
	&lt;mx:Text id="content" width="100%" /&gt;&#xD;
	&#xD;
	&lt;!--&#xD;
	&lt;mx:Text id="content" width="100%" height="100%" color="blue" fontStyle="italic" fontSize="14"/&gt;&#xD;
	--&gt;&#xD;
	&lt;mx:Repeater id="comment" &gt;&#xD;
		&lt;!--mx:VBox width="100%" height="120" &#xD;
				 borderStyle="solid" &#xD;
				 borderColor="0x888888"&#xD;
				 backgroundColor="0xFFF8C6"  --&gt;&#xD;
		&lt;mx:VBox width="100%"&gt;&#xD;
			&lt;mx:HBox width="100%"&gt;&#xD;
				&lt;mx:Text width="20%" height="100%" text="{comment.currentItem.name}"   opaqueBackground="0xFFF8C6"/&gt;&#xD;
				&lt;mx:Text width="80%" height="100%" text="{comment.currentItem.comment}" opaqueBackground="0xFFF8C6"/&gt;&#xD;
			&lt;/mx:HBox&gt;&#xD;
		&lt;/mx:VBox&gt;&#xD;
	&lt;/mx:Repeater&gt;&#xD;
	&#xD;
	&lt;mx:HBox&gt;&#xD;
		&lt;mx:TextArea width="100%" height="64" id="myComment"/&gt;&#xD;
		&lt;mx:Button label="Submit" click="dispatchEvent(new MyMessage('addComment',myComment.text,true))"/&gt;&#xD;
	&lt;/mx:HBox&gt;&#xD;
	&#xD;
&lt;/mx:VBox&gt;&#xD;
&#xD;
&#xD;
HomePage.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:VBox &#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	width="100%" &#xD;
	height="100%"&gt;&#xD;
	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import mx.controls.Alert;						&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
	&#xD;
	&lt;!--&#xD;
	&lt;mx:Label height="20%" text="detail1 another"/&gt;&#xD;
	&lt;mx:Label height="20%" text="detail2"/&gt;&#xD;
	&lt;mx:Label height="60%" text="detail3"/&gt;&#xD;
	--&gt;&#xD;
	&#xD;
	&lt;mx:Text width="100%" height="100%" color="blue" fontStyle="italic" fontSize="14"&gt;&#xD;
		&lt;mx:htmlText&gt;&#xD;
			 CDATA[&#xD;
			This&lt;b&gt;&lt;font color="#000000" size="10"&gt;This Home Page.&lt;/font&gt;&lt;/b&gt;&#xD;
			 &#xD;
		&lt;/mx:htmlText&gt;&#xD;
	&lt;/mx:Text&gt;			 &#xD;
	&#xD;
&lt;/mx:VBox&gt;&#xD;
&#xD;
&#xD;
InsertPage.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:VBox &#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	&gt;&#xD;
	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import mx.controls.Alert;&#xD;
			import events.MyMessage;&#xD;
			&#xD;
			//public var boardName:String;&#xD;
			//public var userName:String;&#xD;
			//public var userID:String;&#xD;
			public var model:Object = new Object();&#xD;
			&#xD;
			public function clear():void &#xD;
			{&#xD;
				subject.text = null;&#xD;
				content.text = null;&#xD;
				model.id      = 0;  // add a new one.&#xD;
			}&#xD;
			&#xD;
			private function process():void &#xD;
			{&#xD;
				model.subject = subject.text;&#xD;
				model.content = content.text;&#xD;
				&#xD;
				model.userID = 1234;&#xD;
				model.userName = "My User";&#xD;
				&#xD;
				&#xD;
				dispatchEvent( new MyMessage("insertSubmit",model,true) );&#xD;
			}&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
	&#xD;
	&lt;mx:Form&gt;&#xD;
		&lt;mx:FormHeading label="My Information"/&gt;&#xD;
		&#xD;
		&lt;mx:FormItem label="Subject" width="800"&gt;			&#xD;
			&lt;mx:TextInput id="subject" width="100%"/&gt;&#xD;
		&lt;/mx:FormItem&gt;&#xD;
			&#xD;
		&lt;mx:FormItem label="Content" width="800" height="400"&gt;&#xD;
			&lt;mx:TextArea id="content" width="100%" height="100%"/&gt;&#xD;
		&lt;/mx:FormItem&gt;&#xD;
		&#xD;
		&lt;mx:FormItem&gt;&#xD;
			&lt;mx:Button label="Submit" &#xD;
					   click="process();"/&gt;&#xD;
		&lt;/mx:FormItem&gt;&#xD;
	&lt;/mx:Form&gt;&#xD;
&#xD;
&lt;/mx:VBox&gt;&#xD;
&#xD;
&#xD;
ListGrid.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:DataGrid&#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	width="100%"&gt;&#xD;
	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import mx.controls.Alert;						&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
	&#xD;
		 &#xD;
		&lt;mx:columns&gt;&#xD;
			&lt;mx:DataGridColumn dataField="BOARD_ID" /&gt;&#xD;
			&lt;mx:DataGridColumn dataField="user_name" /&gt;&#xD;
			&lt;mx:DataGridColumn dataField="subject"  itemRenderer="view.MySubject"/&gt;&#xD;
			&lt;mx:DataGridColumn dataField="UPDATED" /&gt;&#xD;
		&lt;/mx:columns&gt;&#xD;
		&#xD;
	&#xD;
&lt;/mx:DataGrid&gt;&#xD;
	&#xD;
	&#xD;
MainBody.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;!-- 	opaqueBackground="0xFF0000" --&gt;&#xD;
 &#xD;
&lt;mx:ViewStack &#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	creationPolicy="all"&#xD;
	xmlns:view="view.*"&gt;&#xD;
	&#xD;
	&lt;mx:Metadata&gt;&#xD;
		[Event(name="subjectClicked",  type="events.MyMessage")]&#xD;
		[Event(name="navigate"      ,  type="events.MyMessage")]&#xD;
		[Event(name="insertSubmit"  ,  type="events.MyMessage")]&#xD;
		[Event(name="addComment"    ,  type="events.MyMessage")]&#xD;
	&lt;/mx:Metadata&gt;&#xD;
	&#xD;
	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import events.MyMessage;&#xD;
			&#xD;
			import mx.controls.Alert;&#xD;
			&#xD;
			public var boardName:String;&#xD;
					&#xD;
			public function addNewClicked():void &#xD;
			{&#xD;
				   insertPage.clear();&#xD;
				   selectedChild = insertPage;&#xD;
			}&#xD;
			&#xD;
			public function showList(result:Object):void &#xD;
			{&#xD;
				   pageList.showList(result);&#xD;
				   selectedChild = pageList;&#xD;
			}&#xD;
			&#xD;
			public function showDetail(result:Object):void &#xD;
			{&#xD;
				   detailPage.showDetail(result);&#xD;
				   selectedChild = detailPage;&#xD;
			}&#xD;
			&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
	&#xD;
	&lt;view:DetailPage id="homePage" /&gt;&#xD;
	&lt;view:InsertPage id="insertPage"  /&gt;&#xD;
	&lt;view:PageList   id="pageList"    /&gt;&#xD;
	&lt;view:DetailPage id="detailPage" /&gt;&#xD;
	&#xD;
&lt;/mx:ViewStack&gt;&#xD;
&#xD;
&#xD;
MainHeader.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:HBox&#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	creationComplete="onCreated()"&#xD;
	&gt;&#xD;
	&#xD;
	&lt;mx:Metadata&gt;&#xD;
		[Event(name="addNewClicked", type="flash.events.Event")]&#xD;
		[Event(name="backClicked"  , type="flash.events.Event")]&#xD;
	&lt;/mx:Metadata&gt;&#xD;
	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import mx.controls.Alert;&#xD;
			&#xD;
			private function onCreated():void &#xD;
			{&#xD;
				//btnWrite.setStyle("borderColor", "#FF0000");&#xD;
				//btnWrite.setStyle("themeColor", "#000000");&#xD;
				&#xD;
				this.setStyle("verticalAlign", "bottom");&#xD;
&#xD;
			}&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
	&#xD;
	&lt;mx:Spacer width="1"/&gt;&#xD;
&#xD;
	&lt;mx:Button id="btnBack" &#xD;
			   icon="@Embed(source='assets/back.gif')"&#xD;
			   click="dispatchEvent(new Event('backClicked'))"&#xD;
			   /&gt;	&#xD;
&#xD;
	&lt;mx:Button id="btnWrite" &#xD;
		icon="@Embed(source='assets/write.gif')"&#xD;
		click="dispatchEvent(new Event('addNewClicked'))"&#xD;
		/&gt;	&#xD;
	&#xD;
	&lt;mx:Button &#xD;
		icon="@Embed(source='assets/reload.gif')"&#xD;
		/&gt;	&#xD;
&#xD;
&lt;/mx:HBox&gt;&#xD;
&#xD;
&#xD;
MainPanel.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:HBox&#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	xmlns:view="view.*"&#xD;
	xmlns:service="service.*"&#xD;
	width="100%" &#xD;
	height="100%"&#xD;
	creationComplete="onCreated()"&#xD;
	&gt;&#xD;
	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import events.MenuClicked;&#xD;
			import events.MyMessage;&#xD;
			&#xD;
			import memo.MemoWindow;&#xD;
			import memo.MyWindow;&#xD;
			&#xD;
			import mx.controls.Alert;&#xD;
			import mx.managers.PopUpManager;&#xD;
			&#xD;
			private var prevPage:int = 1;&#xD;
			private var loginTime:Date;&#xD;
			&#xD;
			private var currentPageID:int;&#xD;
			&#xD;
			private function onCreated():void &#xD;
			{&#xD;
				    if ( loginTime == null )&#xD;
					{&#xD;
						 logingPopup();&#xD;
					}&#xD;
			}&#xD;
			&#xD;
			private function logingPopup():void &#xD;
			{&#xD;
				var popup : MyWindow = new MyWindow();&#xD;
				popup.addEventListener("success",  loginSuccess );&#xD;
				PopUpManager.addPopUp(popup,this,true);  					&#xD;
				PopUpManager.centerPopUp(popup);  &#xD;
			}&#xD;
			&#xD;
			private function loginSuccess(event:MyMessage):void &#xD;
			{&#xD;
				loginTime = new Date();&#xD;
				&#xD;
				var memoList:Array = event.getMessage().memoList;&#xD;
				&#xD;
				for each ( var itemList:Array in memoList )&#xD;
				{&#xD;
&#xD;
					var size:int = itemList.length*128+40;&#xD;
					&#xD;
					var popup : MemoWindow = new MemoWindow();&#xD;
					    popup.setMemo(itemList);&#xD;
					    //popup.height = size;&#xD;
					&#xD;
					PopUpManager.addPopUp(popup,this,true);  					&#xD;
					PopUpManager.centerPopUp(popup);  &#xD;
					break;&#xD;
				}&#xD;
				&#xD;
				&#xD;
				///Alert.show("success = " + event.getMessage().username );&#xD;
			}&#xD;
&#xD;
			private function menuClicked(event:MenuClicked):void &#xD;
			{&#xD;
				//mainBody.selectedIndex &#xD;
				//	= mainBody.getChildIndex(mainBody.getChildByName(event.getMenuID()));&#xD;
				//mainBody.initList(event.getMenuID());&#xD;
				myService.boardName = event.getMenuID();&#xD;
				&#xD;
				var param:Object = new Object();&#xD;
				    param.action = "select";&#xD;
				    param.page   = 1;&#xD;
					&#xD;
				myService.request(param,$pageList);	&#xD;
				&#xD;
				this.prevPage = param.page;	&#xD;
				&#xD;
			}&#xD;
			&#xD;
			public function $pageList(result:Object):void &#xD;
			{&#xD;
				   mainBody.showList(result);&#xD;
			}&#xD;
			&#xD;
			private function subjectClicked(event:MyMessage):void &#xD;
			{&#xD;
				var param:Object = new Object();&#xD;
					param.action = "detail";&#xD;
					param.id     = event.getMessage();&#xD;
				&#xD;
				myService.request(param,$detailPage);	&#xD;
			}&#xD;
			&#xD;
			private function $detailPage(result:Object):void &#xD;
			{&#xD;
				    mainBody.showDetail(result);&#xD;
					this.currentPageID = result.id;&#xD;
			}&#xD;
			&#xD;
			private function navigate(event:MyMessage):void &#xD;
			{&#xD;
				var param:Object = new Object();&#xD;
				    param.action = "select";&#xD;
				    param.page   = event.getMessage();&#xD;
				&#xD;
				    myService.request(param,$pageList);&#xD;
					&#xD;
					this.prevPage = param.page;					&#xD;
			}&#xD;
			&#xD;
			private function insertSubmit(event:MyMessage):void &#xD;
			{&#xD;
				var param:Object = event.getMessage();&#xD;
				    param.action = "insert";&#xD;
				&#xD;
				    myService.request(param,$detailPage);	&#xD;
			}&#xD;
			&#xD;
			private function backClicked():void &#xD;
			{&#xD;
				var param:Object = new Object();&#xD;
				    param.action = "select";&#xD;
				    param.page   = this.prevPage;&#xD;
				&#xD;
				    myService.request(param,$pageList);&#xD;
					&#xD;
					if ( this.prevPage &gt; 1 )&#xD;
					{&#xD;
						  this.prevPage--;&#xD;
					}&#xD;
			}&#xD;
			&#xD;
			private function openMemo():void &#xD;
			{&#xD;
				var item:Object = new Object();&#xD;
				    item.name = 'Andrew';&#xD;
					item.msg  = 'good';&#xD;
					&#xD;
				var item2:Object = new Object();&#xD;
	 			    item2.name = 'Andrew2';&#xD;
				    item2.msg  = 'good2';&#xD;
&#xD;
				var subList:Array = new Array();&#xD;
					subList.push(item);&#xD;
					subList.push(item2);&#xD;
				&#xD;
			    var subItem:Object = new Object();&#xD;
				    subItem.userID = 'test';&#xD;
					subItem.list   = subList;&#xD;
				&#xD;
				var memoList:Array = new Array();&#xD;
				&#xD;
				memoList.push(subItem);&#xD;
				memoList.push(subItem);&#xD;
				&#xD;
				var size:int = memoList.length*128+40;&#xD;
				&#xD;
				&#xD;
				var popup : MemoWindow = new MemoWindow();&#xD;
				    popup.memoList = memoList;&#xD;
					popup.height = size;&#xD;
					&#xD;
				PopUpManager.addPopUp(popup,this,true);  					&#xD;
				PopUpManager.centerPopUp(popup);  &#xD;
			}&#xD;
			&#xD;
			private function addComment(event:MyMessage):void &#xD;
			{&#xD;
				var param:Object  = new Object();&#xD;
				    param.action  = "comment";&#xD;
					param.id      = this.currentPageID;&#xD;
					param.comment = event.getMessage();&#xD;
					&#xD;
				//myService.request(param,$detailPage);	&#xD;
			}&#xD;
			&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
	&#xD;
	&lt;mx:VBox width="20%" height="100%"&gt;&#xD;
		&#xD;
		&lt;mx:VBox height="20%"&gt;&#xD;
		   &lt;mx:Label text="home"/&gt;	&#xD;
		&lt;/mx:VBox&gt;&#xD;
		&#xD;
		&lt;view:SideMenu menuClicked="menuClicked(event)" height="80%"/&gt;&#xD;
		&#xD;
		&lt;mx:Button label="popup" click="openMemo()"/&gt;&#xD;
		&#xD;
		&#xD;
	&lt;/mx:VBox&gt;&#xD;
	&#xD;
	&lt;mx:VBox width="80%" height="100%"&gt;&#xD;
		&#xD;
		&lt;view:MainHeader    width="100%" height="15%" &#xD;
							addNewClicked="mainBody.addNewClicked()"&#xD;
							backClicked="backClicked()"/&gt;&#xD;
		&lt;service:MyService  width="100%" height="5%"  id="myService"/&gt;&#xD;
		&#xD;
		&lt;view:MainBody      width="100%" height="80%" &#xD;
							id="mainBody"&#xD;
							navigate="navigate(event)"&#xD;
							insertSubmit="insertSubmit(event)"&#xD;
							addComment="addComment(event)"&#xD;
							subjectClicked="subjectClicked(event)"/&gt;&#xD;
		&#xD;
	&lt;/mx:VBox&gt;&#xD;
&#xD;
&lt;/mx:HBox&gt;&#xD;
&#xD;
&#xD;
MySubject.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:LinkButton &#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	click="subjectClicked()"&#xD;
	width="100%" height="100%"&gt;&#xD;
&#xD;
	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import mx.controls.Alert;&#xD;
			&#xD;
			private var detailID:String;&#xD;
			&#xD;
			override public function set data(value:Object):void &#xD;
			{&#xD;
				     super.data = value;&#xD;
					 this.label = value.subject;&#xD;
					 &#xD;
					 this.detailID = value.id;&#xD;
			}&#xD;
			&#xD;
			protected function subjectClicked():void &#xD;
			{&#xD;
				Alert.show("id=" + detailID );&#xD;
			}&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
	&#xD;
&lt;/mx:LinkButton&gt;&#xD;
&#xD;
&#xD;
PageList.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:VBox &#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	xmlns:view="view.*"&#xD;
	width="100%" &#xD;
	height="100%"&#xD;
	creationComplete="onCreated()"&gt;&#xD;
&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import events.MyMessage;			&#xD;
			import mx.collections.ArrayCollection;&#xD;
			import mx.controls.Alert;&#xD;
			&#xD;
			private function onCreated():void &#xD;
			{&#xD;
				pageNoBox.setStyle("textAlign","center");&#xD;
			}&#xD;
			&#xD;
			[Bindable]&#xD;
			public var pageNoList:ArrayCollection = new ArrayCollection();&#xD;
			&#xD;
			[Bindable]&#xD;
			public var page:int;&#xD;
			&#xD;
			&#xD;
			public function showList(result:Object):void &#xD;
			{&#xD;
				this.page = result.page;&#xD;
				&#xD;
				pageNoBox.selectedItem = this.page;&#xD;
				&#xD;
				var fieldStr:String = result.fields;&#xD;
				&#xD;
				var fields:Array = fieldStr.split(/,/);&#xD;
				var size:int     = fields.length;&#xD;
				&#xD;
				var pageList:ArrayCollection = new ArrayCollection();&#xD;
				&#xD;
				///////////////////////////////&#xD;
				var list:Array = result.list;&#xD;
				///////////////////////////////&#xD;
				&#xD;
				for each ( var row:Array in list )&#xD;
				{&#xD;
					var item:Object = new Object();&#xD;
					&#xD;
					for ( var i:int = 0; i &lt; size; i++ )&#xD;
					{&#xD;
						item[fields[i]] = row[i];&#xD;
					}&#xD;
					&#xD;
					pageList.addItem(item);&#xD;
				}&#xD;
				&#xD;
				myList.dataProvider = pageList;&#xD;
				&#xD;
				for ( i = 0 ; i &lt; 10; i++ )&#xD;
				{&#xD;
					pageNoList.addItem(i+1);	&#xD;
				}&#xD;
			}&#xD;
			&#xD;
			&#xD;
			private function changeEvt(event:Event):void  &#xD;
			{&#xD;
				    this.page = event.currentTarget.selectedItem;&#xD;
					this.navigate();&#xD;
			}&#xD;
			&#xD;
			private function navigate():void &#xD;
			{&#xD;
			        dispatchEvent( new MyMessage("navigate",this.page,true) );&#xD;
			}&#xD;
			&#xD;
	 &#xD;
	&lt;/mx:Script&gt;&#xD;
&#xD;
	&#xD;
		&#xD;
	&lt;view:ListGrid id="myList" height="80%" click="dispatchEvent( new MyMessage(MyMessage.subjectClicked,event.currentTarget.selectedItem.id,true) )"/&gt;&#xD;
	&#xD;
	&#xD;
	&#xD;
	&lt;mx:HBox height="20%"&gt;&#xD;
		&#xD;
		&lt;mx:Button label="First" enabled="{page&gt;1}"/&gt;&#xD;
		&lt;mx:Button label="Prev" click="page--; navigate()" enabled="{page&gt;1}"/&gt;&#xD;
		&lt;mx:ComboBox id="pageNoBox" dataProvider="{pageNoList}" change="changeEvt(event)"/&gt; &#xD;
		&lt;mx:Button label="Next" click="page++; navigate()"/&gt;&#xD;
		&lt;mx:Button label="Last"/&gt;&#xD;
		&#xD;
	&lt;/mx:HBox&gt;&#xD;
	&#xD;
&lt;/mx:VBox&gt;&#xD;
&#xD;
SideMenu.mxml&#xD;
&lt;?xml version="1.0" encoding="utf-8"?&gt;&#xD;
&lt;mx:VBox &#xD;
	xmlns:mx="http://www.adobe.com/2006/mxml"&#xD;
	width="100%" &gt;&#xD;
	&#xD;
	&lt;mx:Metadata&gt;&#xD;
		[Event(name="menuClicked", type="events.MenuClicked")]&#xD;
	&lt;/mx:Metadata&gt;&#xD;
	&#xD;
	&lt;mx:Script&gt;&#xD;
		 CDATA[&#xD;
			import events.MenuClicked;&#xD;
			&#xD;
			import mx.controls.Alert;&#xD;
			&#xD;
			private function pressMe(action:String):void &#xD;
			{&#xD;
				   var event:MenuClicked = new MenuClicked(MenuClicked.menuClicked,action);&#xD;
				   dispatchEvent(event);&#xD;
			}&#xD;
			&#xD;
		 &#xD;
	&lt;/mx:Script&gt;&#xD;
	&#xD;
	&lt;mx:Accordion id="accordion" width="100%" &gt;&#xD;
		&#xD;
		&lt;mx:VBox label="Accordion Button for Panel 1"&gt;&#xD;
			&lt;mx:LinkButton label="panel1" click="pressMe('general')"/&gt;&#xD;
			&lt;mx:LinkButton label="panel2" click="pressMe(MenuClicked.DETAIL_PAGE)"/&gt;&#xD;
		&lt;/mx:VBox&gt;&#xD;
		&#xD;
		&lt;mx:VBox label="Accordion Button for Panel 2"&gt;&#xD;
			&lt;mx:Label text="Accordion container panel 2"/&gt;&#xD;
			&lt;mx:Label text="Accordion container panel 3"/&gt;&#xD;
		&lt;/mx:VBox&gt;&#xD;
		&#xD;
		&lt;mx:VBox label="Accordion Button for Panel 3"&gt;&#xD;
			&lt;mx:Label text="Accordion container panel 3"/&gt;&#xD;
			&lt;mx:Label text="Accordion container panel 4"/&gt;&#xD;
		&lt;/mx:VBox&gt;&#xD;
	&lt;/mx:Accordion&gt;&#xD;
	&#xD;
	&#xD;
&lt;/mx:VBox&gt;&#xD;
&#xD;
&#xD;
link:&#xD;
https://github.com/mikechambers/as3corelib</content>
    <postId>DF56FFB3-EC6F-43F3-B1E4-E7E6F0C13BD7</postId>
    <pubDate>2011-08-19T00:00:00-04:00</pubDate>
    <title>test</title>
</post>
