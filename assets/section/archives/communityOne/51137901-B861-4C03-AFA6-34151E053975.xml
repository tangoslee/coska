<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>강윤정</author>
    <comments>
        <comment>
            <author>이성기</author>
            <date>2003-11-21T00:00:00-05:00</date>
            <content>These days I was surrounded by strong DAO and DTO believers between business tier and data access tier. I am reading articles and books to support the benefit of DAO and DTO, specially J2EE design patterns. But still I doubt the usage.</content>
        </comment>
    </comments>
    <content>Should we really seperate the business logic layer and database access(persistence) layer?&#xD;
&#xD;
I believe most companies has their own framework to access the database or use the commercial(or free) OR mapping tool.&#xD;
&#xD;
&#xD;
In my case, I have two approaches on developing database access layer.&#xD;
&#xD;
  - If java classes and the tables matches really well,&#xD;
     e.g) Account class &lt;---&gt; Account table in db&#xD;
     call ORMapping framework.&#xD;
&#xD;
  - If the business logic requires quite complex queries, &#xD;
     call our own generic database access framework.&#xD;
&#xD;
Many cases required both approaches, &#xD;
  e.g) instantiate the Account object with a given account id using ORMapper, then populate some extra attributes on Accont class by querying database using generic database framework.&#xD;
&#xD;
Unless there might be a chances expected comming up soon to shift persistence layer into other things - e.g) XML files or legacy application call, separation on business logic layer and persistence layer can over-engineering burden.&#xD;
&#xD;
Or we can put some thin layer interface between business logic layer and persistence layer to make BO layer not to be affected by the change of data storage type.&#xD;
&#xD;
I can say XXX_DAO should be specific to the Business functionality such as AccountDAO or PersonDAO.&#xD;
And each DAO classes interact with generic database access layer API. (Or each BO classes calls db access layer API if DAO classes are not designed)&#xD;
&#xD;
I used ObjectRelationalBridge for ORMapping layer, downloaded from jakarta. Though it has some restrictions, it&#xD;
went really well and that ORMapper tool had kind of ability to work with inheritances and 1-M, M-1 relations.&#xD;
&#xD;
Even that tool has no single problem when I migrated the application from Oracle to Db2, which was a real surprise to me.&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
</content>
    <postId>51137901-B861-4C03-AFA6-34151E053975</postId>
    <pubDate>2003-11-21T00:00:00-05:00</pubDate>
    <title>generic DAO ... do we need it?</title>
</post>
