<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>이성기</author>
    <comments>
        <comment>
            <author>강윤정</author>
            <date>2004-03-04T00:00:00-05:00</date>
            <content>I think there shouldn't be any differences on Oracle since you used stmt.setObject() and passed byte array. My gut feeling is this code for DB2 will work in Oracle as well with proper driver setup in intial driver loading.</content>
        </comment>
    </comments>
    <content>Here I post DB2 samplle to find difference from Oracle. &#xD;
&#xD;
&lt;pre&gt;&#xD;
package test;&#xD;
&#xD;
import java.io.FileInputStream;&#xD;
import java.io.IOException;&#xD;
import java.io.InputStream;&#xD;
import java.sql.Connection;&#xD;
import java.sql.DriverManager;&#xD;
import java.sql.PreparedStatement;&#xD;
import java.sql.Types;&#xD;
&#xD;
/**&#xD;
 * This sample shows Image file inserting to DB2&#xD;
 * &#xD;
 * @author scott lee(rojaware@yahoo.com)&#xD;
 */&#xD;
&#xD;
public class testDB2ConnectImageDirectSQL {&#xD;
&#xD;
    public static void main(String args[]) {&#xD;
&#xD;
        try {&#xD;
            Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");&#xD;
&#xD;
        } catch (Exception e) {&#xD;
            e.printStackTrace();&#xD;
        }&#xD;
&#xD;
        try {&#xD;
&#xD;
            Connection connection = null;&#xD;
&#xD;
            testDB2ConnectImageDirectSQL test = new testDB2ConnectImageDirectSQL();&#xD;
            connection = test.getSimpleConnection();&#xD;
            &#xD;
            System.out.println("connection succeeded!");&#xD;
&#xD;
            String command = &#xD;
               "INSERT INTO MISIB00_IMAGES "&#xD;
               +" (ISIB00_IMAGE_ID_K   "      &#xD;
               +" ,ISIB00_VERSION_R    "     &#xD;
               +" ,ISIB00_CREATED_C    "    &#xD;
               +" ,ISIB00_CREATED_S    "   &#xD;
               +" ,ISIB00_MODIFIED_C   "  &#xD;
               +" ,ISIB00_MODIFIED_S   " &#xD;
               +" ,ISIB00_IMAGE_X)     "  // BLOB column&#xD;
               +" VALUES  "                    &#xD;
               +" (? "          &#xD;
               +" ,1                 "         &#xD;
               +" ,?  "          &#xD;
               +" ,CURRENT_TIMESTAMP "         &#xD;
               +" ,?  "         &#xD;
               +" ,CURRENT_TIMESTAMP  "        &#xD;
               +" ,?)     ";&#xD;
               &#xD;
            PreparedStatement pstmt = connection.prepareStatement(command);&#xD;
&#xD;
                       &#xD;
            &#xD;
            pstmt.setInt(1, 20);&#xD;
            pstmt.setString(2, "slee");&#xD;
            pstmt.setString(3, "slee");&#xD;
            byte[] image = test.readFully("C://atemp//addCamp_files//ciadministration.gif");&#xD;
            pstmt.setObject( 4, image, Types.BLOB ); &#xD;
            &#xD;
            pstmt.execute();&#xD;
            &#xD;
            pstmt.close();&#xD;
        } catch (Exception e) {&#xD;
            e.printStackTrace();&#xD;
            e.getMessage();&#xD;
&#xD;
        }&#xD;
&#xD;
    }&#xD;
    &#xD;
    /**&#xD;
    * only image insertion test&#xD;
    * TODO - removed soon&#xD;
    */&#xD;
    private Connection getSimpleConnection() {&#xD;
        Connection connection = null;&#xD;
&#xD;
        try {&#xD;
&#xD;
            String url = "jdbc:db2:testDB";&#xD;
           &#xD;
            String userid = "user";&#xD;
            String passwd = "pass";&#xD;
            connection = DriverManager.getConnection(url, userid, passwd);&#xD;
&#xD;
            System.out.println("single connection succeeded!");&#xD;
&#xD;
        } catch (Exception e) {&#xD;
            e.printStackTrace();&#xD;
            e.getMessage();&#xD;
&#xD;
        }&#xD;
        return connection;&#xD;
&#xD;
    }&#xD;
       /**&#xD;
     * Attempts to completely read the contents of a specified&#xD;
     * file. The file is closed whether or not the read was&#xD;
     * successful.&#xD;
     * &#xD;
     * @param filename the name of the file to be read&#xD;
     * &#xD;
     * @return an array of bytes read from the file on success&#xD;
     * &#xD;
     * @throws IOException if an I/O error occurs&#xD;
     */&#xD;
    public static byte [] readFully (String filename)&#xD;
        throws IOException&#xD;
    {&#xD;
        return readFully (new FileInputStream (filename));&#xD;
    }&#xD;
      /**&#xD;
     * Attempts to completely read the contents of a specified&#xD;
     * InputStream. The stream is closed whether or not the&#xD;
     * read was successful.&#xD;
     * &#xD;
     * @param is the InputStream to read from&#xD;
     * &#xD;
     * @return an array of bytes read from the stream on success&#xD;
     * &#xD;
     * @throws IOException if an I/O error occurs&#xD;
     */&#xD;
    public static byte [] readFully (InputStream is)&#xD;
        throws IOException&#xD;
    {&#xD;
        int size=10000;&#xD;
        int off=0; /* Offset - how much we've read */&#xD;
        int got;&#xD;
        byte [] ret = new byte [size];&#xD;
        try&#xD;
        {&#xD;
            while (true)&#xD;
            {&#xD;
                got = is.read (ret, off, size-off);&#xD;
                if (got==-1) // End of stream&#xD;
                    break;&#xD;
                off+=got;&#xD;
                if (off==size) /* If we've read to the end of our buffer,&#xD;
                                * enlarge it. */&#xD;
                {&#xD;
                    size *= 2;&#xD;
                    byte [] tmp = new byte [size];&#xD;
                    System.arraycopy (ret, 0, tmp, 0, off);&#xD;
                    ret = tmp;&#xD;
                    &#xD;
                }&#xD;
            }&#xD;
        }&#xD;
        finally&#xD;
        {&#xD;
            close (is);&#xD;
        }&#xD;
        /* If we've got a bigger buffer than we need, resize it */&#xD;
        if (off != size)&#xD;
        {&#xD;
            byte [] tmp = new byte [off];&#xD;
            System.arraycopy (ret, 0, tmp, 0, off);&#xD;
            ret = tmp;&#xD;
        }&#xD;
        return ret;&#xD;
    }&#xD;
     /**&#xD;
     * Closes the specified InputStream, swallowing any exceptions.&#xD;
     * &#xD;
     * @param in the InputStream to close. May be null.&#xD;
     */&#xD;
    public static void close (InputStream in)&#xD;
    {&#xD;
        if (in != null)&#xD;
        {&#xD;
            try&#xD;
            {&#xD;
                in.close();&#xD;
            }&#xD;
            catch (IOException e)&#xD;
            {&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
}&#xD;
&#xD;
 &lt;/pre&gt;</content>
    <postId>51BF3713-B340-4993-8D06-74DBF2E0A84C</postId>
    <pubDate>2004-03-04T00:00:00-05:00</pubDate>
    <title>BLOB inserting for DB2</title>
</post>
