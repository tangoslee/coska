<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>신민용</author>
    <comments/>
    <content>전직장에서 고객이 너무 자주 timeout이 발생해서,&#xD;
컴플레인해서, 퍼포먼스 조사를 했었는데,&#xD;
일단 데이타베이스나 화일access관련 조사를 &#xD;
먼저 시도를 했는데,&#xD;
왜냐하면, 일반적으로 물리적IO가 가장 많은 자원을&#xD;
차지하기 때문입니다.&#xD;
일단 SQL tunning이나 데이타베이스 튜닝을 하면,&#xD;
잘되면 10-100배의  데이타베이스 속도가 빨라집니다.&#xD;
(Believe it or not)&#xD;
SQL or database tunning에 대해서 간단하게&#xD;
금요일날 언급할것 입니다.&#xD;
당연히 connection pool을 쓰는 것은 기본이구요..&#xD;
이때 또다른 나의 해결책은 간단한 코드테이블을&#xD;
cache하는 것이 였는데, 효과가 괜찬었음..&#xD;
&#xD;
두번째는 XML의 performance는  별로 좋지 않습니다.&#xD;
특히 XSLT를 쓰면, 거의 무지하게 느리지요..&#xD;
외부시스템하고 연결하는 경우가 아니라면,&#xD;
Object로 데이타를 주고 받는게 좋습니다.&#xD;
그래서, 현재하는 프로젝트에서는 최초의 입력XML를 제외&#xD;
하고는 기존에 쓰던 XML data 를 전부 value object로&#xD;
바꾸어서 작업중입니다.&#xD;
&#xD;
세번째는, 그때 퍼포먼스 조사중,&#xD;
         참.. 허탈한 코딩을 많이 봤슴..&#xD;
쓸데없이 looping을 돈다든가, 그것도&#xD;
데이타베이스를 엑세스하면서,&#xD;
혹은 이중으로 작업을 한다든가 하는 등등...&#xD;
또한 StringBuffer대신 String으로 concat하다가,&#xD;
Out of Memory  error  or swapping이 일어나는 경우도&#xD;
종종 봅니다...(실제 바로 전달에 발생했슴.. from some developer... He was very close to getting fired~!!)&#xD;
&#xD;
네번째는, sychronized를 많이쓰면, 퍼포먼스가&#xD;
저하되는 것을 많이 봤는데, 그래서 요즘은&#xD;
거의 부분 syncho를 많이 써서 코딩합니다.&#xD;
&#xD;
**이성기,강윤정씨 방법에 많이 찬성합니다.&#xD;
  타임을 check하여 log를 걸어논 다음&#xD;
  범인을 찾아야죠..&#xD;
&#xD;
** 황성규씨 의견도 많이 동감합니다.&#xD;
   현 프로젝트에서 실제 IBM JVM과 DB2 JDBC를 살려고&#xD;
   했었는데, 너무 비싸고, 또한 달랑 한 object만은&#xD;
   팔지 않는다고 해서... 포기 했었음..&#xD;
&#xD;
** 이래도 저래도 안되면, 돈으로 해결하는 수밖에...~~&#xD;
   메모리를 늘려야지요...</content>
    <postId>622DE0B7-16A7-452E-93EB-C3508C6014E7</postId>
    <pubDate>2002-09-04T00:00:00-04:00</pubDate>
    <title>RE: performance issue for java on AIX</title>
</post>
