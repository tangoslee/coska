<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>신민용</author>
    <comments/>
    <content>#!C:\app\Perls\perl\bin\perl.exe&#xD;
&#xD;
use CGI;&#xD;
use BoardManager;&#xD;
&#xD;
use Log;&#xD;
&#xD;
my $input = { action=&gt;'select' , boardName=&gt;'general', pageNo=&gt;1 };&#xD;
&#xD;
my $cgi = CGI-&gt;new($input);&#xD;
&#xD;
   my $action = $cgi-&gt;param('action');&#xD;
   print "action = $action\n";&#xD;
   &amp;$action();&#xD;
   &#xD;
   &#xD;
   $log = Log-&gt;new;   &#xD;
&#xD;
   print "Content-Type: text/html\n\n";&#xD;
   &#xD;
   print "here";&#xD;
   &#xD;
       #$log-&gt;debug("id",$id);&#xD;
       #$log-&gt;info("name",$name);&#xD;
       #$log-&gt;close;&#xD;
   &#xD;
   # print $cgi-&gt;header,                    &#xD;
   #       $cgi-&gt;start_html('hello world'),&#xD;
   #       $cgi-&gt;h1('hello world'),&#xD;
   #       $cgi-&gt;end_html;   &#xD;
&#xD;
sub select&#xD;
{&#xD;
   my $pageNo    = $cgi-&gt;param('pageNo');&#xD;
   my $boardName = $cgi-&gt;param('boardName');&#xD;
   &#xD;
    print "pageNo=$pageNo, board=$boardName\n";   &#xD;
&#xD;
   my $bm = BoardManager-&gt;new($boardName);&#xD;
   &#xD;
   my $resultList = $bm-&gt;select($pageNo);&#xD;
   &#xD;
    foreach $row (@$resultList)&#xD;
    {&#xD;
         print join(',',@$row)," \n";   &#xD;
    }  &#xD;
}&#xD;
   &#xD;
1;   &#xD;
&#xD;
&#xD;
use Fcntl ':flock';&#xD;
&#xD;
&#xD;
package Log;&#xD;
&#xD;
$mode = 0;&#xD;
&#xD;
&#xD;
sub init&#xD;
{&#xD;
&#xD;
}&#xD;
&#xD;
sub new&#xD;
{&#xD;
    my($type) = $_[0];&#xD;
    my($name) = $_[1];&#xD;
    &#xD;
    if ( $name == null ) &#xD;
    {&#xD;
         $name = 'myLog.xml';&#xD;
    }     &#xD;
    &#xD;
    open($file , "&gt;&gt;$name") or die "&gt;&gt;&gt;Cannot open file. error&lt;&lt;&lt;";&#xD;
    &#xD;
    my($self) = {};&#xD;
       $self-&gt;{file} = $file;&#xD;
&#xD;
     &#xD;
    bless($self, $type);&#xD;
    return($self);    &#xD;
}&#xD;
&#xD;
sub close&#xD;
{&#xD;
    my $self = shift;&#xD;
    &#xD;
    my $file = $self-&gt;{file};&#xD;
    print $file "\n";&#xD;
    &#xD;
    close($self-&gt;{file});   &#xD;
}&#xD;
&#xD;
sub debug&#xD;
{&#xD;
     my ($self,@msg) = @_;&#xD;
     &#xD;
	  if ( $mode == 0 ) &#xD;
	  {&#xD;
            flock($self-&gt;{file}, LOCK_EX);&#xD;
	        printLog($self-&gt;{file},\@msg);  &#xD;
	        flock($self-&gt;{file}, LOCK_UN);    &#xD;
	  }      &#xD;
}&#xD;
&#xD;
sub info&#xD;
{&#xD;
       my ($self,@msg) = @_;&#xD;
       &#xD;
            flock($self-&gt;{file}, LOCK_EX);&#xD;
	        printLog($self-&gt;{file},\@msg);  &#xD;
	        flock($self-&gt;{file}, LOCK_UN);    &#xD;
}&#xD;
&#xD;
sub error&#xD;
{&#xD;
	   &#xD;
	   flock(FILE, LOCK_EX);&#xD;
	   print FILE "################# ERROR ###############\n";&#xD;
	   printLog(\@_);  	   &#xD;
	   &#xD;
	   $i = 1;&#xD;
	   &#xD;
	   $line = (caller(0))[2];&#xD;
	   &#xD;
	  ($package, $filename, $line2, $subroutine) = caller($i); &#xD;
	  &#xD;
	  while ( $subroutine )&#xD;
	  {&#xD;
	  	  print FILE '  --&gt; @',$subroutine,'] #',$line,"\n";&#xD;
	  	  $i++;&#xD;
	  	  $line = $line2;&#xD;
	  	  ($package, $filename, $line2, $subroutine) = caller($i); &#xD;
	  }&#xD;
	  &#xD;
	  print FILE "\n";&#xD;
	   &#xD;
	   flock(FILE, LOCK_UN);    &#xD;
}&#xD;
&#xD;
sub printLog&#xD;
{&#xD;
	  ($file,$msg) = @_;&#xD;
	  &#xD;
	  ($package2, $filename, $line) = (caller(1))[2];&#xD;
	  &#xD;
	  ($package, $filename2, $line2, $subroutine, $hasargs, $wantarray, $evaltext, $is_require, $hints, $bitmask) = caller(2); &#xD;
&#xD;
	  my $log;&#xD;
	  $flag = 0;&#xD;
	  foreach $x (@$msg)&#xD;
	  {&#xD;
	  	 if ( $flag == 0 )&#xD;
	  	 {&#xD;
	  	    $log .= '{'.$x.'}';&#xD;
	  	    $flag = 1;&#xD;
	  	 }&#xD;
	  	 else&#xD;
	  	 {&#xD;
	  	    $log .= '=&gt;['.$x.'] ';&#xD;
	  	    $flag = 0;&#xD;
	  	 }&#xD;
	  }&#xD;
	  &#xD;
    print $file '[',$filename,'@',$subroutine,'] #',$line,': ',$log,"\n";&#xD;
    &#xD;
}&#xD;
&#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
&#xD;
use Factory;&#xD;
use Cache;&#xD;
use Dbx;&#xD;
&#xD;
package BoardManager;&#xD;
&#xD;
Factory::DBInit();&#xD;
&#xD;
$pageSize   = Factory::PageSize;  &#xD;
&#xD;
sub new&#xD;
{&#xD;
    my($type) = $_[0];&#xD;
    my($name) = $_[1];&#xD;
    &#xD;
    my $cache = Cache-&gt;new($name);&#xD;
    &#xD;
    my($self) = {};&#xD;
&#xD;
     $self-&gt;{boardName} = $name;&#xD;
     $self-&gt;{cache}     = $cache;&#xD;
     &#xD;
    bless($self, $type);&#xD;
    return($self);&#xD;
}&#xD;
&#xD;
sub _getListByID_&#xD;
{&#xD;
     my $baseID      = shift;&#xD;
     my $list        = shift;&#xD;
     my $boardName   = shift;&#xD;
     &#xD;
     my $startID = 0;&#xD;
     my $endID   = 99999999999999;  &#xD;
     my $skip    = 0;&#xD;
     my $pageNo  = 0;&#xD;
&#xD;
     my $rowCnt  = 0;&#xD;
     my $size    = @$list;&#xD;
          &#xD;
     for ( my $i = 0; $i &lt; $size; $i++ )&#xD;
     {&#xD;
         my $row     = $list-&gt;[$i];&#xD;
            $rowCnt += $row-&gt;[1];&#xD;
         &#xD;
         if ( $baseID &lt;= $row-&gt;[0] )&#xD;
         {&#xD;
               $rowCnt -= $row-&gt;[1];&#xD;
               &#xD;
               $offset  = $rowCnt % $pageSize;&#xD;
               &#xD;
            my $cnt     = $offset;  &#xD;
               &#xD;
               ##print "---&gt; rowCnt = $rowCnt . offset = $offset \n";&#xD;
               &#xD;
               my $j = $i;&#xD;
                  &#xD;
               while( --$j &gt;= 0 )&#xD;
               {&#xD;
                    $row  = $list-&gt;[$j];&#xD;
                    $cnt -= $row-&gt;[1];                            &#xD;
                    $rowCnt -= $row-&gt;[1];                            &#xD;
                    &#xD;
                    ##print "---&gt; offset = $offset , rowCnt=$rowCnt\n";&#xD;
                    &#xD;
                    if ( $cnt &lt;= 0 )&#xD;
                    {&#xD;
                         $pageNo = int(($rowCnt+9)/$pageSize);&#xD;
                         $skip   = -$cnt;&#xD;
                         &#xD;
                         $startID = _getStartID_getListByID($j,$list);&#xD;
                         last;&#xD;
                    }&#xD;
               }          &#xD;
              &#xD;
               ###############################################&#xD;
               while( ++$i &lt; $size )&#xD;
               {&#xD;
                     $row = $list-&gt;[$i];&#xD;
                     $offset += $row-&gt;[1];&#xD;
                     if ( $offset &gt;= $pageSize )&#xD;
                     {&#xD;
                          $endID = $row-&gt;[0];&#xD;
                          last;&#xD;
                     }&#xD;
               }&#xD;
               ###############################################&#xD;
               last;&#xD;
         }  &#xD;
     }    &#xD;
     &#xD;
     print "---&gt; skip = $skip . page=$pageNo\n";&#xD;
                                 &#xD;
     my $sql = 'SELECT id,user_name,subject,count,recommendation,comments,created FROM board ';&#xD;
        $sql .= "\nWHERE board_name = '$boardName' AND id &gt; $startID and id &lt;= $endID order by id";&#xD;
     &#xD;
     &#xD;
     print " ---&gt; Start = $startID,  ---&gt; end = $endID, ---&gt; skip=$skip\n";   &#xD;
     print $sql,"\n";&#xD;
     &#xD;
     &#xD;
     my $resultList = Dbx::rangeQuery($sql,$skip);&#xD;
     &#xD;
     my $size = @$resultList;&#xD;
     my $x;&#xD;
     for ( $x = 0; $x &lt; $size; $x++ )&#xD;
     {&#xD;
         my $row = $resultList-&gt;[$x];&#xD;
         if ( $baseID == $row-&gt;[0] )&#xD;
         {&#xD;
               last;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     my $mok = int( $x / $pageSize );&#xD;
     if ( $mok &gt; 0 )&#xD;
     {&#xD;
          splice(@$resultList,0,$mok*$pageSize);&#xD;
          $pageNo += $mok;&#xD;
     }&#xD;
     &#xD;
     my $size = @$resultList;&#xD;
     &#xD;
     if ( $size &gt; $pageSize )&#xD;
     {&#xD;
          splice(@$resultList,$pageSize);&#xD;
     }&#xD;
     &#xD;
     my $hashRef = {};&#xD;
        $hashRef-&gt;{pageNo} = $pageNo;&#xD;
        $hashRef-&gt;{list}  = $resultList;&#xD;
        &#xD;
        return $hashRef;&#xD;
     &#xD;
     &#xD;
}&#xD;
&#xD;
sub _getStartID_getListByID&#xD;
{&#xD;
     my ($i,$list) = @_;&#xD;
     &#xD;
     if ( $i == 0 )&#xD;
     {&#xD;
          return 0;  &#xD;
     }&#xD;
     else&#xD;
     {&#xD;
         return $list-&gt;[$i-1]-&gt;[0];&#xD;
     }&#xD;
    &#xD;
}&#xD;
&#xD;
sub insert&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    my $baseID = shift;&#xD;
    &#xD;
    my $userID   = shift;&#xD;
    my $userName = shift;&#xD;
    my $subject  = shift;&#xD;
    my $content  = shift;&#xD;
    &#xD;
    my $hashref  = $self-&gt;{cache}-&gt;checkOut;&#xD;
    my $list     = $hashref-&gt;{list};&#xD;
    &#xD;
    my $size = @$list;&#xD;
    my @row;&#xD;
    &#xD;
    my $inputID;&#xD;
    &#xD;
    my $rest = 100000000;&#xD;
&#xD;
    if ( $baseID == 0 )&#xD;
    {&#xD;
         $inputID  = $hashref-&gt;{lastID};&#xD;
         &#xD;
         my $lastID = $inputID/$rest;&#xD;
            $lastID--;&#xD;
            $lastID = $lastID*$rest;&#xD;
            &#xD;
            $hashref-&gt;{lastID} = $lastID;&#xD;
        &#xD;
         if ( $size == 0 )&#xD;
         {&#xD;
              $row[0] = $inputID;&#xD;
              $row[1] = 1;&#xD;
              push(@$list,[@row]);&#xD;
         }&#xD;
         else&#xD;
         {&#xD;
              my $rowref = $list-&gt;[0];&#xD;
              &#xD;
              if ( $rowref-&gt;[1] &lt; $pageSize )&#xD;
              {&#xD;
                   $rowref-&gt;[1]++;&#xD;
              }&#xD;
              else&#xD;
              {&#xD;
                  $row[0] = $inputID;&#xD;
                  $row[1] = 1;&#xD;
                  unshift(@$list,[@row]);&#xD;
              } &#xD;
         }    &#xD;
    }&#xD;
    else&#xD;
    {&#xD;
          my $offset = &amp;_getLevelOffset_insert($baseID);&#xD;
         &#xD;
          my $endID  = $baseID + $offset - 1;&#xD;
          &#xD;
          my $maxIDSQL = "SELECT max(id) as maxID from board where board_name = '$self-&gt;{boardName}' and id &gt;= $baseID and id &lt; $endID";&#xD;
          &#xD;
          print "sql=$maxIDSQL\n"; &#xD;
          &#xD;
          $inputID = Dbx::get($maxIDSQL)-&gt;{maxID};&#xD;
          &#xD;
          print "result1=$inputID\n"; &#xD;
&#xD;
          $offset = $offset / 100;&#xD;
          &#xD;
          $inputID = $inputID / $offset;&#xD;
          $inputID++;&#xD;
          $inputID = $inputID * $offset;&#xD;
          &#xD;
          print "result2=$inputID\n"; &#xD;
          &#xD;
          &amp;_addList_insert ($list,$inputID);&#xD;
    }&#xD;
    &#xD;
    my %sql = ();&#xD;
       $sql{board_name} = $self-&gt;{boardName};&#xD;
       &#xD;
       $sql{id}         = $inputID;&#xD;
       $sql{user_id}    = $userID;&#xD;
       $sql{user_name}  = $userName;&#xD;
       $sql{subject}    = $subject;&#xD;
       &#xD;
       $sql{count}          = 0;&#xD;
       $sql{recommendation} = 0;&#xD;
       $sql{comments}       = 0;&#xD;
       &#xD;
       $sql{content} = $content;&#xD;
       &#xD;
       &#xD;
       #### temp%%% Dbx::insert('board',\%sql);&#xD;
       &#xD;
       my $hashRef = &amp;_getListByID_($inputID,$list,$self-&gt;{boardName});&#xD;
       &#xD;
       $self-&gt;{cache}-&gt;commit;&#xD;
       &#xD;
       return $hashRef;&#xD;
}&#xD;
&#xD;
sub _getLevelOffset_insert&#xD;
{&#xD;
     my $baseID = shift;&#xD;
     &#xD;
     my $offset = 100000000;&#xD;
     &#xD;
     if ( ($baseID % $offset) &gt; 0 )  &#xD;
     {&#xD;
           $offset = $offset / 100;  &#xD;
           &#xD;
           if ( ($baseID % $offset) &gt; 0 )  &#xD;
           {&#xD;
                 $offset = $offset / 100;  &#xD;
                 &#xD;
                 if ( ($baseID % $offset) &gt; 0 )  &#xD;
                 {&#xD;
                       $offset = $offset / 100;  &#xD;
                       &#xD;
                       if ( ($baseID % $offset) &gt; 0 )  &#xD;
                       {&#xD;
                             $offset = $offset / 100;  &#xD;
                       }&#xD;
                 }&#xD;
           }&#xD;
     }&#xD;
     &#xD;
     return $offset;&#xD;
}&#xD;
&#xD;
sub _addList_insert&#xD;
{&#xD;
     my $list  = shift;&#xD;
     my $newID = shift;   &#xD;
     &#xD;
     my $size = @$list;&#xD;
     &#xD;
     if ( $size == 0 )&#xD;
     {&#xD;
          return;  &#xD;
     }&#xD;
     &#xD;
     for ( my $i = 0; $i &lt; $size; $i++ )&#xD;
     {&#xD;
          my $row = $list-&gt;[$i];  &#xD;
          &#xD;
          if ( $newID &lt; $row-&gt;[0] )&#xD;
          {&#xD;
               if ( $i == 0 )&#xD;
               {&#xD;
                    if ( $row-&gt;[1] &gt;= 10 )&#xD;
                    {&#xD;
                         my @newRow;&#xD;
                         $newRow[0] = $newID;&#xD;
                         $newRow[1] = 1;&#xD;
                         unshift(@$list,[@newRow]);                        &#xD;
                         return;&#xD;
                    }&#xD;
               }  &#xD;
               &#xD;
               $row-&gt;[1]++;&#xD;
               &#xD;
               if ( $row-&gt;[1] &gt; $pageSize*2 )&#xD;
               {&#xD;
                   ### split &#xD;
               }&#xD;
               &#xD;
               return;&#xD;
          }&#xD;
     }&#xD;
     &#xD;
     my $lastRow = $list-&gt;[$size-1];&#xD;
        $lastRow-&gt;[0] = $newID;&#xD;
        $lastRow-&gt;[1]++;&#xD;
}&#xD;
&#xD;
sub select&#xD;
{&#xD;
     my ($self)     = shift;&#xD;
     my $pageNumber = shift;&#xD;
     &#xD;
     my $startPage  = ($pageNumber-1) * $pageSize;&#xD;
     &#xD;
     my $hashref = $self-&gt;{cache}-&gt;readOut;&#xD;
     my $list    = $hashref-&gt;{list};&#xD;
     &#xD;
     my $rowCnt = 0;&#xD;
     &#xD;
     my $i;&#xD;
     my $size = @$list;&#xD;
     print "size = $size, startPage=$startPage\n";&#xD;
     &#xD;
     my $startID;&#xD;
     my $endID;&#xD;
     my $skip;&#xD;
     &#xD;
     my $pageCnt = 0;&#xD;
     &#xD;
     my $prevID = 0;&#xD;
     my $row;&#xD;
     &#xD;
     for ( $i = 0; $i &lt; $size; $i++ )&#xD;
     {&#xD;
          $row = $list-&gt;[$i];&#xD;
          &#xD;
          $rowCnt += $row-&gt;[1];  &#xD;
          &#xD;
          ##print "rowCnt=$rowCnt ==&gt; $row-&gt;[0]\n";&#xD;
          &#xD;
          if ( $rowCnt &gt; $startPage )&#xD;
          {&#xD;
               $startID = $prevID;&#xD;
               $pageCnt = $rowCnt-$startPage;&#xD;
               &#xD;
               $skip    = $startPage - ($rowCnt-$row-&gt;[1]);&#xD;
               &#xD;
               $i++;&#xD;
               last;&#xD;
          }&#xD;
          $prevID = $row-&gt;[0];&#xD;
     }&#xD;
     &#xD;
     for ( ; $i &lt; $size; $i++ )&#xD;
     {&#xD;
          $row = $list-&gt;[$i];&#xD;
          &#xD;
          $pageCnt += $row-&gt;[1];  &#xD;
          &#xD;
          if ( $pageCnt &gt;= $pageSize )&#xD;
          {&#xD;
               $endID = $row-&gt;[0];&#xD;
               last;&#xD;
          }&#xD;
     }&#xD;
     &#xD;
     ##print "start=$startID, end=$endID, pageCnt=$pageCnt, skip=$skip\n";&#xD;
     &#xD;
     my $boardName = ${self}-&gt;{boardName};&#xD;
     &#xD;
     my $sql = 'SELECT id,user_name,subject,count,recommendation,comments,created FROM board ';&#xD;
        $sql .= "WHERE board_name = '$boardName' AND id &gt; $startID and id &lt; $endID order by id";&#xD;
        &#xD;
     ##print $sql,"\n";&#xD;
     &#xD;
     my $resultList = Dbx::rangeQuery($sql,$skip,$pageSize);&#xD;
     &#xD;
     foreach $row (@$resultList)&#xD;
     {&#xD;
         print $row-&gt;[0],' ', $row-&gt;[1],"\n";  &#xD;
     }&#xD;
     &#xD;
     return $resultList;&#xD;
}&#xD;
&#xD;
&#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
&#xD;
use Storable;&#xD;
use Fcntl ':flock';&#xD;
&#xD;
package Cache;&#xD;
&#xD;
&#xD;
sub new&#xD;
{&#xD;
    my($type) = $_[0];&#xD;
    my($name) = $_[1];&#xD;
    &#xD;
    my $fd;&#xD;
    &#xD;
    open($fd, "+&lt;$name.dat") or &#xD;
        ##print "try again\n!";&#xD;
        open($fd, "+&gt;$name.dat") or&#xD;
              die "&gt;&gt;&gt;Cannot open file[$name.dat].[$!] error&lt;&lt;&lt;";&#xD;
    &#xD;
    binmode($fd);&#xD;
&#xD;
    my($self) = {};&#xD;
&#xD;
    $self-&gt;{fd} = $fd;&#xD;
     &#xD;
    bless($self, $type);&#xD;
    return($self);&#xD;
}&#xD;
&#xD;
sub commit&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    &#xD;
    my $table  = $self-&gt;{data};&#xD;
    my $fd     = $self-&gt;{fd};&#xD;
&#xD;
    my $serialized = Storable::freeze $table;&#xD;
    &#xD;
    truncate( $fd, 0 );&#xD;
    seek($fd,0,0);&#xD;
    print $fd $serialized;&#xD;
    flock($fd, LOCK_UN);    &#xD;
}&#xD;
&#xD;
sub rollback&#xD;
{&#xD;
    flock($fd, LOCK_UN);    &#xD;
}&#xD;
&#xD;
sub checkOut&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    my $fd = $self-&gt;{fd};&#xD;
    &#xD;
    flock($fd, LOCK_EX);&#xD;
    &#xD;
    seek($fd,0,0);&#xD;
    &#xD;
    my $serialized;&#xD;
    my $buffer;&#xD;
    &#xD;
    while ( $nBytes = read($fd, $buffer, 1024) ) &#xD;
    {&#xD;
        $serialized .= $buffer;   &#xD;
    }    &#xD;
    &#xD;
    if ( length($serialized) == 0 )&#xD;
    {&#xD;
         $self-&gt;{data} = {};&#xD;
    }&#xD;
&#xD;
    else&#xD;
    {&#xD;
         $self-&gt;{data} = Storable::thaw($serialized);&#xD;
    }    &#xD;
    &#xD;
    return $self-&gt;{data};&#xD;
}&#xD;
&#xD;
sub readOut&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    my $fd = $self-&gt;{fd};&#xD;
    &#xD;
    &#xD;
    flock($fd, LOCK_SH);&#xD;
    &#xD;
    seek($fd,0,0);&#xD;
    &#xD;
    my $serialized;&#xD;
    my $buffer;&#xD;
    &#xD;
    while ( $nBytes = read($fd, $buffer, 1024) ) &#xD;
    {&#xD;
        $serialized .= $buffer;   &#xD;
    }    &#xD;
    &#xD;
    &#xD;
&#xD;
    flock($fd, LOCK_UN);    &#xD;
    &#xD;
    if ( length($serialized) == 0 )&#xD;
    {&#xD;
         return {};   &#xD;
    }&#xD;
&#xD;
    return Storable::thaw($serialized);&#xD;
}&#xD;
&#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
   &#xD;
   &#xD;
use DBI;&#xD;
&#xD;
package Dbx;&#xD;
&#xD;
my $dbh;&#xD;
&#xD;
sub init&#xD;
{&#xD;
    if ( ! $dbh  )&#xD;
    {&#xD;
        my($url)  = $_[0];&#xD;
        my($user) = $_[1];&#xD;
        my($pwd)  = $_[2];&#xD;
        &#xD;
        print $url,"\n";&#xD;
        &#xD;
        $dbh = DBI-&gt;connect($url,$user,$pwd ) || die "Could not connect to database:"; &#xD;
    }    &#xD;
}&#xD;
&#xD;
sub insert&#xD;
{&#xD;
	 my $tableName   = $_[0];&#xD;
     my $fieldValues = $_[1];&#xD;
     &#xD;
     my $sql = 'INSERT INTO '.$tableName.' (';&#xD;
     &#xD;
     my $values = ")\n  VALUES(";&#xD;
     &#xD;
     ($key,$value) = each(%$fieldValues);&#xD;
     &#xD;
     $sql .= $key;&#xD;
     $values .= '\''.$value.'\'';&#xD;
     &#xD;
     while( ($key,$value) = each(%$fieldValues) )&#xD;
     {&#xD;
         $sql .=','.$key;&#xD;
         $values .= ',\''.$value.'\'';&#xD;
     }	&#xD;
     &#xD;
     $sql .= $values.')';&#xD;
     &#xD;
     print $sql,"\n";&#xD;
     &#xD;
     $dbh-&gt;do($sql) or die "error: [$!$sql]\n";&#xD;
}&#xD;
	&#xD;
sub update&#xD;
{&#xD;
     my ($tableName,$fieldValues,$whereValues) = @_;&#xD;
     &#xD;
     my $sql = 'UPDATE '.$tableName."\n SET ";&#xD;
     &#xD;
     my ($key,$value) = each(%$fieldValues);&#xD;
     &#xD;
     $sql .=$key.'=\''.$value.'\'';&#xD;
     &#xD;
     while( ($key,$value) = each(%$fieldValues) )&#xD;
     {&#xD;
         $sql .=','.$key.'=\''.$value.'\'';&#xD;
     }	&#xD;
     &#xD;
     ($key,$value) = each(%$whereValues);&#xD;
     &#xD;
     $sql .="\n WHERE ".$key.'=\''.$value.'\'';&#xD;
     &#xD;
     while( ($key,$value) = each(%$whereValues) )&#xD;
     {&#xD;
         $sql .="\n AND ".$key.'=\''.$value.'\'';&#xD;
     }	&#xD;
     &#xD;
     print $sql,"\n";&#xD;
     &#xD;
     $dbh-&gt;do($sql);&#xD;
}&#xD;
&#xD;
sub delete&#xD;
{&#xD;
     my ($tableName,$whereValues) = @_;&#xD;
     &#xD;
     my $sql = 'DELETE '.$tableName;&#xD;
     &#xD;
     my ($key,$value) = each(%$whereValues);&#xD;
     &#xD;
     if ( $key )&#xD;
     {&#xD;
         $sql .="\n WHERE ".$key.'=\''.$value.'\'';&#xD;
         &#xD;
         while( ($key,$value) = each(%$whereValues) )&#xD;
         {&#xD;
             $sql .="\n AND ".$key.'=\''.$value.'\'';&#xD;
         }	&#xD;
     }    &#xD;
     &#xD;
     print $sql,"\n";&#xD;
     &#xD;
     $dbh-&gt;do($sql);&#xD;
}&#xD;
&#xD;
sub get&#xD;
{&#xD;
	  my $sth = $dbh-&gt;prepare($_[0]); &#xD;
	  &#xD;
	  $sth-&gt;execute(); &#xD;
&#xD;
	  return $sth-&gt;fetchrow_hashref; &#xD;
}&#xD;
&#xD;
sub query&#xD;
{&#xD;
	  my $sql   = $_[0];&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  &#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  $sth-&gt;execute(); &#xD;
	  &#xD;
&#xD;
	  while ( @row = $sth-&gt;fetchrow_array ) &#xD;
	  { &#xD;
	      push(@$resultList,[@row]);&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub rangeQuery&#xD;
{&#xD;
	  my $sql   = $_[0];&#xD;
	  my $skip  = $_[1];&#xD;
	  my $cnt   = $_[2];&#xD;
	  &#xD;
	  if ( $cnt == null )&#xD;
	  {&#xD;
	       $cnt = 9999;&#xD;
	  }&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  &#xD;
	  $sth-&gt;execute(); &#xD;
	  &#xD;
	  &#xD;
	  my @row;&#xD;
	  &#xD;
	  while( $skip &gt; 0 )&#xD;
	  {&#xD;
	       @row = $sth-&gt;fetchrow_array;&#xD;
	       &#xD;
	       if ( ! @row )&#xD;
	       {&#xD;
	            return $resultList;&#xD;
	       }&#xD;
	       $skip--;&#xD;
	  }&#xD;
&#xD;
	  while ( @row = $sth-&gt;fetchrow_array ) &#xD;
	  { &#xD;
	      if ( $cnt &gt; 0 )&#xD;
	      {&#xD;
	           push(@$resultList,[@row]);&#xD;
	           $cnt--;&#xD;
	      }     &#xD;
	      else&#xD;
	      {&#xD;
	           return $resultList;&#xD;
	      }&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub singleQuery&#xD;
{&#xD;
	  my $sql   = $_[0];&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  &#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  $sth-&gt;execute(); &#xD;
	  &#xD;
&#xD;
	  while ( @row = $sth-&gt;fetchrow_array ) &#xD;
	  { &#xD;
	      push(@$resultList,$row[0]);&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub hashQuery&#xD;
{&#xD;
	  my $sql = $_[0];&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  &#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  $sth-&gt;execute(); &#xD;
	  &#xD;
&#xD;
	  while ( $hashref = $sth-&gt;fetchrow_hashref ) &#xD;
	  { &#xD;
	      push(@$resultList,$hashref);&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub info()&#xD;
{&#xD;
	  print $dbh,"\n";&#xD;
}&#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
&#xD;
use Dbx;&#xD;
use Cache;&#xD;
&#xD;
package Factory;&#xD;
&#xD;
$dataSrc = ['DBI:mysql:mytest:localhost:3306', 'kore6817', 'kore6817'];&#xD;
&#xD;
$PAGE_SIZE = 10;&#xD;
&#xD;
sub PageSize&#xD;
{&#xD;
    return $PAGE_SIZE;    &#xD;
}&#xD;
    &#xD;
sub dataSource&#xD;
{&#xD;
    return $dataSrc;&#xD;
}&#xD;
&#xD;
sub DBInit&#xD;
{&#xD;
    my $dataSrc = dataSource();&#xD;
    Dbx::init(@$dataSrc);   &#xD;
} &#xD;
&#xD;
sub cacheInit&#xD;
{&#xD;
    my $name = shift;&#xD;
    &#xD;
    if (! $name )&#xD;
    {&#xD;
         die 'no name provided!';   &#xD;
    }&#xD;
    &#xD;
    print "name=$name\n";&#xD;
&#xD;
    my @list = ();&#xD;
    &#xD;
    my $sql  = "SELECT ID FROM board where board_name = '$name' ORDER BY ID DESC";&#xD;
    my $idList = Dbx::singleQuery($sql);&#xD;
    &#xD;
    my $size = @$idList;&#xD;
    print "size = $size\n";&#xD;
    &#xD;
    my $cnt = 0;&#xD;
    my $line;&#xD;
    &#xD;
    &#xD;
    &#xD;
    foreach $item (@$idList)&#xD;
    {&#xD;
         if ( $cnt == 0 )&#xD;
         {&#xD;
              $line = $item;  &#xD;
         }&#xD;
         &#xD;
         $cnt++;&#xD;
         &#xD;
         if ( $cnt &gt;= $PAGE_SIZE )&#xD;
         {&#xD;
              my @rec = ($line,$cnt);           &#xD;
              unshift(@list,[@rec]);&#xD;
              $cnt = 0;&#xD;
         }&#xD;
    }&#xD;
    &#xD;
    if ( $cnt &gt; 0 )&#xD;
    {&#xD;
              my @rec = ($line,$cnt);           &#xD;
              unshift(@list,[@rec]);&#xD;
    }&#xD;
    &#xD;
    my $lastID;&#xD;
    if ( $size &gt; 0 )&#xD;
    {&#xD;
         $lastID = $idList-&gt;[$size-1];&#xD;
         $lastID = $lastID/100000000;&#xD;
         $lastID--;&#xD;
         $lastID = $lastID*100000000;&#xD;
    }&#xD;
    else&#xD;
    {&#xD;
         $lastID = 99999900000000;&#xD;
    }     &#xD;
    &#xD;
    print "lastID=$lastID\n";&#xD;
    &#xD;
    &#xD;
    my $cache = Cache-&gt;new($name);&#xD;
    my $hashref = $cache-&gt;checkOut;&#xD;
    &#xD;
    $hashref-&gt;{list} = [@list];&#xD;
    $hashref-&gt;{lastID} = $lastID;&#xD;
    &#xD;
    $cache-&gt;commit;&#xD;
    &#xD;
}   &#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
package SQL;&#xD;
&#xD;
sub new     &#xD;
{&#xD;
    my($type)    = $_[0];&#xD;
    my($sqlType) = $_[1];&#xD;
    &#xD;
    my($self) = {};&#xD;
    &#xD;
    $self-&gt;{sql} = $sqlType;&#xD;
    $self-&gt;{cnt} = 0;&#xD;
&#xD;
    bless($self, $type);&#xD;
    return($self);&#xD;
}&#xD;
&#xD;
sub field&#xD;
{&#xD;
    my ($self)  = $_[0];   &#xD;
    my ($field) = $_[1];   &#xD;
    my ($name)  = $_[2];   &#xD;
    &#xD;
    if ( $self-&gt;{cnt} == 0 )&#xD;
    {&#xD;
         $self-&gt;{sql} .= ' '.$field;&#xD;
    }&#xD;
    else&#xD;
    {&#xD;
         $self-&gt;{sql} .= ','.$field;&#xD;
    }         &#xD;
    &#xD;
    if ( $name != undef )&#xD;
    {&#xD;
         $self-&gt;{sql} .= ' as '.$name;&#xD;
    }    &#xD;
    &#xD;
    $self-&gt;{cnt}++;&#xD;
    &#xD;
    return $self-&gt;{cnt}-1;&#xD;
}    &#xD;
&#xD;
sub from&#xD;
{&#xD;
    my ($self)      = $_[0];   &#xD;
    my ($tableName) = $_[1];   &#xD;
    my ($alias)     = $_[2];   &#xD;
    &#xD;
    $self-&gt;{sql} .= "\n FROM ".$tableName;    &#xD;
    &#xD;
    if ( $alias )&#xD;
    {&#xD;
        $self-&gt;{sql} .= ' as '.$alias;    &#xD;
    }&#xD;
}    &#xD;
&#xD;
sub join&#xD;
{&#xD;
    my ($self)        = shift;&#xD;
    my ($tableName)   = shift;&#xD;
    &#xD;
    $self-&gt;{sql} .= "\n JOIN ".$tableName.' ON ';    &#xD;
    &#xD;
    $condition = shift;&#xD;
    &#xD;
    $self-&gt;{sql} .= $condition;&#xD;
    &#xD;
    while( $condition = shift )&#xD;
    {&#xD;
        $self-&gt;{sql} .= ' AND '.$condition;&#xD;
    }    &#xD;
    &#xD;
    $self-&gt;{sql} .= ' '&#xD;
}    &#xD;
&#xD;
&#xD;
sub where&#xD;
{&#xD;
    my ($self)  = shift;&#xD;
    my ($field) = shift;&#xD;
    &#xD;
    &#xD;
    $self-&gt;{sql} .= "\n WHERE ".$field;&#xD;
    &#xD;
    my ($value) = shift;&#xD;
    &#xD;
    if ( $value )&#xD;
    {&#xD;
        $self-&gt;{sql} .= '=\''.$value.'\'';&#xD;
    }&#xD;
}&#xD;
&#xD;
sub and&#xD;
{&#xD;
    my ($self)  = shift;&#xD;
    my ($field) = shift;&#xD;
    &#xD;
    &#xD;
    $self-&gt;{sql} .= "\n AND ".$field;&#xD;
    &#xD;
    my ($value) = shift;&#xD;
    &#xD;
    if ( $value )&#xD;
    {&#xD;
        $self-&gt;{sql} .= '=\''.$value.'\'';&#xD;
    }&#xD;
}&#xD;
&#xD;
sub or&#xD;
{&#xD;
    my ($self)  = shift;&#xD;
    my ($field) = shift;&#xD;
    &#xD;
    &#xD;
    $self-&gt;{sql} .= "\n OR ".$field;&#xD;
    &#xD;
    my ($value) = shift;&#xD;
    &#xD;
    if ( $value )&#xD;
    {&#xD;
        $self-&gt;{sql} .= '=\''.$value.'\'';&#xD;
    }&#xD;
}&#xD;
&#xD;
sub orderBy&#xD;
{&#xD;
    my ($self)  = shift;&#xD;
    my ($field) = shift;&#xD;
    &#xD;
    &#xD;
    $self-&gt;{sql} .= "\n ORDER BY ".$field;&#xD;
    &#xD;
    while ( ($value) = shift )&#xD;
    {&#xD;
        $self-&gt;{sql} .= ','.$value;&#xD;
    }&#xD;
}&#xD;
&#xD;
sub toString()&#xD;
{&#xD;
    my ($self)  = $_[0];   &#xD;
    &#xD;
    return $self-&gt;{sql};&#xD;
}    &#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
&#xD;
create table MyTable (&#xD;
id bigint primary key not null,&#xD;
name varchar(256),&#xD;
content varchar(18000),&#xD;
comment tinytext(60000),&#xD;
created timestamp default now(),&#xD;
amount decimal(9,2),&#xD;
code  char(2)&#xD;
);&#xD;
&#xD;
&#xD;
create table board (&#xD;
board_name varchar(32) not null,&#xD;
id bigint not null,&#xD;
user_id varchar(32) not null,&#xD;
user_name varchar(64) not null,&#xD;
subject varchar(256) not null,&#xD;
content  text,&#xD;
count  int not null default 0,&#xD;
recommendation int,&#xD;
comments int,&#xD;
created timestamp default now(),&#xD;
&#xD;
primary key(board_name,id)&#xD;
);&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&amp;test3;&#xD;
&#xD;
sub test3&#xD;
{&#xD;
     my @here = (1,2,3,4);&#xD;
     &#xD;
     my @there = splice(@here,1);&#xD;
     &#xD;
     print join(',',@here),"\n";&#xD;
     print join(',',@there),"\n";&#xD;
}&#xD;
&#xD;
sub input&#xD;
{&#xD;
     use Cache;     &#xD;
     use DBI;     &#xD;
     &#xD;
     my $cache1 = Cache-&gt;new("test1");   &#xD;
     my $cache2 = Cache-&gt;new("test2");   &#xD;
     &#xD;
     my $hashref  =$cache2-&gt;checkOut;&#xD;
        $hashref-&gt;{id} = 1234;&#xD;
        &#xD;
        $cache2-&gt;commit;&#xD;
        &#xD;
     my $hashref1  =$cache1-&gt;checkOut;&#xD;
     &#xD;
     my $dataSrc = ['DBI:mysql:mytest:localhost:3306', 'kore6817', 'kore6817'];&#xD;
     my $dbh = DBI-&gt;connect(@$dataSrc) || die "Could not connect to database:"; &#xD;
     &#xD;
        print $dbh;&#xD;
        $hashref1-&gt;{dbh} = $dbh; ### ERROR&#xD;
        &#xD;
        $cache1-&gt;commit;&#xD;
}    &#xD;
&#xD;
sub test1&#xD;
{&#xD;
     my $time1 = time;&#xD;
     my $time2 = time;&#xD;
     my $time3 = time;&#xD;
     my $time4 = time;&#xD;
     print "time = $time1\n";&#xD;
     print "time = $time2\n";&#xD;
     print "time = $time3\n";&#xD;
     print "time = $time4\n";&#xD;
     &#xD;
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =&#xD;
                                          localtime(time);&#xD;
$year += 1900;&#xD;
print "$sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst\n";&#xD;
$now_string = localtime; &#xD;
print "$now_string\n";&#xD;
&#xD;
     &#xD;
}&#xD;
&#xD;
sub test2()&#xD;
{&#xD;
  use Time::HiRes qw ( time alarm sleep );   &#xD;
  &#xD;
   $now_fractions1 = time;&#xD;
   $now_fractions2 = time;&#xD;
   $now_fractions3 = time;&#xD;
   $now_fractions4 = time;&#xD;
   $now_fractions11 = time;&#xD;
   $now_fractions12 = time;&#xD;
   $now_fractions13 = time;&#xD;
   $now_fractions14 = time;&#xD;
   &#xD;
   print $now_fractions1,"\n";&#xD;
   print $now_fractions2,"\n";&#xD;
   print $now_fractions3,"\n";&#xD;
   print $now_fractions4,"\n";&#xD;
&#xD;
   print $now_fractions11,"\n";&#xD;
   print $now_fractions12,"\n";&#xD;
   print $now_fractions13,"\n";&#xD;
   print $now_fractions14,"\n";&#xD;
}&#xD;
&#xD;
&#xD;
use Cache;&#xD;
use BoardManager;&#xD;
use Factory;&#xD;
&#xD;
#&amp;init;&#xD;
#&amp;test2;&#xD;
&amp;insertTest;&#xD;
&amp;test2;&#xD;
&#xD;
#&amp;test3;&#xD;
&#xD;
#&amp;test4;&#xD;
&#xD;
sub test4&#xD;
{&#xD;
      my $org = 1234;&#xD;
      &#xD;
      my $mod = int($org / 100);&#xD;
      &#xD;
      print $mod,"\n";&#xD;
}&#xD;
&#xD;
sub test3&#xD;
{&#xD;
    my $bm = BoardManager-&gt;new("general");&#xD;
       $bm-&gt;getPageList(1);&#xD;
       $bm-&gt;getPageList(2);&#xD;
}&#xD;
&#xD;
sub test2&#xD;
{&#xD;
    my $cache = Cache-&gt;new('general');&#xD;
    my $hashref = $cache-&gt;readOut();&#xD;
    &#xD;
    my $list = $hashref-&gt;{list};&#xD;
    &#xD;
    my $sum = 0;&#xD;
     &#xD;
    print "======\n";&#xD;
    foreach $row (@$list)&#xD;
    {&#xD;
         $sum += $row-&gt;[1];&#xD;
         print $row-&gt;[0],' = ',$row-&gt;[1],"   #$sum\n";   &#xD;
    }  &#xD;
    print "\nlastID=$hashref-&gt;{lastID}======\n";&#xD;
}&#xD;
&#xD;
sub insertTest&#xD;
{&#xD;
    my $userID = 100;&#xD;
    my $userName = 'test.for.line';&#xD;
    my $subject  = 'new.subject';&#xD;
    my $content  = 'myContent';&#xD;
    &#xD;
    my $bm = BoardManager-&gt;new("general");&#xD;
    &#xD;
    $bm-&gt;insert(99993400000000,$userID,$userName,$subject,$content);&#xD;
       &#xD;
}&#xD;
&#xD;
sub init&#xD;
{&#xD;
    Factory::cacheInit('general');&#xD;
}&#xD;
&#xD;
sub test1&#xD;
{&#xD;
    $hashref={ id=&gt;100,name=&gt;'asheen'};&#xD;
    &#xD;
    while( ($key,$val) = each(%$hashref) )&#xD;
    {&#xD;
        print $key, '&lt;==&gt;',$val,"\n";  &#xD;
    }&#xD;
    &#xD;
    $hash1 = {%$hashref};&#xD;
    &#xD;
    while( ($key,$val) = each(%$hash1) )&#xD;
    {&#xD;
        print $key, '&lt;==&gt;',$val,"\n";  &#xD;
    }&#xD;
}</content>
    <postId>EA8BEBC1-07D1-4133-AE55-AAA18DBF3117</postId>
    <pubDate>2011-08-12T00:00:00-04:00</pubDate>
    <title>test</title>
</post>
