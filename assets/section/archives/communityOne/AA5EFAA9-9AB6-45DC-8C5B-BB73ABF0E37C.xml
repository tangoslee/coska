<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>김경용</author>
    <comments>
        <comment>
            <author>김경환</author>
            <date>2009-07-14T00:00:00-04:00</date>
            <content>최근 몇년동안 RIA와 애자일 방법론에 관심을 가지고 있는데 애자일은 한국에서도 성공한 프로젝트가 곳곳에서 생기면서 SI에서도 적용한 사례가 올라오던데 한국의 고질적인 프로젝트 진행을 보면서 그 병을 치료해줄 희망의 빛이 될거같더군요. 잘 정리된글이라 한눈에 쏙 들어오네요 감사합니다~</content>
        </comment>
    </comments>
    <content>좋은 글이 있어 공유합니다.&#xD;
정말 개발자로 살아가는게 쉽지않다는 걸 느끼면서,,,&#xD;
 &#xD;
&lt;div class="entry"&gt;&#xD;
					&lt;p&gt;&lt;em&gt;If you&amp;#8217;re a developer looking to get ahead in your field (or in some cases, to simply stay employed), this is not a good time to be complacent. Justin James lists the skills you&amp;#8217;ll want to work on now to maximize your future job prospects.&lt;/em&gt;&lt;/p&gt;&#xD;
&lt;hr size="2" /&gt;&#xD;
&lt;p&gt;With the recent changes in the economy, a lot of developers are focused on their short-term job prospects. At the same time, it&amp;#8217;s important to make sure that you get the most bang for your buck when it comes to taking the time and energy to learn new skills. Here is our list of 10 skills you should be learning right now to make sure that your resume is relevant for the next five years. The list is hardly exhaustive, and there are huge swaths of the industry it won&amp;#8217;t cover (mainframe developers, for example). Nonetheless, for average mainstream development, you can&amp;#8217;t go wrong learning at least seven of these skills &amp;#8212; not only to the point where you can talk convincingly about them at a job interview, but actually use them on the job.&lt;/p&gt;&#xD;
&lt;p&gt;&lt;em&gt;Note: This article is also available as a &lt;a href="http://downloads.techrepublic.com.com/abstract.aspx?docid=953015" target="_blank"&gt;PDF download&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xD;
&lt;h2&gt;1: One of the &amp;#8220;Big Three&amp;#8221; (.NET, Java, PHP)&lt;/h2&gt;&#xD;
&lt;p&gt;Unless there is a radical shift in the development world (akin to an asteroid hitting Redmond), most developers will need to know at least one of the Big Three development systems &amp;#8212; .NET (VB.NET or C#), Java, or PHP &amp;#8212; for the near future. It&amp;#8217;s not enough to know the core languages, either. As projects encompass more and more disparate functionality, you&amp;#8217;ll need to know the associated frameworks and libraries more deeply.&lt;/p&gt;&#xD;
&lt;h2&gt;2: Rich Internet Applications (RIAs)&lt;/h2&gt;&#xD;
&lt;p&gt;Love it or hate it, in the last few years, Flash is suddenly being used for more than just animations of politicians singing goofy songs. Flash has also sprouted additional functionality in the form or Flex and AIR. Flash&amp;#8217;s competitors, such as JavaFx and Silverlight, are also upping the ante on features and performance. To make things even more complicated, HTML 5 is incorporating all sorts of RIA functionality, including database connectivity, and putting the formal W3C stamp on AJAX. In the near future, being an RIA pro will be a key resume differentiator.&lt;/p&gt;&#xD;
&lt;h2&gt;3: Web development&lt;/h2&gt;&#xD;
&lt;p&gt;Web development is not going away anytime soon. Many developers have been content to lay back and ignore the Web or to just stick to &amp;#8220;the basics&amp;#8221; their framework provides them with. But companies have been demanding more and more who really know how to work with the underlying technology at a &amp;#8220;hand code&amp;#8221; level. So bone up on JavaScript, CSS, and HTML to succeed over the next five years.&lt;/p&gt;&#xD;
&lt;h2&gt;4: Web services&lt;/h2&gt;&#xD;
&lt;p&gt;REST or SOAP? JSON or XML? While the choices and the answers depend on the project, it&amp;#8217;s getting increasingly difficult to be a developer (even one not writing Web applications) without consuming or creating a Web service. Even areas that used to be ODBC, COM, or RPC domains are now being transitioned to Web services of some variety. Developers who can&amp;#8217;t work with Web services will find themselves relegated to legacy and maintenance roles.&lt;/p&gt;&#xD;
&lt;h2&gt;5: Soft skills&lt;/h2&gt;&#xD;
&lt;p&gt;One trend that has been going for quite some time is the increasing visibility of IT within and outside the enterprise. Developers are being brought into more and more non-development meetings and processes to provide feedback. For example, the CFO can&amp;#8217;t change the accounting rules without working with IT to update the systems. And an operations manager can&amp;#8217;t change a call center process without IT updating the CRM workflow. Likewise, customers often need to work directly with the development teams to make sure that their needs are met. Will every developer need to go to Toastmasters or study &lt;em&gt;How to Win Friends and Influence People&lt;/em&gt;? No. But the developers who do will be much more valuable to their employers &amp;#8212; and highly sought after in the job market.&lt;/p&gt;&#xD;
&lt;h2&gt;6: One dynamic and/or functional programming language&lt;/h2&gt;&#xD;
&lt;p&gt;Languages like Ruby, Python, F#, and Groovy still aren&amp;#8217;t quite mainstream &amp;#8211;  but the ideas in them are. For example, the LINQ system in Microsoft&amp;#8217;s .NET is a direct descendent of functional programming techniques. Both Ruby and Python are becoming hot in some sectors, thanks to the Rails framework and Silverlight, respectively. Learning one of these languages won&amp;#8217;t just improve your resume, though; it will expand your horizons. Every top-flight developer I&amp;#8217;ve met recommends learning at least one dynamic or functional programming language to learn new ways of thinking, and from personal experience, I can tell you that it works.&lt;/p&gt;&#xD;
&lt;h2&gt;7: Agile methodologies&lt;/h2&gt;&#xD;
&lt;p&gt;When Agile first hit mainstream awareness, I was a skeptic, along with many other folks I know. It seemed to be some sort of knee-jerk reaction to tradition, throwing away the controls and standards in favor of anarchy. But as time went on, the ideas behind Agile became both better defined and better expressed. Many shops are either adopting Agile or running proof-of-concept experiments with Agile. While Agile is not the ultimate panacea for project failure, it does indeed have a place on many projects. Developers with a proven track record of understanding and succeeding in Agile environments will be in increasingly high demand over the next few years.&lt;/p&gt;&#xD;
&lt;h2&gt;8: Domain knowledge&lt;/h2&gt;&#xD;
&lt;p&gt;Hand-in-hand with Agile methodologies, development teams are increasingly being viewed as partners in the definition of projects. This means that developers who understand the problem domain are able to contribute to the project in a highly visible, valuable way. With Agile, a developer who can say, &amp;#8220;From here, we can also add this functionality fairly easily, and it will get us a lot of value,&amp;#8221; or &amp;#8220;Gee, that requirement really doesn&amp;#8217;t match the usage patterns our logs show&amp;#8221; will excel. As much as many developers resist the idea of having to know anything about the problem domain at all, it is undeniable that increasing numbers of organizations prefer (if not require) developers to at least understand the basics.&lt;/p&gt;&#xD;
&lt;h2&gt;9: Development &amp;#8220;hygiene&amp;#8221;&lt;/h2&gt;&#xD;
&lt;p&gt;A few years ago, many (if not most) shops did not have access to bug tracking systems, version control, and other such tools; it was just the developers and their IDE of choice. But thanks to the development of new, integrated stacks, like the Microsoft Visual Studio Team System, and the explosion in availability of high quality, open source environments, organizations without these tools are becoming much less common. Developers must know more than just how to check code in and out of source control or how to use the VM system to build test environments. They need to have a rigorous habit of hygiene in place to make sure that they are properly coordinating with their teams. &amp;#8220;Code cowboys&amp;#8221; who store everything on a personal USB drive, don&amp;#8217;t document which changes correspond to which task item, and so on, are unwelcome in more traditional shops and even more unwelcome in Agile environments, which rely on a tight coordination between team members to operate.&lt;/p&gt;&#xD;
&lt;h2&gt;10: Mobile development&lt;/h2&gt;&#xD;
&lt;p&gt;The late 1990s saw Web development rise to mainstream acceptance and then begin to marginalize traditional desktop applications in many areas. In 2008, mobile development left the launch pad, and over the next five years, it will become increasingly important. There are, of course, different approaches to mobile development: Web applications designed to work on mobile devices, RIAs aimed at that market, and applications that run directly on the devices. Regardless of which of these paths you choose, adding mobile development to your skill set will ensure that you are in demand for the future.&lt;/p&gt;&#xD;
&lt;h3&gt;&lt;/h3&gt;&#xD;
&lt;h3&gt;&lt;/h3&gt;&#xD;
&lt;h3&gt;&#xD;
&lt;hr size="2" /&gt;&lt;/h3&gt;&#xD;
&lt;h3&gt;Finally: 10 Things&amp;#8230; the newsletter!&lt;/h3&gt;&#xD;
&lt;p&gt;Get the key facts on a wide range of technologies, techniques, strategies, and skills with the help of the concise need-to-know lists featured in TechRepublic&amp;#8217;s 10 Things newsletter, delivered every Friday. &lt;a href="http://nl.com.com/MiniFormHandler?brand=techrepublic&amp;amp;list_id=e042"&gt;Automatically sign up today.&lt;/a&gt;&lt;/p&gt;&#xD;
					&#xD;
				&lt;/div&gt;&lt;!-- /entry --&gt;</content>
    <postId>AA5EFAA9-9AB6-45DC-8C5B-BB73ABF0E37C</postId>
    <pubDate>2009-07-12T00:00:00-04:00</pubDate>
    <title>10 skills developers will need in the next five years</title>
</post>
