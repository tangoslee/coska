<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>김민</author>
    <comments/>
    <content>Restrictions on EJB components &#xD;
&#xD;
The EJB developer must not program any systems-level services into the EJB component implementation code. EJB component providers/developers should be aware of and strictly follow certain restrictions in the interest of developing reliable and portable EJB components. &#xD;
&#xD;
The following is a list of Java features that you should avoid, hence restricting their use in your EJB components' implementation code: &#xD;
&#xD;
&#xD;
Using static, nonfinal fields. Declaring all static fields in the EJB component as final is recommended. That ensures consistent runtime semantics so that EJB containers have the flexibility to distribute instances across multiple JVMs. &#xD;
&#xD;
Using thread synchronization primitives to synchronize multiple instance execution. By avoiding that feature, you allow the EJB container flexibility to distribute instances across multiple JVMs. &#xD;
&#xD;
Using AWT functionality for keyboard input/display output. That restriction exists because server-side business components are meant to provide business functionality that excludes user interface and keyboard I/O functionality. &#xD;
&#xD;
Using file access/java.io operations. EJB business components are meant to use resource managers such as JDBC to store and retrieve application data rather than the file system APIs. Also, deployment tools provide the facility for storing environment entry elements (env-entry) into the deployment descriptor, so that EJB components can perform environment entry lookups in a standardized manner via the environment-naming context. Thus, the need to use file system-based property files is mostly eliminated. &#xD;
&#xD;
Listening to or accepting socket connections, or using a socket for multicast. EJB components are not meant to provide network socket server functionality; however, the architecture lets EJB components act as a socket client or RMI clients and thus communicate with code outside the container's managed environment. &#xD;
&#xD;
Using the Reflection API to query classes that are not otherwise accessible to the EJB component due to Java's security rules. That restriction enforces Java platform security. &#xD;
&#xD;
Attempting to create or obtain a class loader, set or create a new security manager, stop the JVM, change the input, output, and error streams. That restriction enforces security and maintains the EJB container's ability to manage the runtime environment. &#xD;
&#xD;
Setting the socket factory used by the URL's ServerSocket, Socket, or stream handler. By avoiding that feature, you also enforce security and maintain the EJB container's ability to manage the runtime environment. &#xD;
&#xD;
Starting, stopping, or managing threads in any way. That restriction eliminates the possibility of conflicts with the EJB container's responsibilities of managing locking, threading, and concurrency issues. &#xD;
By restricting your use of features 10-16, you aim to plug potential security holes: &#xD;
&#xD;
&#xD;
Reading or writing a file descriptor directly. &#xD;
&#xD;
Obtaining security policy information for a particular code source. &#xD;
&#xD;
Loading native libraries. &#xD;
&#xD;
Accessing packages and classes that the usual rules of Java make unavailable. &#xD;
&#xD;
Defining a class in a package. &#xD;
&#xD;
Accessing or modifying security configuration objects (Policy, Security, Provider, Signer, and Identity). &#xD;
&#xD;
Using the subclass and object substitution features of the Java Serialization protocol. &#xD;
&#xD;
Passing the this reference as an argument or returning the this reference as a result. Instead, you must use the result of the getEJBObject() available in SessionContext or EntityContext. &#xD;
</content>
    <postId>401F0A61-E91A-4178-9D5D-326547300DE5</postId>
    <pubDate>2002-02-01T00:00:00-05:00</pubDate>
    <title>Restrictions on EJB components </title>
</post>
