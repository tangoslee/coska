<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>Bran</author>
    <comments/>
    <content>어쩔 수 없이 우리말을 쓰게 되네요. ^^;&#xD;
먼저 이성기님 같은 고수님께 감히 제가 한말씀+여러말씀 올리기 되어 송구스럽습니다. 소견이오니 귀엽게 봐주세요.&#xD;
&#xD;
예전에도 많이 본 이성기님의 글을 다시 조목조목 적어 나름대로의 의견을 개진할까 합니다.&#xD;
&#xD;
&#xD;
distributed environment라는 것을 자세히 보면 application distributed or server platform distributed인지를 구분해야 할것이다. EJB는 application distributed 상황에서 필요한데, &#xD;
이것을 multiple server이지만, 모든 component가 하나의 application에서 돌고 있고, 그 application이 한 server에서 운영된다면 굳이 RMI를 바탕에 둔 EJB를 쓸필요가 없다. &#xD;
&lt;br&gt;&lt;font color=blue&gt;맞습니다. EJB는 기본적으로 resource가 분산된 환경하에서 운용될 것을 예상하고 설계되었습니다. 여기엔 하드웨어 뿐 아니라 application, DB, container들이 해당되기도 합니다.&#xD;
또한 조심해야 할 것은 EJB에서 말하는 Tier인데, 흔히 Client Tier, Web Tier, EJB Tier등으로 나누어 두었죠. 그러나 분산 환경하에서는 client의 물리적 위치는 server와 동일할 수 있으며 client는 다시 server로 role을 가지게 될 수 있습니다.&lt;br&gt;&#xD;
RMI에서 server side는 stub과 skeleton이 모두 있듯이 말이죠.&#xD;
따라서 multiple servers, but all components in one application이라고 하신 부분에 대해 저는 이해할 수가 없습니다. 왜 그런 구조로 시스템을 구성했는지 부터 말이죠. 단일한 application으로 분산처리를 하려는 것은 무리입니다.&#xD;
EJB는 이런 경우 적용하라고 만든 것은 아니겠죠?&#xD;
&lt;/font&gt;&#xD;
&#xD;
Sun에서 보여준 EJB architecture는 규모가 큰 enterprise환경을 의미한다. 내가 볼때, EJB architecture는 Java로 server side application을 만들수 있다는 가능성을 보여준 것이지, server에서 Java program을 만드는 모든 회사에서 선택해야 할것이라고 보지는 않는다. 즉, 그런 heavy architecture를 사용해야하는 situation이 있는것이다. &#xD;
&lt;br&gt;&lt;font color=green&gt;&#xD;
EJB는 분명 기존의 웹개발에 비해 무거운 구조임은 확실합니다. 그러나, 대부분의 enterprise application이 server side에서 돌아가고 있음은 자명함에도 불구하고 실제 EJB를 적용해서 서비스하는 회사는 제한되어 있습니다. 예를 들어 금융기관(은행, 증권, 보험)에선 앞다투어 이를 도입하려고 합니다. 그들은 하나 같이 EJB의 장점으로 안정성과 유지보수의 간편성, 추가 개발 용이함 등을 꼽고 있습니다.&#xD;
&lt;/font&gt;&#xD;
&#xD;
또 다른 EJB의 문제는 유씨의 글에서 처럼, 개발이 용이하다는 것이 아니라 복잡하다는 것이다. EJB remote interface, home interface, EJB bean으로 나뉘어지는 spec 자체가 일반 초보또는 중급자바기술자들이 이해하기가 쉽지 않고, program이 완성되고 나서도 debugging이 골치 아파진다. Simple Java bean과는 달리 EJB는 주로 IDE에 의존을 많이하게 되는데, EJB business logic을 programming 하고 난다음에 deployment descriptor setup, EJB registration과정이 복잡하여 시간이 많이 소요된다. &#xD;
&lt;br&gt;&lt;font color=purple&gt;&#xD;
이 점은 저랑 조금 의견이 다른 부분이긴 합니다. 기존 방식대로 개발해 온 개발자는 EJB 교육을 받고나서 한숨을 쉽니다. 왜일까요? 뭔소리를 하는지 몰라서일까요? 아닙니다. 할 일이 너무도 많다고 생각해서 입니다. &#xD;
Sun은 EJB의 개발에서 서비스까지 크게 3가지 단계를 나누어 Role 분배를 할 것을 제안하고 있습니다. 이는 Bean Provider, Assembler, Deployer로 나눠지죠. 만약 이러한 Role대로 업무 분장을 제대로만 하게 되면 각 개인은 일하는 데에 어려움을 느끼진 않을 것입니다. 그러나 이성기님이나 저를 포함한 대부분의 사람들은 이 세가지 역할을 모두 수행하게 될 것이라고 생각하고 있으며, 심지어 Architect 역할까지 해야만 하는 현실 때문입니다. 모든 사람이 모든 걸 다 알아야 하는 것은 아닌가 회의를 느끼게 되는거죠. 글쎄요... 그래야만 한다면 더 이상 언급할 말씀이 없게 되네요. 하여간 EJB Architect는 국내에서도 몇 명 안된다고 알고 있을 정도로 고급 기술자는 드뭅니다.&#xD;
또, 디버깅과 Deploy에 애를 많이 먹는다고 말씀하셨는데, 요즘 각 Vendor들이 제공하는 EJB개발, Deployment Tool들은 막강한 기능을 갖고 있습니다. 두려워할 필요는 없다고 봅니다. 물론 j2sdkee, jdk와 에디터만으로 개발하신다면 개발 기간은 이에 비해 상당히 늘어날 게 당연합니다.&#xD;
&lt;/font&gt;&#xD;
&#xD;
가장 심각한 EJB based program의 문제는 바로 performance이다. 예를 들어 Hello World를 하나 화면에 보여주기위해서 15개의 object이 생성되어야 한다는 글도 읽은 적이 있다. 따라서 server platform의 CPU speed, memory size등이 powerful하지 않고서는 감당하기가 힘들다. 따라서 동시에 다수가 접속해야하는 e-commerce에서는 현재의 EJB architecture가 어떤식으로 라도 변형이 되어야 한다고 본다. &#xD;
&lt;br&gt;&lt;font color=brown&gt;&#xD;
Performance는 단일 어플리케이션과 서버에서 운용될 경우 보다, 분명 떨어집니다. 그도 그럴 것이 일반 웹 시스템 환경과 달리 JNDI, JMS, Object Remote Reference 등을 가지고 운용되기 때문입니다. 이런 시스템은 앞서 언급한 대로 EJB? 오 노~ 쓰지 마시라고 저도 강력히 주장합니다.&#xD;
EJB 공부를 해보신 분은 알겠지만, 이성기님의 말씀대로 HelloWorld 예제를 실행하기 위해 최소 11번의 step이 내부적으로 돌게 됩니다. 당연히 기존 request, object handle, responce등으로 끝내는 프로그램과는 천지차이입니다. 그러나 performance보다 더 중요한 문제를 해결하기 위해 CORBA, RMI,  EJB가 생겨났다고 생각하시길 바랍니다. 최고의 performance가 곧 최고의 시스템은 아닌거죠.&#xD;
그리고 15개의 object가 필요하다고 하셨는데 그게 뭔지 알려주실 수 없는지요.&#xD;
제 생각엔 우선 작성해야 할 것으로...&#xD;
- client 프로그램 1개&#xD;
- Home Interface 1개&#xD;
- EJB interface 1개&#xD;
- EB 1개&#xD;
&#xD;
이렇게 총 4개의 java 파일을 만들어야 하고요, Deploy 후에는 실행 시 생성되는 것으로...&#xD;
- client 프로그램 1&#xD;
- client Home stub 1&#xD;
- client EJB stub 1&#xD;
- Home object 1&#xD;
- EJB object 1&#xD;
- EB instance 1&#xD;
- Home stub 1&#xD;
- Home skeleton 1&#xD;
- EJB stub 1&#xD;
- EJB skeleton 1&#xD;
이렇게 총 10개 아닌가요? 이건 제가 틀릴 수도 있습니다만.&#xD;
&lt;/font&gt;&#xD;
&#xD;
또 하나 유씨가 언급하지 못한 것은 server side objects들간에 EJB화, None EJB화하는 비율조정이다. UML로 design한 모든 class를 EJB로 변경하고 나면, 모든 object이 home , remote interface, RMI라는 장비를 달고 다니게 됨으로 비효율적인 system이 되고 만다. 반드시 remote access가 되어야 할 object만 EJB로 하고, Session EJB에 의해서 불려지는 Model에 해당하는 object은 pure Java object을 사용할 수 있다. 이런 점에서 현재의 EJB architecture의 guide line 이 없는 형편이다. &#xD;
&lt;br&gt;&lt;font color=red&gt;&#xD;
제가 만약 어떤 시스템을 만든다면 모두 EJB로 만든다는 경우는 없을 겁니다. Session, Entity Bean들은 경우에 따라 한정적으로 사용하고 상당 부분은 EB와 Helper Class들로 채울 예정입니다. EJB만으로 돌아가는 시스템은 물론 현실성 없은 이야기고요. 특별한 가이드라인은 아직 저도 못봤습니다.&#xD;
&lt;/font&gt;&#xD;
&#xD;
&lt;font color=blue&gt;&#xD;
EJB는 제 개인 생각에 EC에 있어서 만큼은 best solution이라고 생각하진 않습니다. 차라리 XML, JSP, Servlet으로 개발하는 게 더 쉬울지도 모르겠습니다. 그러나, EJB로 개발된 시스템은 이후 발생하는 Business Model에 탄력적으로 대응할 수 있을 거라고 생각합니다. 또 유지보수도 원활할 것으로 예측합니다.&#xD;
우리 회원 모두에게 항상 새로운 뭔가가 나올 때 처음엔 그 긍정적인 면을 많이 보지 않고는 절대 그 기술을 터득할 수 없으며, 다 알게 되었다 싶을 때 부정적인 면을 보기 시작하셨으면 바래봅니다.&#xD;
&#xD;
나중에 뵙게 되면 더 좋은 이야기 많이 나누길 기대하겠습니다.&#xD;
&lt;/font&gt;</content>
    <postId>5DC5594C-41EF-4E10-9538-FF0324E53057</postId>
    <pubDate>2001-04-20T00:00:00-04:00</pubDate>
    <title>ROUND3 Why we think of EJBs.</title>
</post>
