<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>이성기</author>
    <comments/>
    <content>OOP 과정개설 &#xD;
&#xD;
(제 4회 강좌는 오는 3월24일 열릴 예정입니다. 그 사이에 변동이 있을수도 &#xD;
있으니 이 게시판을 수시로 확인바랍니다. - 제목에 기재 - . &#xD;
오는 3월 8일 7시에 Mississauga Bus Terminal앞 Chapters starbucks coffee shop에서 Object기본을 노무현씨에게 알려드립니다. 가입한 분중에서 관심있는 분은 참석하셔도 좋습니다. )&#xD;
&#xD;
많은 사람들이 자바를 배우려 하고 있고, 별도의 시간을 내어 독학하고 &#xD;
있습니다. 하지만, 자바를 하는 것이 어떤이들에게는 참 어렵게 느껴집니다. &#xD;
제가 보기에는 자바는 근본적으로 두 부분의 지식을 요하고 있는데, &#xD;
하나는 Internet 전반의 기초지식이고 또하나는 Object Orient Programming &#xD;
의 개념인것 같습니다. &#xD;
&#xD;
자바를 독학또는 학원등을 다니며 공부했으나, OOP의 개념이 완전히 &#xD;
이해가 안되어 답답한 분들을 대상으로 약 4회에 걸쳐(잠정적임) &#xD;
실전연습과정을 통해서 기존의 Flow/Structure방식의 설계방법에 &#xD;
익숙해져 있거나(현재에 코볼이나 RPG를 사용하는 분들), 별도의 개발경험이 &#xD;
없는 분들에 맞추어 OOP적 사고 방식이 무었인지 배우는 시간을 마련하려고 &#xD;
합니다. Java를 독학하고 있는 한 분의 부탁으로 OOP 교습을 하기로 했습&#xD;
니다. &#xD;
&#xD;
이 과정은 유료입니다. &#xD;
&#xD;
진행방식 : &#xD;
  1. 이 게시판을 통하거나 E-mail을 통해서 Business Requirement를 서술체로 정리하여 문제를 알려드립니다. &#xD;
  2. 이에 대한 Class diagram을 각자 만들어 옵니다. &#xD;
  3. 각자가 만들어온 Class diagram, method, relationship등을 검토하여 &#xD;
     OOP의 관점에서 토의과정을 거쳐 수정합니다. &#xD;
  4. 시간여유가 있는 분은 Java program으로 전환할 수도 있지만, 이과정은 &#xD;
     Java를 배우는 과정이 아니라 순수하게 OOP적 사고방식을 배우는 시간이  라, 디자인결과만 중심으로 다룹니다. &#xD;
  5. 반드시 숙제를 해오셔야 합니다. 그리고 자신의 디자인의 사유를 남들에게 설명할 수 있어야 합니다. &#xD;
&#xD;
목표 :&#xD;
  1. 이 과정을 통하여 실제상황에서 프로그램 업무가 활당되었을때, &#xD;
     OO design화한 후에 Java coding에 들어갈 수 있는 자신감을 가지게 한다. &#xD;
&#xD;
( 이 과정은 자바프로그램 과정이 아니므로 자바 그 자체에 대한 내용은 &#xD;
 가능한 한 축소할 것입니다. OOP사고는 단시일에 이루어 지는 것이 아니고 &#xD;
 약, 1년은 꾸준히 Java등과 같은 OOP language를 꾸준히 해야 감이 잡히는 것입니다. 따라서 자바를 공부하려는 사람, 또는 자바를 6개월이상 했지만, OOP&#xD;
의 개념이 안잡혀서 진도가 제대로 나가지 않는 분들을 위해, 다소 사고전환에 &#xD;
도움을 주기위한 것에 목표를 두겠습니다. )  &#xD;
&#xD;
과정상의 토픽 :&#xD;
  1. Class vs Object&#xD;
  2. Inheritance&#xD;
  3. Polymorphism&#xD;
  4. Method reuse&#xD;
  5. Interface&#xD;
  6. Object instance and static object&#xD;
&#xD;
Reference book:&#xD;
  1. Object-Oriented Software Design and Construction with Java&#xD;
by Author Dennis Kafura &#xD;
( http://www.chapters.ca/books/details/default.asp?mscssid=06SPG4QAN0MT9PVFKENEN0RQ0XUU6R53&amp;WSID=1302EF6049E4384143A19ACD4DDB8D042F900012&amp;ISBN=013011264X )&#xD;
  2. Designing Object-Oriented Software&#xD;
by Author Rebecca Brock &#xD;
( http://www.chapters.ca/books/details/default.asp?mscssid=06SPG4QAN0MT9PVFKENEN0RQ0XUU6R53&amp;WSID=1302EF6049E4384143A19ACD4DDB8D042F900012&amp;ISBN=0136298257 ) &#xD;
&#xD;
 &#xD;
The 4th class(last class of first session)&#xD;
일시 : 2001.3.24 토요일, 오전 9:30분  - 11:45분 (215 분간) - &#xD;
강사 : 이성기 &#xD;
비용 : Humber college등과 같은 곳 Java관련 과정의 수강료를 기준으로 합니다. (4회 $ 100, 참석자들의 조건과 저의 상황에 맞추어 &#xD;
1주일에 2회가 될수도 있고, 한달을 넘어서 다음단계로 나갈 수도 있습니다. )&#xD;
&#xD;
장소 : 이성기 자택 &#xD;
181 Anthony Ave Mississauga (close to Hurontario St and Bristol Rd East) &#xD;
&#xD;
Bus/Train taker - 버스로 오시는 분은 &#xD;
일단, 에토비콕의   Islington station에서 내려, 미시사가 Square One Bus Terminal로 오는 버스를 잡아타시고, 터미날에 도착후에 Hurontario North방향으로 가는 19번 버스를 타세요. 약 5분정도 가다보면 Bristol Road를 만나기전에 왼편에 맥도널도가 있는 작은 Sandalwood sqaure라는 곳에서 내리세요. &#xD;
운전수에게 미리 말해서 내리는 시점을 숙지하세요. &#xD;
그리고 다음 약도를 보면서 걸어오면 됩니다. 약 4분 거리. &#xD;
핸드폰이 있다면 전화를 주세요. &#xD;
&#xD;
또다른 방법으로 Union Station에서 오려면 Go Bus를 타고, Mississauga Cooksville station에서 내려서 어떤 분과 차로 동승해서 오는 방법이 있습니다. (자세한 사항은 편지주세요)&#xD;
&#xD;
아래 약도 참조 &#xD;
	&lt;IMG SRC="http://webhome.idirect.com/~scottl/roadmap.gif" ALIGN=BOTTOM ALT=""&gt;&#xD;
&#xD;
준비물 : 필기도구 (많은 연습종이, 연필, 지우게 )&#xD;
&#xD;
참석희망자 : E-mail을 보내시고, 여기에 기입도 해주세요. &#xD;
scottl@idirect.com and slee@edulinx.ca (두 군데로 동시에 보내기 바람)&#xD;
&#xD;
---------------여기에 성함을 남겨주십시요 (마감은 2월 23일까지)-----&#xD;
(수정암호는 1번)&#xD;
             &#xD;
1. 이중헌 (joenivy@yahoo.ca)&#xD;
2. 황희연 (leerufina@hotmail.com)&#xD;
3. 이인석 (thomasLee101@hotmail.com)&#xD;
4. 황선용 (seanhwang@mail.com)&#xD;
5. 강윤정 (kahngj@sx.com)&#xD;
6. 유무열 (ryu4316@hotmail.com)&#xD;
7. 김영미 (jenimkim@yahoo.ca)&#xD;
8. 오광태 (이메일주소를 적어주시고요. 전화번호연락처도 보내주세요.)&#xD;
9. 노우현 (estherrho@hanmail.net)&#xD;
10. &#xD;
11.&#xD;
&#xD;
(일단은 인원제한은 없습니다. 10명을 넘지 않는 선이 효과적이리라 봅니다.)&#xD;
1. Why OOP ? &#xD;
At this class, I will focus the difference between OOP and structured/procedual programming with the bank account demo. &#xD;
&#xD;
Reference article from internet. &#xD;
"Object-Oriented Computing - What's the Big Deal?"&#xD;
( http://www.firststep.com.au/education/solid_ground/oo.html )&#xD;
"The Object-Oriented Advantage"&#xD;
( ttp://www.firststep.com.au/education/solid_ground/oo_dev.html )&#xD;
"What is Object-Oriented Software?" - &#xD;
( http://catalog.com/softinfo/objects.html )&#xD;
&#xD;
&#xD;
2. What is Encapsulation ? (Feb 23, Friday 8 pm class)&#xD;
We will discuss an more detail on encapsulation and class reuse. &#xD;
&lt;font color=red&gt;&#xD;
3. What is Inheritance ?&#xD;
&lt;/font&gt;&#xD;
http://java.sun.com/docs/books/tutorial/java/concepts/index.html&#xD;
4. What is an Interface ?&#xD;
&#xD;
http://java.sun.com/docs/books/tutorial/java/concepts/index.html&#xD;
&#xD;
&#xD;
Assignment # 1 (Feb 17, 01)===============================&#xD;
&#xD;
If you go this link, you can tour the demo of internet banking.  &#xD;
http://www.ingdirect.ca/Cust/Tour.html&#xD;
&#xD;
If you are asked to build a Java program for this demo, how do you  start Class design?&#xD;
&#xD;
Based on the scenario, draw class diagram and basic method to be attached. Don't worry about web presentation and database access portion. Just assume this is DOS prompt application. &#xD;
&#xD;
Draw your picture on white paper with pencil and bring them on Feb 17's meeting. If you can not make class diagram, you may draw flow chart or structured diagram. We can start from there. &#xD;
&#xD;
If you are COBOL, RPG programmer, how do you start? Then try to change the diagram to OOP. &#xD;
&#xD;
If you don't bring assigment, there is no gain from me.&#xD;
&#xD;
Rational Rose's UML class diagram is expected from you. If you want to install it, please write your name here. &#xD;
( you may download from &#xD;
http://www.rational.com/uml/resources/practice_uml/index.jsp)&#xD;
Just draw basic class relation ship with method. &#xD;
And send to me by email. &#xD;
No need to abide by the Class diagram rule. &#xD;
&#xD;
You can write the class name and methods like this. &#xD;
&lt;&lt;  sample answer &gt;&gt;&#xD;
class Client&#xD;
--------------&#xD;
name&#xD;
address&#xD;
amount&#xD;
-----method ---&#xD;
getName()&#xD;
setName()&#xD;
&#xD;
class Security&#xD;
----------------&#xD;
userid&#xD;
password&#xD;
---- method ---&#xD;
verifyUserID()&#xD;
verifyPassword()&#xD;
&#xD;
Main module&#xD;
-----------&#xD;
read user id and password(Security class)&#xD;
call security to find the user id...&#xD;
&#xD;
&#xD;
write down your name after reading this ..&#xD;
------------------------------------------------&#xD;
이인석 &#xD;
이중헌 &#xD;
김영미 &#xD;
황희연 &#xD;
류무열&#xD;
&#xD;
(password 1)&#xD;
&#xD;
&#xD;
Assignment # 2 (Feb 23, 01)===============================&#xD;
&#xD;
For 8시 - 9:30 시 Feb 23 (금요일 ) class, &#xD;
&#xD;
Make a class diagram for this requirement. &#xD;
&#xD;
Title : WebFundManager&#xD;
&#xD;
&lt;letter from client&gt;&#xD;
Hello, Jennifer.&#xD;
I as banker wants to have an application for internet banking&#xD;
&#xD;
Here are some main menu&#xD;
1. Login &gt; (if you didn't do on last class.&#xD;
2. Change Password &gt; &#xD;
3. My Account - &gt; balance check ,  Deposit ,  Withdrawal, transaction history&#xD;
4. Bill Payment&#xD;
I want to see some simple prototype class diagram. No need to implement detail layout. If some requirement is obscure, use your common sense. &#xD;
&#xD;
Thanks&#xD;
Robert Kiyosaki&#xD;
ps: You can see some demo in http://www.pcbanking.cibc.com/english/servlet/SignOn for pay bill or password change. All other activities are assumed same as ING direct sample we have seen on assignment 1. Just use your common sense for understanding requirement.&#xD;
&#xD;
&#xD;
Think about how to reuse the classes from Assignment 1.&#xD;
write down your name after reading this ..&#xD;
------------------------------------------------&#xD;
노우현&#xD;
&#xD;
pass is 1&#xD;
&lt;font color = black&gt;이 숙제는 오는 2월 22일까지 제출해 주세요. 그러면 &#xD;
이에대한 평가를 해서 본인들에게 돌려주고 강의시간에도 설명을 하겠습니다. &#xD;
또한 강의 당일날 다른 분들이 본인의 숙제를 볼수 있게, 본인의 성함을 위에 적어 9장 복사를 해오세요. 그러면 토의시간에 상대방의 그림을 보면서 진행할수 있습니다. &#xD;
이 숙제는 강제성이 없습니다. 하지만, 본인이 작성한 설계의 문제점을 상세히 알고 싶은 분은 미리 이메일로 보내주세요. Rational Rose MDL file로 보내도 되고, text file로 작성한 것을 보내도 됩니다. 제가 미리 검토할 시간을 가지려고 합니다. 보낼때는 slee@edulinx.ca, scottl@idirect.com 으로 보내주세요.  &lt;/font&gt;&#xD;
&#xD;
&#xD;
* Assignment # 2  ( 마감 Mar 2, 01)===============================&#xD;
* 수업 : 3월 3일 오전 9:30 분 -11 시 &#xD;
* &#xD;
* Hello, Jennifer.&#xD;
* Please write a diagram and pseudo code for main modules &#xD;
* and send your report to me by E-mail and bring 10 copies for other members&#xD;
* on Mar x Feb, Friday 8 pm.&#xD;
* ------------------------------------------&#xD;
&lt; letter from customer &gt;&#xD;
In my new house, there is a furnice and humidifier at basement. &#xD;
I'd like to have a remote controller for this facility from my computer. What I expect is an internet connection to these devices. The application should read current temperature and humidity from the devices and display on screen. There is two buttons - increase, decrease - for each device. If I click the 'increase' button on temperature, it will increase the temperature by one degree. Samething happens on humidity.&#xD;
I don't care the interface will be swing, applet or html. &#xD;
(Project manager's note: You don't need to worry about interface. you can make a prototype prgram running on DOS. Oh!, you have a time to create Swing or JSP!. Fine, go ahead, but not mandatory) &#xD;
&#xD;
To read data from the devices, just use random number. For example, you can initialize the temperature with 20 degree and the humidity on 50%. Then it moves up and down according to user's action on 'up' and 'down' buttons. &#xD;
&#xD;
Can you make a class diagram and main control module (pseudo code if you are busy, main() java application if you have time, &#xD;
or JSP or swing if you want to be a number 1 student)&#xD;
&#xD;
Hint: If you use 'inheritance' and 'polymorphism' for this requirment, I will hire you to my NewCo as Java developer.&#xD;
&#xD;
&#xD;
* 이 숙제는 오는 3 월 2 일까지 제출해 주세요. 그러면 &#xD;
* 이에대한 평가를 해서 본인들에게 돌려주고 강의시간에도 설명을 하겠습니다. &#xD;
* 이 숙제는 강제성이 없습니다. 하지만, 본인이 작성한 설계의 문제점을 상세히 알고 싶은 분은 미리 이메일로 보내주세요. Rational Rose MDL file로 보내도 되고, text file로 작성한 것을 보내도 됩니다. 제가 미리 검토할 시간을 가지려고 합니다. 보낼때는 slee@edulinx.ca, scottl@idirect.com 으로 보내주세요. &#xD;
* &#xD;
* Thanks&#xD;
* Robert Kiyosaki&#xD;
* &#xD;
* write your name after reading.&#xD;
* ---------------------------------&#xD;
* &#xD;
* password 1&#xD;
* &#xD;
* &#xD;
이중헌 (joenivy@yahoo.ca)905-306-1887&#xD;
Sample answer =&gt; &#xD;
여기를 찾아보세요. &#xD;
http://webhome.idirect.com/~scottl/java/Weather/ &#xD;
Assignment # 4 (Mar 23, 01)===============================&#xD;
&#xD;
이성기  &#xD;
&#xD;
&lt;letter from business analyst&gt;&#xD;
Hello, Jennifer.&#xD;
Please write a diagram and pseudo code for main modules for below shop&#xD;
and send your report to me by E-mail and bring 10 copies for other members&#xD;
on Mar 2 Feb, Friday 8 pm.&#xD;
------------------------------------------&#xD;
&lt;&lt; High level Scenarios &gt;&gt;&#xD;
The following scenario demonstrate a few key ways the pet store application could be used by describing a user's view of interactions with the system.&#xD;
&#xD;
The sample application could support three very different kind of scenarios. First, there is the shopping interface described earlier, that allows shoppers to buy items online. Second, there is an administration interface for carrying out store administration activities. Finally, there is a business-to-business interface through which the store can interact with suppliers. The scenarios in this section demonstrate all three types of interaction, while the remainder of this chapter focuses mainly on the shopping interactions.&#xD;
&#xD;
&lt;&lt; 1.0  Shopping Scenario &gt;&gt;&#xD;
(Scott Lee: You don't need to make user interface for this application. First output will be assumed on DOS prompt command level application, standalone Java application, no web, no RDB)&#xD;
&#xD;
The primary function of the sample application is to provide an interface where customers can browse through and purchase items. This shopping interaction typically starts with the customer's visit to the application home page and ends when the customer orders from the site:&#xD;
&#xD;
A customer browse through the catalog or search for products through some search interface. (DOS search)&#xD;
At any point during the whole interaction, the customer can sign into the application by providing an account identifier and a password. When the customer signs in, the application can recall information about the customer such as a preferred shipping address and billing information, buying preferences, and so on. Customers who don't have an account can create one at any time by providing an account identifier, customer name, password and some other personal details. &#xD;
The customer browses through the catalog. The customer can select a category to see a list of all the products in that category. For example, the customer can select the category Cats to view all cats that the pet store sells. Alternatively, the customer can search for products using one or more keywords describing the product. For example searching with keywords Persian and mammal might bring a list of Persian dogs and cats. &#xD;
The customer selects a particular product in the list. Now, the application displays detailed information about the selected product. The description and image of the product is shown along with pricing information. When there are several variants of the same product, each variant is shown as a separate item. For example, when showing details about an African parakeet, the items could be large male African parakeet, small female African parakeet, and so on. &#xD;
The customer decides to purchase a particular item and clicks a button to add the item to the shopping cart. The customer may continue shopping, adding more items to the shopping cart. As the customer browses through the catalog, the application remembers all the items placed in the cart. The customer can recall the shopping cart at any time during the interaction to review or revise the contents of the cart. &#xD;
The customer can choose to order the items in the shopping cart at any time. This is called checking out. A checkout button is presented along with the shopping cart. If the customer is not signed in, the application brings up a signin/signup screen. Here the customer can sign in, or set up a new account, if they don't have one. After the customer is signed in, order processing continues as before. &#xD;
When the customer asks to check out, the application presents a summary of all items that would be ordered along with their costs. At this point the customer must confirm the order. &#xD;
When the customer confirms the order, the application begins to gather shipping and billing information for the order. First it presents a form, where the customer can enter shipping information. If the customer is signed into the application at this time, the form comes up filled in with the customer's preferred shipping address. &#xD;
When the customer enters the shipping address, the customer is asked to enter billing information, including credit card details and a billing address. If the customer is signed in, the application recalls these details and the forms are returned filled in. &#xD;
&#xD;
Finally the customer confirms the order and the application accepts the order for delivery. A receipt including a unique order number and other order details is presented to the customer. The application validates credit card and other information, updates its inventory database, and optionally sends a confirmation message via email. &#xD;
&#xD;
This is a fairly typical shopping scenario. Some variations are possible, especially in the way the catalog is presented to the customer. For instance, the application could provide specialized lists of items such as best-sellers, or discounts on certain items. There may also be variations in order processing, such as reducing the steps for making an order when the customer is already signed in. The application developer needs to design the application to support these variations, as well as others that might arise as the application evolves.&#xD;
&#xD;
Although this scenario presents the application from a single customer's point of view.&#xD;
&#xD;
I want to see some simple prototype class diagram. No need to implement detail layout. If some requirement is obscure, use your common sense. &#xD;
&#xD;
Thanks&#xD;
Robert Kiyosaki&#xD;
ps: You can see some demo in http://www.petsmart.com/.&#xD;
&#xD;
&#xD;
Think about how to reuse the classes from Assignment 1.&#xD;
write down your name after reading this ..&#xD;
------------------------------------------------&#xD;
&#xD;
pass is 1&#xD;
&lt;font color = black&gt;이 숙제는 오는 3 월 23일까지 제출해 주세요. 그러면 &#xD;
이에대한 평가를 해서 본인들에게 돌려주고 강의시간에도 설명을 하겠습니다. &#xD;
이 숙제는 강제성이 없습니다. 하지만, 본인이 작성한 설계의 문제점을 상세히 알고 싶은 분은 미리 이메일로 보내주세요. Rational Rose MDL file로 보내도 되고, text file로 작성한 것을 보내도 됩니다. 제가 미리 검토할 시간을 가지려고 합니다. 보낼때는 slee@edulinx.ca, scottl@idirect.com 으로 보내주세요.  &lt;/font&gt;&#xD;
Thanks&#xD;
Robert Kiyosaki&#xD;
&#xD;
write your name after reading.&#xD;
---------------------------------&#xD;
&#xD;
이중헌 (joenivy@yahoo.ca)905-306-1887&#xD;
password 1&#xD;
&#xD;
Assignment # 5  (Mar x, 01) Not decided yet ===============================&#xD;
&#xD;
&#xD;
Hello, Jennifer.&#xD;
Please write a diagram and pseudo code for main modules for below shop&#xD;
and send your report to me by E-mail and bring 10 copies for other members&#xD;
on Mar 9 Feb, Friday 8 pm.&#xD;
------------------------------------------&#xD;
&#xD;
&lt;&lt; Administration Scenario  &gt;&gt;&#xD;
The pet store application does most of the administrative work of managing orders, creating new accounts, and other details without manual intervention. However, there are some tasks where manual intervention is desirable or required. These are often administration tasks, such as managing the inventory, reestablishing forgotten customer passwords, rolling back orders, handling returned merchandise, and processing and shipping of orders.&#xD;
&#xD;
The administration interface of the pet store application could use a Visual Basic client running in a Microsoft desktop application such as Microsoft Excel. The application must be designed to support more than one administrator simultaneously using the administration interface.&#xD;
&#xD;
The administration scenario models inventory management, where an administrator updates inventory when new shipments come in:&#xD;
&#xD;
The administrator starts up the shopping client application. When the client starts, it asks the administrator to sign on to the system using a user name and password. The administrator enters information for one of the accounts that has administration privileges. &#xD;
The client application then presents a list of products in the catalog, perhaps in order by category, with the product details such as description and name also shown. &#xD;
The administrator clicks a product to see the items as well as their inventory status. For any item displayed, the administrator can modify the inventory status. &#xD;
The administrator clicks an update button, causing the changes to inventory status to be committed to the inventory database. &#xD;
10.1.1.3 Business-to-Business Scenario &#xD;
Businesses often have a need to interact with other businesses through their custom applications. For example, a retailer needs to work with suppliers to procure inventory, with shipping agencies for managing shipments, and with billing agencies for handling its billing needs. In fact, significant pieces of the application such as inventory control could themselves be off-loaded to a separate business. &#xD;
&#xD;
It would be desirable to have some of these interactions be automated. When businesses are tightly coordinated, perhaps under the same ownership or administration, these interactions could be closely-coupled. In such interactions, businesses expose their entities and data to each other. However, most of the time it is desirable to keep the businesses loosely-coupled. Here businesses interact by passing asynchronous messages to each other. This messaging approach also models the real world more closely, where businesses work together by sending faxes and packages, and so on, to each other.&#xD;
&#xD;
An interaction between the pet store and one of its suppliers would illustrate a loosely-coupled business interaction. A typical scenario might be:&#xD;
&#xD;
A customer places an order. This causes the inventory to fall below a pre-established low water mark, triggering the application to initiate an order to obtain more items from the supplier. This process happens asynchronously and does not interfere with the transaction being performed by the customer. &#xD;
The application sends a purchase request message to the supplier. A typical purchase request message could say, "Send 100 male African parakeets." &#xD;
At some later time, the supplier sends a message in response to the request. If the supplier does not have enough parakeets to fill the order, the message might say, "Can't fulfill request. Have 20 parakeets available." &#xD;
The application, upon receipt of the message, might send another request for a smaller quantity. The message might say, "Send 20 male African parakeets." &#xD;
The supplier initiates delivery of the shipment, and sends a message back to the application. This message might say, "Request completed. 20 parakeets shipped. Shipment number is 1234." &#xD;
The interaction between the store and supplier is depicted in a timing diagram in Figure 10.1. &#xD;
&#xD;
    &lt;img src="http://java.sun.com/j2ee/blueprints/application/jps10/images/application.10.gif"&gt; &#xD;
 &#xD;
&#xD;
Figure 10.1 A Store-Supplier Business-to-Business Interaction &#xD;
&#xD;
One thing to observe about this scenario that it is asynchronous. The action is initiated when a customer places an order. However, it proceeds without blocking the customer's interaction. Also note that neither the store nor the supplier is blocked waiting for the other to respond. While the procurement is in progress, the store's application and the supplier's system carry on with their activities as usual.&#xD;
&#xD;
&#xD;
&#xD;
이 숙제는 오는 3 월 8일까지 제출해 주세요. 그러면 &#xD;
이에대한 평가를 해서 본인들에게 돌려주고 강의시간에도 설명을 하겠습니다. &#xD;
이 숙제는 강제성이 없습니다. 하지만, 본인이 작성한 설계의 문제점을 상세히 알고 싶은 분은 미리 이메일로 보내주세요. Rational Rose MDL file로 보내도 되고, text file로 작성한 것을 보내도 됩니다. 제가 미리 검토할 시간을 가지려고 합니다. 보낼때는 slee@edulinx.ca, scottl@idirect.com 으로 보내주세요. &#xD;
&#xD;
Thanks&#xD;
Robert Kiyosaki&#xD;
&#xD;
write your name after reading.&#xD;
---------------------------------&#xD;
&#xD;
password 1&#xD;
&#xD;
</content>
    <postId>9512A9B0-4196-40E5-9ACD-D530D1643521</postId>
    <pubDate>2001-04-28T00:00:00-04:00</pubDate>
    <title>OOP 과정개설 </title>
</post>
