<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>신민용</author>
    <comments/>
    <content>There was a small bug which I fixed it,&#xD;
and I added more methods like "sort,reset".&#xD;
"reset" should be used when you restart yourloop(hasMore) before you didn't finish your previous loop.&#xD;
&#xD;
&lt;PRE&gt;&#xD;
package ks.collection;&#xD;
&#xD;
import java.util.ArrayList;&#xD;
import java.util.Arrays;&#xD;
import java.io.*;&#xD;
&#xD;
public class KTable&#xD;
{&#xD;
       protected ArrayList[] _table;&#xD;
       protected int      _index = -1;&#xD;
&#xD;
       public KTable()&#xD;
       {&#xD;
              _init(2,10);&#xD;
       }&#xD;
&#xD;
       public KTable(int columnSize)&#xD;
       {&#xD;
              _init(columnSize,10);&#xD;
       }&#xD;
&#xD;
       public KTable(int columnSize,int rowSize)&#xD;
       {&#xD;
             _init(columnSize,rowSize);&#xD;
       }&#xD;
&#xD;
       protected void _init(int columnSize,int rowSize)&#xD;
       {&#xD;
              _table = new ArrayList[columnSize];&#xD;
              for ( int i = 0; i &lt; columnSize; i++ )&#xD;
              {&#xD;
                    _table[i] = new ArrayList(rowSize);&#xD;
              }&#xD;
       }&#xD;
&#xD;
       public KTable(InputStream input) throws IOException&#xD;
       {&#xD;
              _init(2,16);&#xD;
&#xD;
              int size = input.available();&#xD;
              byte[] buffer = new byte[size];&#xD;
              input.read(buffer);&#xD;
&#xD;
              input.close();&#xD;
&#xD;
              while( true )&#xD;
              {&#xD;
                     String key = _getWord((byte)'=',buffer);&#xD;
                     if ( key == null )&#xD;
                     {&#xD;
                          _index = -1;&#xD;
                          return;&#xD;
                     }&#xD;
&#xD;
                     String value = _getWord((byte)0x0a,buffer);&#xD;
&#xD;
&#xD;
                     add(key,value);&#xD;
              }&#xD;
       }&#xD;
&#xD;
&#xD;
&#xD;
       public void add(String key, Object value)&#xD;
       {&#xD;
              _table[0].add(key);&#xD;
              _table[1].add(value);&#xD;
       }&#xD;
&#xD;
       public void add(String key, int value)&#xD;
       {&#xD;
              _table[0].add(key);&#xD;
              _table[1].add(Integer.toString(value));&#xD;
       }&#xD;
&#xD;
&#xD;
       public void add(int column, Object value) throws Exception&#xD;
       {&#xD;
              _checkColumn(column,"add(col,value)");&#xD;
              _table[column].add(value);&#xD;
       }&#xD;
&#xD;
       public void add(int column, int value) throws Exception&#xD;
       {&#xD;
              _checkColumn(column,"add(col,long)");&#xD;
              _table[column].add(Integer.toString(value));&#xD;
       }&#xD;
&#xD;
       public void add(Object[] objects) throws Exception&#xD;
       {&#xD;
              _checkColumn( objects.length-1,"add(Object[])" );&#xD;
              for ( int i = 0; i &lt; objects.length ; i++ )&#xD;
              {&#xD;
                    _table[i].add(objects[i]);&#xD;
              }&#xD;
       }&#xD;
&#xD;
       public Object get(int column, int row) throws Exception&#xD;
       {&#xD;
              _checkColumn(column,"get(col,row)");&#xD;
              return _table[column].get(row);&#xD;
       }&#xD;
&#xD;
       public String getString(int column, int row) throws Exception&#xD;
       {&#xD;
              _checkColumn(column,"getString(col,row");&#xD;
              return (String)_table[column].get(row);&#xD;
       }&#xD;
&#xD;
       public int getInt(int column, int row) throws Exception&#xD;
       {&#xD;
              _checkColumn(column,"getInt(col,row");&#xD;
              return  Integer.parseInt((String)_table[column].get(row));&#xD;
       }&#xD;
&#xD;
&#xD;
       public boolean hasMore()&#xD;
       {&#xD;
              if ( ++_index &gt;= _table[0].size() )&#xD;
              {&#xD;
                   _index = -1;&#xD;
                   return false;&#xD;
              }&#xD;
              else&#xD;
              {&#xD;
                   return true;&#xD;
              }&#xD;
       }&#xD;
&#xD;
       public void reset()&#xD;
       {&#xD;
              _index = -1;&#xD;
       }&#xD;
&#xD;
       public Object get(int column) throws Exception&#xD;
       {&#xD;
              _checkColumn(column,"get(col");&#xD;
              if ( _index &lt; 0 )&#xD;
              {&#xD;
                   throw new Exception("initialize first using KTable.hasMore()");&#xD;
              }&#xD;
&#xD;
              return _table[column].get(_index);&#xD;
       }&#xD;
&#xD;
       public String getString(int column) throws Exception&#xD;
       {&#xD;
              return (String) get(column);&#xD;
       }&#xD;
&#xD;
       public int getInt(int column) throws Exception&#xD;
       {&#xD;
              return  Integer.parseInt((String)get(column));&#xD;
       }&#xD;
&#xD;
       public int size()&#xD;
       {&#xD;
              return _table[0].size();&#xD;
       }&#xD;
&#xD;
       public int indexOf(Object value)&#xD;
       {&#xD;
              return _table[0].indexOf(value);&#xD;
       }&#xD;
&#xD;
       public int indexOf(int column,Object value) throws Exception&#xD;
       {&#xD;
              _checkColumn(column ,"indexOf(col,value");&#xD;
              return _table[column].indexOf(value);&#xD;
       }&#xD;
&#xD;
       public boolean search(Object value)&#xD;
       {&#xD;
              return _searching(0,value);&#xD;
       }&#xD;
&#xD;
       public boolean search(int column,Object value) throws Exception&#xD;
       {&#xD;
              _checkColumn(column,"search(col,value");&#xD;
              return _searching(column,value);&#xD;
       }&#xD;
&#xD;
       protected boolean _searching(int column,Object value)&#xD;
       {&#xD;
&#xD;
              while ( ++_index &lt; _table[column].size() )&#xD;
              {&#xD;
                      if ( _table[column].get(_index).equals(value) == true )&#xD;
                      {&#xD;
                           return true;&#xD;
                      }&#xD;
              }&#xD;
              _index = -1;&#xD;
              return false;&#xD;
       }&#xD;
&#xD;
&#xD;
       public Object getValue(String key)&#xD;
       {&#xD;
              return _getValue(key,1);&#xD;
       }&#xD;
&#xD;
       public Object getValue(String key, int column) throws Exception&#xD;
       {&#xD;
              _checkColumn(column,"getValue(key,col");&#xD;
              return _getValue(key,column);&#xD;
       }&#xD;
&#xD;
       protected Object _getValue(String key, int column)&#xD;
       {&#xD;
              int index = indexOf(key);&#xD;
&#xD;
              if ( index &gt;= 0 )&#xD;
              {&#xD;
                   return _table[column].get(index);&#xD;
              }&#xD;
              else&#xD;
              {&#xD;
                   return null;&#xD;
              }&#xD;
       }&#xD;
&#xD;
       public String getStringValue(String key)&#xD;
       {&#xD;
              return (String) _getValue(key,1);&#xD;
       }&#xD;
&#xD;
       public String getStringValue(String key, int column) throws Exception&#xD;
       {&#xD;
              return (String) getValue(key,column);&#xD;
       }&#xD;
&#xD;
&#xD;
       protected void _checkColumn(int column,String func) throws Exception&#xD;
       {&#xD;
              if ( column &gt;= _table.length )&#xD;
              {&#xD;
                   throw new Exception( func + ": column size(" + column + ") is out of range(" + _table.length + ")!");&#xD;
              }&#xD;
       }&#xD;
&#xD;
       private String _getWord(byte endChar,byte[] buffer)&#xD;
       {&#xD;
               if ( ++_index &gt;= buffer.length )&#xD;
               {&#xD;
                    return null;&#xD;
               }&#xD;
&#xD;
               while(true)&#xD;
               {&#xD;
                      byte chr = buffer[_index];&#xD;
&#xD;
                      while( chr &lt;= ' ' )&#xD;
                      {&#xD;
                             if ( ++_index &gt;= buffer.length )&#xD;
                             {&#xD;
                                  return null;&#xD;
                             }&#xD;
&#xD;
                             chr = buffer[_index];&#xD;
                      }&#xD;
&#xD;
                      if ( chr == '#' )&#xD;
                      {&#xD;
                           while( buffer[_index] != 0x0a )&#xD;
                           {&#xD;
&#xD;
                             if ( ++_index &gt;= buffer.length )&#xD;
                             {&#xD;
                                  return null;&#xD;
                             }&#xD;
                           }&#xD;
&#xD;
                           if ( ++_index &gt;= buffer.length )&#xD;
                           {&#xD;
                                  return null;&#xD;
                           }&#xD;
&#xD;
                      }&#xD;
                      else&#xD;
                      {&#xD;
                           break;&#xD;
                      }&#xD;
               }&#xD;
&#xD;
               int start = _index;&#xD;
               int end   = 0;&#xD;
&#xD;
               while(_index &lt; buffer.length)&#xD;
               {&#xD;
                     byte chr = buffer[_index];&#xD;
&#xD;
                     if ( chr == endChar )&#xD;
                     {&#xD;
                          if ( end == 0 ) end = _index;&#xD;
&#xD;
&#xD;
                          return new String(buffer,start, end-start );&#xD;
                     }&#xD;
                     else&#xD;
                     if (  chr &lt;= ' ' )&#xD;
                     {&#xD;
                           end = _index;&#xD;
                     }&#xD;
&#xD;
                     _index++;&#xD;
               }&#xD;
&#xD;
               return null;&#xD;
       }&#xD;
&#xD;
&#xD;
       public void sort(int column)&#xD;
       {&#xD;
                   Object[] arr = _table[column].toArray();&#xD;
                   int size = arr.length;&#xD;
                   int hashCodes[] = new int[size];&#xD;
                   for ( int i = 0; i &lt; size ; i++ )&#xD;
                   {&#xD;
                       hashCodes[i] = arr[i].hashCode();&#xD;
                   }&#xD;
&#xD;
                   Arrays.sort( arr );&#xD;
&#xD;
                   ArrayList[] table = new ArrayList[_table.length];&#xD;
                   for ( int col = 0; col &lt; _table.length; col++ )&#xD;
                   {&#xD;
                         table[col] = new ArrayList(size);&#xD;
                   }&#xD;
&#xD;
                   for ( int i = 0; i &lt; size ; i++ )&#xD;
                   {&#xD;
                         int row = 0;&#xD;
                         int hashKey = arr[i].hashCode();&#xD;
                         for ( row = 0; row &lt; size; row++ )&#xD;
                         {&#xD;
                               if ( hashKey == hashCodes[row] ) break;&#xD;
                         }&#xD;
&#xD;
                         for ( int col = 0;  col &lt; _table.length ; col++ )&#xD;
                         {&#xD;
                               table[col].add(  _table[col].get(row) );&#xD;
                         }&#xD;
                   }&#xD;
&#xD;
                   _table = null;&#xD;
                   _table = table;&#xD;
       }&#xD;
&#xD;
       public String toString()&#xD;
       {&#xD;
              int size = _table[0].size();&#xD;
              StringBuffer sb = new StringBuffer("col = " + _table.length + " , row = " + size );&#xD;
&#xD;
              sb.append("\r\n");&#xD;
&#xD;
              for ( int row = 0; row &lt; size ; row++ )&#xD;
              {&#xD;
                    for ( int col = 0; col &lt; _table.length ; col++ )&#xD;
                    {&#xD;
                           sb.append( _table[col].get(row) );&#xD;
                           sb.append("/" );&#xD;
                    }&#xD;
                    sb.append("\r\n");&#xD;
              }&#xD;
&#xD;
              return sb.toString();&#xD;
       }&#xD;
&#xD;
       public static void main(String[] args)&#xD;
       {&#xD;
              try&#xD;
              {&#xD;
                     KTable table = new KTable();&#xD;
&#xD;
                     table.add("ON","1:Ontario");&#xD;
                     table.add("QC","3:Quebec");&#xD;
                     table.add("BC","2:British Columbia");&#xD;
                     table.add("MB","4:Manitoba");&#xD;
&#xD;
                     table.sort(1);&#xD;
                     while( table.hasMore() )&#xD;
                     {&#xD;
                            System.out.print( table.get(0) + " = " );&#xD;
                            System.out.println( table.get(1) );&#xD;
                     }&#xD;
&#xD;
                     System.out.println( "what is MB?  answer is = " + table.getValue("MB") );&#xD;
              }&#xD;
              catch(Exception exp)&#xD;
              {&#xD;
                    System.out.println(exp);&#xD;
              }&#xD;
&#xD;
&#xD;
              try&#xD;
              {&#xD;
&#xD;
                     final int  CODE  = 0;&#xD;
                     final int  NAME  = 1;&#xD;
                     final int  GRADE = 2;&#xD;
&#xD;
                     KTable table = new KTable(3);&#xD;
&#xD;
                     table.add(CODE, "a001");&#xD;
                     table.add(NAME, "Andrew Sheen");&#xD;
                     table.add(GRADE,"A+");&#xD;
&#xD;
                     table.add(CODE, "a002");&#xD;
                     table.add(NAME, "Sharon Stone");&#xD;
                     table.add(GRADE,"C+");&#xD;
&#xD;
                     table.add(CODE, "a003");&#xD;
                     table.add(NAME, "Jeff back");&#xD;
                     table.add(GRADE,"A+");&#xD;
&#xD;
                     table.add(CODE, "a004");&#xD;
                     table.add(NAME, "Jimmy Page");&#xD;
                     table.add(GRADE,"D");&#xD;
&#xD;
                     String[] data = {"a005","Nobody","A+"};&#xD;
                     table.add( data );&#xD;
&#xD;
&#xD;
&#xD;
                     System.out.println("------ search A+ -----------");&#xD;
                     while( table.search(GRADE,"A+") )&#xD;
                     {&#xD;
                            System.out.print( table.get(CODE) + "/" );&#xD;
                            System.out.print( table.get(NAME) + "/" );&#xD;
                            System.out.println( table.get(GRADE) );&#xD;
                     }&#xD;
&#xD;
                     System.out.println("------ get second record -------");&#xD;
                            System.out.print( table.get(CODE,1) + "/" );&#xD;
                            System.out.print( table.get(NAME,1) + "/" );&#xD;
                            System.out.println( table.get(GRADE,1) );&#xD;
&#xD;
&#xD;
                     System.out.println("what is the grade of a004 = " + table.getValue("a004",GRADE) );&#xD;
&#xD;
&#xD;
              }&#xD;
              catch(Exception exp)&#xD;
              {&#xD;
                    System.out.println(exp);&#xD;
              }&#xD;
&#xD;
              try&#xD;
              {&#xD;
                     KTable table = new KTable(new FileInputStream("province.properties"));&#xD;
                     System.out.println( "----- dump ----\r\n" + table );&#xD;
&#xD;
              }&#xD;
              catch(Exception exp)&#xD;
              {&#xD;
                    System.out.println(exp);&#xD;
              }&#xD;
&#xD;
&#xD;
&#xD;
       }&#xD;
&#xD;
}&#xD;
&lt;/PRE&gt;</content>
    <postId>05BA142C-5CB3-4463-8807-2FDAA80ADF88</postId>
    <pubDate>2002-09-30T00:00:00-04:00</pubDate>
    <title>New version with more methods</title>
</post>
