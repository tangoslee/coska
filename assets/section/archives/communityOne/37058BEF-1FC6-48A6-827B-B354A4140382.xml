<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>이성기</author>
    <comments/>
    <content>Overview of Lilac Framework (Draft) &#xD;
===============================  Jul 30, 2001, Aug 16, 2001&#xD;
&#xD;
Motivation &#xD;
  - Build common functionality for e-commerce application&#xD;
  - Make expandible framework&#xD;
  - Provide right size of implementation to resolve business problem&#xD;
  - Target experienced Java developers to deliver E-commerce solution on time.&#xD;
&#xD;
Benefit&#xD;
  - Save developing time to build basic functionality&#xD;
  - Customizable and selectible framework solution by business requirement by providing light or medium weight packages&#xD;
  - Easier understanding than heavy frameworks in market&#xD;
  &#xD;
Major features&#xD;
&#xD;
1) Light-weight framework (Beta version release)&#xD;
  Simple requirement with UI-Business Logic and data storing requirement.&#xD;
&#xD;
   - Based on MVC pattern(Model-View-Controller)&#xD;
   - Expanded MVC pattern(UI-Controller-Business Logic-Business Object- Data Adaptor - Database)&#xD;
   - Support all relational database and File as data storage&#xD;
   - Support JSP/HTML client&#xD;
   - Object - relational database mapping&#xD;
&#xD;
2) Medium-weight framework(Alpha version under construction)&#xD;
   More complex requirement than light framework. &#xD;
   - include all features in light framework&#xD;
   - Strong Web page navigation and session control &#xD;
   - Object cache during session and application running period&#xD;
   - Business Rule Engine (EditorUI in TBI)&#xD;
   - XML as data storage source (TBI - To be implemented)&#xD;
   - Security and Login Access Control(TBI)&#xD;
   - Error Handling(TBI)&#xD;
   - Logging(TBI)&#xD;
&#xD;
3) Heavy-weight framework (TBI- requirement phase)&#xD;
   - XML connector &#xD;
   - Service layer&#xD;
   - MQ, LDAP and other services&#xD;
   - Enhanced Resource Manager &#xD;
   - Mail Service &#xD;
   - Transaction Management&#xD;
   - Integrated with EJB and J2EE&#xD;
   - Multi-Channel support&#xD;
&#xD;
Lilac is Java Framework for e-commerce &#xD;
======================================&#xD;
&#xD;
1. WAF (Web Access Framework) &#xD;
control web navigation, user session tracking, &#xD;
web document cache &#xD;
&#xD;
Web control - ControlServlet &#xD;
&#xD;
1) Protect bookmark access - Implemented codes : NavigationManager, Chain, Page and Constants. &#xD;
logic - Constant list of page link is read from Constants into Chain. Chain returns next page info with cursor, which points current page dispatch. Any page request from client with current page name is validated on server if the index of the client page is matched with cursor on the chain object on the Session. &#xD;
&#xD;
2) Protect Back/Forward buttons - any forward/backward movement on client browser will bring up the cached page from local PC. If this call server, the server will reject this request because the cursor is not matched with this reposted page. It is solved by 1) &#xD;
&#xD;
3) Idle session expired - Later &#xD;
&#xD;
4) Previous page reloading from document cache on server session when previous menu button pressed. - &#xD;
&#xD;
- (TBI) Multichannel Presentation Handler - support Swing, Standalone application, WEB, WAP&#xD;
&#xD;
2. BOF (Business Object Framework) &#xD;
Business Logic control, workflow, context session data &#xD;
- CommandProcessor &#xD;
- DataSet, ErrorData &#xD;
- FrameException &#xD;
- Shared object with Content Cache&#xD;
- Business Rule Engine&#xD;
 &#xD;
- Transaction (TBI)&#xD;
- Logging (TBI) &#xD;
&#xD;
3. DASF (Data Access and Service Framework) &#xD;
define external data source access logic &#xD;
- Storable &#xD;
- ListDB &#xD;
- RDB &#xD;
- ORmapper &#xD;
- db.property &#xD;
- DBConnectionManager &#xD;
- XML mapper&#xD;
&#xD;
- SOAP (TBI)&#xD;
- Legacy Data integration (TBI)&#xD;
- Enhanced Resource Manager (TBI)&#xD;
- Mail Service (TBI)&#xD;
- MQ Service (TBI)&#xD;
- LDAP Service (TBI)&#xD;
&#xD;
---------------- &#xD;
1. Content caching &#xD;
This function load frequent usable object into cache memory rather than accessing physical data storage(eg, file, relational database or mainframe) &#xD;
Life cycle of content cache &#xD;
1. load content cache when the server program starts &#xD;
At this time, reference objects are loaded(eg, price list). When user logins and start a session, session objects are loaded(eg, client, account). &#xD;
2. Structure &#xD;
The class relationship is &#xD;
&#xD;
ContentCache &#xD;
------------ &#xD;
Reference - price list, error list... &#xD;
Session - client, account, transaction or order &#xD;
&#xD;
3. Class names &#xD;
Content &#xD;
&#xD;
2. Business Rule &#xD;
3. Web Page Navigation Control &#xD;
&#xD;
Developer Guide&#xD;
&#xD;
Tutorial&#xD;
&#xD;
</content>
    <postId>37058BEF-1FC6-48A6-827B-B354A4140382</postId>
    <pubDate>2001-08-01T00:00:00-04:00</pubDate>
    <title>Overview of Lilac Framework (Draft 2) </title>
</post>
