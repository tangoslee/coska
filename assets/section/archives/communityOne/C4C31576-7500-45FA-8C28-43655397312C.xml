<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>김민</author>
    <comments>
        <comment>
            <author>이성기</author>
            <date>2002-04-09T00:00:00-04:00</date>
            <content>김민씨의 고민이 저의 고민입니다. </content>
        </comment>
        <comment>
            <author>김중수</author>
            <date>2002-04-09T00:00:00-04:00</date>
            <content>또 좌골이 찌끈찌끈 해 옵니다. 그 동안 잠잠했던 고민을 다시 하게 하는군요.</content>
        </comment>
    </comments>
    <content>우리회사 Architect였던 중국할아버지의 의견을 나누고 싶다. 그리고 제가 아는 어떤 한국인 Engineer의 의견을 나누고 싶다.&#xD;
&#xD;
중국문화혁명당시 시골로 보내져서 강제노동으로 많은 시간을 보내다가 독한 맘 먹고 저녁시간을 이용해서 공부한 후 대학에 들어가서 공부 후, 미국에서의 공부, 그 후 Bell에서 근무하다가 여기 캐나다의 (전)우리회사로 스카우트되어 다니던 입지전적인 인물이다. 나이어린 중국 애들로부터 대단하다며 존경을 받던 중국…&#xD;
&#xD;
Technology는 매일이 다르게 변하고 있다. 이런 Technology를 매일매일 따라잡기란 쉬 운 일이 단연코 아니다. 그러면 우리가 해야 될 일은 … Good Implementer로 서의 생명은 결코 길지 않다고 했다. 그러면 어떻게 해야 좀더 Long Term을 볼 수 있을까 라는 질문이 나오게 된다. &#xD;
&#xD;
여기 캐나다에서 공부 후 Engineer로 일을 하시다가 얼마 전 선교의 목적으로 전세계 기독교인들이 중국과 북한 선교를 위해 연변에 세운 연변과학 기술대학에 자비량 교수로 사역하고 계신 한국인 Engineer…&#xD;
&#xD;
그가 처음 일을 시작 할 때부터 Tools들이 참 많이 변했다고 했다. 쉽게 말해서 처음에는 일자 드라이버만(도라이바) 쓰다가 십자를 쓰고, 얼마 전 부 턴 네모난 것, 별 모양…등등 거기다가 최근엔 전기로 작동되는 별별 모양이 다 들어가 있는  전동 드라이버까지… 그러나 변하지 않는 무엇이 있다고 하셨다. 조일 때는 시계방향으로 돌리고 풀 때는 반 시계방향으로 돌리면 된다는 사실..&#xD;
&#xD;
한달 반전부터 직장을 찾기 시작하면서 비록 Job Market은 좋지 않지만 어디를 가야지 좀더 장기적이고 나만의 Career Skill Set을 구축 할 수 있을까 라는 생각을 자주 하게 되었다.  어떻게 해야지 내가 원래 계획했던 Software Developer로서 정년퇴임을 할 수 있을까라는 생각과 함께..  &#xD;
&#xD;
이제는 더 이상 어떤 Programming Language의 Syntax가 중요하지 않다고 본다. 물론 그것은 말할 것 도 없이 기본이다. 그러면 그 위에 무엇인가 덧붙여 져야 할 것이 무엇인가.. 라는 것이 중요한데.. 그것이 무엇일까..  &#xD;
 간단히 내가 아는 위에서의 중국인 Architect와 한국인 Engineer의 말을 다음과 같이 요약해 보고자 한다.&#xD;
 &#xD;
1.	Structured Programming 와 Objected Oriented Programming등 각각의 언어의 Pattern을 익히는 것이다.  다시 말해서 OO에서는 많은 Design Patterns들이 있다. 그런 것들을 많이 써보고 손에 익혀 자기의 것으로 만드는 것이다. 그리고 자기만의 Case by Case 의 Framework을 만드는 것이다.(여기서 나는 최근의 이성기 씨의 관심분야와 그의 노력, 그리고 그의 Frameworks에 대해 매우 존경하는 바이다.) 이런 것들을 통해서 Programmer로서의 Mind가 아닌 Architect로서의 Mind가 절대적으로 필요하다고 할 것이다. C++을 몇 년 했냐 가 중요한 것이 아니라, Java를 몇 년 했냐 가 중요한 것 이 아니라,  OO를 몇 년 했냐 가 중요한 것이기 때문이다. 드라이버를 십자를 쓰냐, 일자를 쓰냐가 중요한 것이 아니라, 돌리는 방향에 의해서 나사를 조 일수도 있고 풀 수도 있다는 것을 알고 그 경험에 맞추어 어떤 드라이버라도 한두 번 의  연습으로 바로 쓸 수 있어야 한다는 이야기일 것이다.&#xD;
&#xD;
2.	나만의 Domain knowledge가 있어야 한다. 이것은 한 우물을 파야 한다는 이야기와 일맥 상통한다고 하겠다. Insurance 회사와 Bank, Credit Card, Telco등등 자기의 특정한 분야가 있어야지 좀더 Knowledgeable Architect가 될 수 있기 때문이다. &#xD;
&#xD;
3.	IT업계의 돌아가는 상황을 민감하게 받아들여야 한다. 더 이상 나 홀로의 무엇이 되기는 힘 이 들기 때문이다. 아니 불가능하기 때문이다. 귀를 열고 가만히 듣다가 보면 흐름을 파악 할 수 있으리라 본다. 거기에 “왜”라는 질문을 붙이고 대답을 찾다가 보면, 그것을 만든 이들과 Market흐름을 보면, 가야 될 길인가 아닌가가 스스로 판단되어 지리 라고 본다. 우리가 지금 하고있는 세미나 같은 모임이 지속적이고 좀더 능률적, 적극적으로 변화해야 하는 또 다른 이유일 것 이다.&#xD;
&#xD;
위의 것들과 함께 우리의 영원한 주적인 영어, 창의적이기를 거부한 한국식 주입식교육으로 생겨난 Narrow Mind, 유교적 관습에 의한 Passive한 자세, 턱 없이 부족한 이곳 북미의 Human-Network등등.. 우리가 극복해야 할 산들은 너무도 많다. 그렇지만 이런 것들이 결코 불가능하다고 생각치는 않는다. 물론 몇 년 후 내가 먼저 Small Business를 Open할지는 모르지만 지금은 좀더 적극적으로 위의 내가 극복 해야 할 모든 것들을 이기고 나가야 겠다는 필승의 신념뿐이다. &#xD;
&#xD;
P.S : 위의 내용에는 많은 논리적 문제와 경험 미숙에서 온 문제점들이 포함되어 있을줄 암니다. 혹 조언을 주시거나 다른 의견이 있으시면 Please do not hesitate to let me know about it.. &#xD;
&#xD;
</content>
    <postId>C4C31576-7500-45FA-8C28-43655397312C</postId>
    <pubDate>2002-04-08T00:00:00-04:00</pubDate>
    <title>Architect Mind ...</title>
</post>
