<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>신민용</author>
    <comments/>
    <content>package BoardManager;&#xD;
&#xD;
use strict 'vars';&#xD;
use strict 'subs';&#xD;
##use strict 'refs';&#xD;
########################################&#xD;
use Setup;&#xD;
use Cache;&#xD;
use Dbx;&#xD;
use CGI;&#xD;
use Data::Dumper;&#xD;
########################################&#xD;
my $PageSize = Setup::PageSize;  &#xD;
########################################&#xD;
&#xD;
sub execute&#xD;
{&#xD;
    my $action;&#xD;
    eval&#xD;
    {&#xD;
       my $cgi = shift;&#xD;
       &#xD;
       $action = $cgi-&gt;param('action');&#xD;
       &#xD;
       my $refx = &amp;${action}($cgi);       &#xD;
       &#xD;
       print "------execute-----------\n";&#xD;
       &#xD;
       print Dumper($refx);&#xD;
       &#xD;
       return $refx;&#xD;
       &#xD;
       print "------here-----------\n";&#xD;
    };&#xD;
    &#xD;
    if ( $@ )&#xD;
    {&#xD;
        my $error = { error=&gt;$@  , action=&gt;$action };&#xD;
    }   &#xD;
}&#xD;
&#xD;
##########################################################&#xD;
### select&#xD;
##########################################################&#xD;
sub select&#xD;
{   &#xD;
     my $cgi = shift;&#xD;
   &#xD;
     my $pageNo    = $cgi-&gt;param('page');&#xD;
     my $startPage = ($pageNo-1) * $PageSize;&#xD;
     &#xD;
     my $boardName = $cgi-&gt;param('board');&#xD;
     my $cache     =  Cache-&gt;new($boardName);&#xD;
     my $cachedRef = $cache-&gt;readOut;&#xD;
     my $list      = $cachedRef-&gt;{list};&#xD;
     my $size      = @$list;&#xD;
     &#xD;
     my $rowCnt = 0;     &#xD;
     my $i;&#xD;
          &#xD;
     my $startID;&#xD;
     my $endID;&#xD;
     my $skip;&#xD;
     &#xD;
     my $pageCnt = 0;&#xD;
     &#xD;
     my $prevID = 0;&#xD;
     my $row;&#xD;
     &#xD;
     for ( $i = 0; $i &lt; $size; $i++ )&#xD;
     {&#xD;
          $row = $list-&gt;[$i];&#xD;
          &#xD;
          $rowCnt += $row-&gt;[1];  &#xD;
          &#xD;
          ##print "rowCnt=$rowCnt ==&gt; $row-&gt;[0]\n";&#xD;
          &#xD;
          if ( $rowCnt &gt; $startPage )&#xD;
          {&#xD;
               $startID = $prevID;&#xD;
               $pageCnt = $rowCnt-$startPage;&#xD;
               &#xD;
               $skip    = $startPage - ($rowCnt-$row-&gt;[1]);&#xD;
               &#xD;
               $i++;&#xD;
               last;&#xD;
          }&#xD;
          &#xD;
          $prevID = $row-&gt;[0];&#xD;
     }&#xD;
     &#xD;
     for ( ; $i &lt; $size; $i++ )&#xD;
     {&#xD;
          $row = $list-&gt;[$i];&#xD;
          &#xD;
          $pageCnt += $row-&gt;[1];  &#xD;
          &#xD;
          if ( $pageCnt &gt;= $PageSize )&#xD;
          {&#xD;
               $endID = $row-&gt;[0];&#xD;
               last;&#xD;
          }&#xD;
     }&#xD;
     &#xD;
     ##print "start=$startID, end=$endID, pageCnt=$pageCnt, skip=$skip\n";&#xD;
     &#xD;
     my $fields = 'BOARD_ID,USER_NAME,SUBJECT,READ_COUNT,GOOD_COUNT,CMMT_COUNT,UPDATED';&#xD;
     &#xD;
     my $sql = "SELECT $fields FROM BOARD ";&#xD;
        $sql .= "WHERE BOARD_NAME = '$boardName' AND BOARD_ID &gt; $startID and BOARD_ID &lt; $endID order by BOARD_ID";&#xD;
             &#xD;
     my $resultList = Dbx::rangeQuery($sql,$skip,$PageSize);&#xD;
          &#xD;
     my $resultRef = {};&#xD;
        $resultRef-&gt;{fields} = $fields;&#xD;
        $resultRef-&gt;{list}   = $resultList;&#xD;
        $resultRef-&gt;{page}   = $pageNo;&#xD;
     &#xD;
     return $resultRef;&#xD;
}&#xD;
&#xD;
&#xD;
##########################################################&#xD;
### insert&#xD;
##########################################################&#xD;
sub insert&#xD;
{&#xD;
    my $cgi = shift;&#xD;
    &#xD;
    my $boardName = $cgi-&gt;param('board');&#xD;
    my $baseID    = $cgi-&gt;param('id');&#xD;
    &#xD;
    my %sql = ();&#xD;
       $sql{BOARD_NAME} = $boardName;&#xD;
       $sql{USER_ID}    = $cgi-&gt;param('userID');&#xD;
       $sql{USER_NAME}  = $cgi-&gt;param('userName');&#xD;
       $sql{SUBJECT}    = $cgi-&gt;param('subject');&#xD;
       $sql{CONTENT}    = $cgi-&gt;param('content');&#xD;
       $sql{ATTACHED}   = $cgi-&gt;param('attached');&#xD;
       $sql{OPTIONS}    = $cgi-&gt;param('options');&#xD;
   &#xD;
    &#xD;
    my $cache     =  Cache-&gt;new($boardName);&#xD;
    my $cachedRef = $cache-&gt;checkOut;&#xD;
    my $resultList;&#xD;
    &#xD;
    eval&#xD;
    {&#xD;
        my $list = $cachedRef-&gt;{list};&#xD;
        &#xD;
        if ( $list == undef )&#xD;
        {&#xD;
             $list = [];   &#xD;
             $cachedRef-&gt;{list} = $list;&#xD;
        }&#xD;
        &#xD;
        my $size = @$list;&#xD;
        &#xD;
        my @row;&#xD;
        &#xD;
        my $inputID;&#xD;
        &#xD;
        my $rest = 100000000;&#xD;
    &#xD;
        ##############################################################&#xD;
        if ( $baseID == 0 )&#xD;
        {&#xD;
             $inputID  = $cachedRef-&gt;{lastID};&#xD;
             &#xD;
             if ( $inputID == undef )&#xD;
             {&#xD;
                  $inputID = 999999;&#xD;
             }&#xD;
                             &#xD;
             $cachedRef-&gt;{lastID} = $inputID - 1;&#xD;
             &#xD;
             $inputID = $inputID * $rest;&#xD;
            &#xD;
             if ( $size == 0 )&#xD;
             {&#xD;
                  $row[0] = $inputID;&#xD;
                  $row[1] = 1;&#xD;
                  push(@$list,[@row]);&#xD;
             }&#xD;
             else&#xD;
             {&#xD;
                  my $rowref = $list-&gt;[0];&#xD;
                  &#xD;
                  if ( $rowref-&gt;[1] &lt; $PageSize )&#xD;
                  {&#xD;
                       $rowref-&gt;[1]++;&#xD;
                  }&#xD;
                  else&#xD;
                  {&#xD;
                      $row[0] = $inputID;&#xD;
                      $row[1] = 1;&#xD;
                      unshift(@$list,[@row]);&#xD;
                  } &#xD;
             }    &#xD;
        }&#xD;
        ##############################################################&#xD;
        else&#xD;
        {&#xD;
              my $offset = &amp;_getLevelOffset_insert($baseID);&#xD;
             &#xD;
              my $endID  = $baseID + $offset;&#xD;
              &#xD;
              my $maxIDSQL = "SELECT max(BOARD_ID) as maxID from BOARD where BOARD_NAME = '$boardName' "&#xD;
                           . "and BOARD_ID &gt;= $baseID and BOARD_ID &lt; $endID";&#xD;
              &#xD;
              &#xD;
              $inputID = Dbx::get($maxIDSQL);&#xD;
              &#xD;
    &#xD;
              $offset = $offset / 100;&#xD;
              &#xD;
              $inputID = $inputID / $offset;&#xD;
              $inputID++;&#xD;
              $inputID = $inputID * $offset;&#xD;
              &#xD;
              ###print "result2=$inputID\n"; &#xD;
              &#xD;
              &amp;_addList_insert ($list,$inputID);&#xD;
        }&#xD;
        &#xD;
        $sql{BOARD_ID}       = $inputID;&#xD;
        $sql{READ_COUNT}     = 0;&#xD;
        $sql{GOOD_COUNT}     = 0;&#xD;
        $sql{CMMT_COUNT}     = 0;&#xD;
       &#xD;
        Dbx::insert('BOARD',\%sql);&#xD;
       &#xD;
        ######$resultList = &amp;_getListByID_($inputID,$list,$self-&gt;{boardName});&#xD;
    };&#xD;
      &#xD;
    if ( $@ )&#xD;
    {&#xD;
        $cache-&gt;rollback;&#xD;
        die $@;&#xD;
    }&#xD;
    else&#xD;
    {  &#xD;
        $cache-&gt;commit;&#xD;
        return \%sql;&#xD;
    }    &#xD;
}&#xD;
&#xD;
sub _getLevelOffset_insert&#xD;
{&#xD;
     my $baseID = shift;&#xD;
     &#xD;
     my $offset = 100000000;&#xD;
     &#xD;
     if ( ($baseID % $offset) == 0 )  &#xD;
     {&#xD;
           return $offset;  &#xD;
     }   &#xD;
     &#xD;
     $offset = $offset/100;&#xD;
     &#xD;
     if ( ($baseID % $offset) == 0 )  &#xD;
     {&#xD;
           return $offset;    ## 1000000&#xD;
     }   &#xD;
     &#xD;
     $offset = $offset/100;&#xD;
     &#xD;
     if ( ($baseID % $offset) == 0 )  &#xD;
     {&#xD;
           return $offset;  ## 10000&#xD;
     }   &#xD;
     &#xD;
     $offset = $offset/100;&#xD;
     &#xD;
     if ( ($baseID % $offset) == 0 )  &#xD;
     {&#xD;
           return $offset;  ## 100&#xD;
     }   &#xD;
     &#xD;
     return 1;&#xD;
}&#xD;
&#xD;
sub _addList_insert&#xD;
{&#xD;
     my $list  = shift;&#xD;
     my $newID = shift;   &#xD;
     &#xD;
     my $size = @$list;&#xD;
     &#xD;
     if ( $size == 0 )&#xD;
     {&#xD;
          return;  &#xD;
     }&#xD;
     &#xD;
     for ( my $i = 0; $i &lt; $size; $i++ )&#xD;
     {&#xD;
          my $row = $list-&gt;[$i];  &#xD;
          &#xD;
          if ( $newID &lt; $row-&gt;[0] )&#xD;
          {&#xD;
               if ( $i == 0 )&#xD;
               {&#xD;
                    if ( $row-&gt;[1] &gt;= 10 )&#xD;
                    {&#xD;
                         my @newRow = ($newID,1);&#xD;
                         unshift(@$list,[@newRow]);                        &#xD;
                         return;&#xD;
                    }&#xD;
               }  &#xD;
               &#xD;
               $row-&gt;[1]++;&#xD;
               &#xD;
               ### split &#xD;
               ##if ( $row-&gt;[1] &gt; $pageSize*2 )&#xD;
               ###&#xD;
               return;&#xD;
          }&#xD;
     }&#xD;
     &#xD;
     my $lastRow = $list-&gt;[$size-1];&#xD;
        $lastRow-&gt;[0] = $newID;&#xD;
        $lastRow-&gt;[1]++;&#xD;
}&#xD;
&#xD;
&#xD;
&#xD;
##########################################################&#xD;
### detail&#xD;
##########################################################&#xD;
sub detail&#xD;
{&#xD;
    my $cgi = shift;&#xD;
    &#xD;
    my $boardName = $cgi-&gt;param('board');&#xD;
    my $boardID   = $cgi-&gt;param('id');&#xD;
    &#xD;
    my $fields = 'BOARD_ID,USER_NAME,SUBJECT,READ_COUNT,GOOD_COUNT,CMMT_COUNT,UPDATED';&#xD;
     &#xD;
    my $sql = "SELECT $fields FROM BOARD ";&#xD;
       $sql .= "WHERE BOARD_NAME = '$boardName' AND BOARD_ID = $boardID";&#xD;
    &#xD;
    my $resultSet = Dbx::getRef($sql);&#xD;
    &#xD;
    my $sql  = "SELECT USER_NAME,UPDATED,COMMENT FROM COMMENTS ";&#xD;
       $sql .= "WHERE BOARD_NAME = '$boardName' AND BOARD_ID = $boardID order by SERIAL_NO";&#xD;
       &#xD;
       $resultSet-&gt;{commentList} = Dbx::query($sql);&#xD;
&#xD;
    return $resultSet;&#xD;
}&#xD;
&#xD;
&#xD;
##########################################################&#xD;
### comment&#xD;
##########################################################&#xD;
sub comment&#xD;
{&#xD;
    my $cgi = shift;&#xD;
    my $boardName = $cgi-&gt;param('board');&#xD;
    my $boardID   = $cgi-&gt;param('id');&#xD;
    &#xD;
    my $getSerialNoSQL = "SELECT max(SERIAL_NO) from COMMENTS where BOARD_NAME='$boardName' and BOARD_ID = $boardID";&#xD;
    &#xD;
    my $resultRef;&#xD;
    &#xD;
    Dbx::begin();&#xD;
         &#xD;
    eval&#xD;
    {&#xD;
       my $serialNo = Dbx::get($getSerialNoSQL)+1;&#xD;
       my %sql = ();&#xD;
          $sql{BOARD_NAME} = $boardName;&#xD;
          $sql{BOARD_ID}   = $boardID;&#xD;
          $sql{SERIAL_NO}  = $serialNo;&#xD;
          $sql{USER_ID}    = $cgi-&gt;param('userID');&#xD;
          $sql{USER_NAME}  = $cgi-&gt;param('userName');&#xD;
          $sql{COMMENT}    = $cgi-&gt;param('comment');&#xD;
          &#xD;
         Dbx::insert('COMMENTS',\%sql);&#xD;
         &#xD;
         Dbx::commit();&#xD;
&#xD;
         $resultRef = BoardManager::detail($boardName,$boardID);         &#xD;
    };  &#xD;
    &#xD;
    if ( $@ )&#xD;
    {&#xD;
        Dbx::rollback();&#xD;
        $resultRef = {};&#xD;
        $resultRef-&gt;{error}=$@;&#xD;
    }    &#xD;
    &#xD;
    return ($resultRef);            &#xD;
}&#xD;
&#xD;
1;&#xD;
__END__   &#xD;
&#xD;
=comment&#xD;
sub _getListByID_&#xD;
{&#xD;
     my $baseID      = shift;&#xD;
     my $list        = shift;&#xD;
     my $boardName   = shift;&#xD;
     &#xD;
     my $startID = 0;&#xD;
     my $endID   = 99999999999999;  &#xD;
     my $skip    = 0;&#xD;
     my $pageNo  = 0;&#xD;
&#xD;
     my $rowCnt  = 0;&#xD;
     my $size    = @$list;&#xD;
          &#xD;
     for ( my $i = 0; $i &lt; $size; $i++ )&#xD;
     {&#xD;
         my $row     = $list-&gt;[$i];&#xD;
            $rowCnt += $row-&gt;[1];&#xD;
         &#xD;
         if ( $baseID &lt;= $row-&gt;[0] )&#xD;
         {&#xD;
               $rowCnt -= $row-&gt;[1];&#xD;
               &#xD;
               $offset  = $rowCnt % $pageSize;&#xD;
               &#xD;
            my $cnt     = $offset;  &#xD;
               &#xD;
               ##print "---&gt; rowCnt = $rowCnt . offset = $offset \n";&#xD;
               &#xD;
               my $j = $i;&#xD;
                  &#xD;
               while( --$j &gt;= 0 )&#xD;
               {&#xD;
                    $row  = $list-&gt;[$j];&#xD;
                    $cnt -= $row-&gt;[1];                            &#xD;
                    $rowCnt -= $row-&gt;[1];                            &#xD;
                    &#xD;
                    ##print "---&gt; offset = $offset , rowCnt=$rowCnt\n";&#xD;
                    &#xD;
                    if ( $cnt &lt;= 0 )&#xD;
                    {&#xD;
                         $pageNo = int(($rowCnt+9)/$pageSize);&#xD;
                         $skip   = -$cnt;&#xD;
                         &#xD;
                         $startID = _getStartID_getListByID($j,$list);&#xD;
                         last;&#xD;
                    }&#xD;
               }          &#xD;
              &#xD;
               ###############################################&#xD;
               while( ++$i &lt; $size )&#xD;
               {&#xD;
                     $row = $list-&gt;[$i];&#xD;
                     $offset += $row-&gt;[1];&#xD;
                     if ( $offset &gt;= $pageSize )&#xD;
                     {&#xD;
                          $endID = $row-&gt;[0];&#xD;
                          last;&#xD;
                     }&#xD;
               }&#xD;
               ###############################################&#xD;
               last;&#xD;
         }  &#xD;
     }    &#xD;
     &#xD;
     ###print "---&gt; skip = $skip . page=$pageNo\n";&#xD;
                                 &#xD;
     my $sql = 'SELECT id,user_name,subject,count,recommendation,comments,created FROM board ';&#xD;
        $sql .= "\nWHERE board_name = '$boardName' AND id &gt; $startID and id &lt;= $endID order by id";&#xD;
     &#xD;
     &#xD;
     ###print " ---&gt; Start = $startID,  ---&gt; end = $endID, ---&gt; skip=$skip\n";   &#xD;
     ##print $sql,"\n";&#xD;
     &#xD;
     &#xD;
     my $resultList = Dbx::rangeQuery($sql,$skip);&#xD;
     &#xD;
     my $size = @$resultList;&#xD;
     my $x;&#xD;
     for ( $x = 0; $x &lt; $size; $x++ )&#xD;
     {&#xD;
         my $row = $resultList-&gt;[$x];&#xD;
         if ( $baseID == $row-&gt;[0] )&#xD;
         {&#xD;
               last;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     my $mok = int( $x / $pageSize );&#xD;
     if ( $mok &gt; 0 )&#xD;
     {&#xD;
          splice(@$resultList,0,$mok*$pageSize);&#xD;
          $pageNo += $mok;&#xD;
     }&#xD;
     &#xD;
     my $size = @$resultList;&#xD;
     &#xD;
     if ( $size &gt; $pageSize )&#xD;
     {&#xD;
          splice(@$resultList,$pageSize);&#xD;
     }&#xD;
     &#xD;
     my $cachedRef = {};&#xD;
        $cachedRef-&gt;{pageNo} = $pageNo;&#xD;
        $cachedRef-&gt;{list}  = $resultList;&#xD;
        &#xD;
        return $cachedRef;&#xD;
     &#xD;
     &#xD;
}&#xD;
&#xD;
sub _getStartID_getListByID&#xD;
{&#xD;
     my ($i,$list) = @_;&#xD;
     &#xD;
     if ( $i == 0 )&#xD;
     {&#xD;
          return 0;  &#xD;
     }&#xD;
     else&#xD;
     {&#xD;
         return $list-&gt;[$i-1]-&gt;[0];&#xD;
     }&#xD;
    &#xD;
}&#xD;
&#xD;
=cut&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
package Dbx;&#xD;
&#xD;
use strict;&#xD;
&#xD;
use DBI;&#xD;
use Setup;&#xD;
&#xD;
&#xD;
my $dbh;&#xD;
my $dataSrc = Setup::dataSource;&#xD;
   if ( $dataSrc )&#xD;
   {&#xD;
        $dbh = DBI-&gt;connect(@$dataSrc,{PrintError=&gt;0}) || die "Could not connect to database:"; &#xD;
   }     &#xD;
&#xD;
sub begin&#xD;
{&#xD;
    $dbh-&gt;{RaiseError} = 1; &#xD;
    $dbh-&gt;{AutoCommit} = 0;&#xD;
}&#xD;
&#xD;
sub commit&#xD;
{&#xD;
    $dbh-&gt;commit() || die "\n&gt;&gt;&gt;[$!:COMMIT.ERROR]&lt;&lt;&lt;\n---end---\n\n";&#xD;
}    &#xD;
&#xD;
sub rollback&#xD;
{&#xD;
    $dbh-&gt;rollback() || die "\n&gt;&gt;&gt;[$!:ROLLBACK.ERROR]&lt;&lt;&lt;\n---end---\n\n";&#xD;
}    &#xD;
&#xD;
sub init&#xD;
{&#xD;
    if ( ! $dbh  )&#xD;
    {&#xD;
        my($url)  = $_[0];&#xD;
        my($user) = $_[1];&#xD;
        my($pwd)  = $_[2];&#xD;
        &#xD;
        ###print $url,"\n";&#xD;
        &#xD;
        $dbh = DBI-&gt;connect($url,$user,$pwd ) || die "Could not connect to database:"; &#xD;
    }    &#xD;
}&#xD;
&#xD;
sub insert&#xD;
{&#xD;
	 my $tableName   = $_[0];&#xD;
     my $fieldValues = $_[1];&#xD;
     &#xD;
     die "Not enough argment in Dbx::insert()" if  $fieldValues == undef;&#xD;
     &#xD;
     my $sql = 'INSERT INTO '.$tableName.' (';&#xD;
     &#xD;
     my $values = ")\n  VALUES(";&#xD;
     &#xD;
     my ($key,$value) = each(%$fieldValues);&#xD;
     &#xD;
     $sql .= $key;&#xD;
     $values .= '\''.$value.'\'';&#xD;
     &#xD;
     while( ($key,$value) = each(%$fieldValues) )&#xD;
     {&#xD;
         $sql .=','.$key;&#xD;
         $values .= ',\''.$value.'\'';&#xD;
     }	&#xD;
     &#xD;
     $sql .= $values.')';&#xD;
     &#xD;
     $dbh-&gt;do($sql) or die "\n&gt;&gt;&gt;[INSERT.ERROR]&lt;&lt;&lt;\n$DBI::errstr\n\n$sql\n";&#xD;
}&#xD;
	&#xD;
sub update&#xD;
{&#xD;
     my ($tableName,$fieldValues,$whereValues) = @_;&#xD;
     &#xD;
     my $sql = 'UPDATE '.$tableName."\n SET ";&#xD;
     &#xD;
     my ($key,$value) = each(%$fieldValues);&#xD;
     &#xD;
     $sql .=$key.'=\''.$value.'\'';&#xD;
     &#xD;
     while( ($key,$value) = each(%$fieldValues) )&#xD;
     {&#xD;
         $sql .=','.$key.'=\''.$value.'\'';&#xD;
     }	&#xD;
     &#xD;
     ($key,$value) = each(%$whereValues);&#xD;
     &#xD;
     $sql .="\n WHERE ".$key.'=\''.$value.'\'';&#xD;
     &#xD;
     while( ($key,$value) = each(%$whereValues) )&#xD;
     {&#xD;
         $sql .="\n AND ".$key.'=\''.$value.'\'';&#xD;
     }	&#xD;
     &#xD;
     $dbh-&gt;do($sql) || die "\n&gt;&gt;&gt;[$!:UPDATE ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
}&#xD;
&#xD;
sub delete&#xD;
{&#xD;
     my ($tableName,$whereValues) = @_;&#xD;
     &#xD;
     my $sql = 'DELETE '.$tableName;&#xD;
     &#xD;
     my ($key,$value) = each(%$whereValues);&#xD;
     &#xD;
     if ( $key )&#xD;
     {&#xD;
         $sql .="\n WHERE ".$key.'=\''.$value.'\'';&#xD;
         &#xD;
         while( ($key,$value) = each(%$whereValues) )&#xD;
         {&#xD;
             $sql .="\n AND ".$key.'=\''.$value.'\'';&#xD;
         }	&#xD;
     }    &#xD;
     &#xD;
     $dbh-&gt;do($sql) || die "\n&gt;&gt;&gt;[$!:DELETE ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
}&#xD;
&#xD;
sub getRef&#xD;
{&#xD;
	  my $sth = $dbh-&gt;prepare($_[0]); &#xD;
	  &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:getRef.ERROR]&lt;&lt;&lt;\n$_[0]\n---end---\n\n";&#xD;
&#xD;
	  return $sth-&gt;fetchrow_hashref; &#xD;
}&#xD;
&#xD;
sub get&#xD;
{&#xD;
	  my $sth = $dbh-&gt;prepare($_[0]); &#xD;
	  &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:get.ERROR]&lt;&lt;&lt;\n$_[0]\n---end---\n\n";&#xD;
&#xD;
	  return ($sth-&gt;fetchrow_array)[0]; &#xD;
}&#xD;
&#xD;
sub query&#xD;
{&#xD;
	  my $sql   = $_[0];&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  &#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:query.ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
	  &#xD;
&#xD;
	  while ( my @row = $sth-&gt;fetchrow_array ) &#xD;
	  { &#xD;
	      push(@$resultList,[@row]);&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub rangeQuery&#xD;
{&#xD;
	  my $sql   = $_[0];&#xD;
	  my $skip  = $_[1];&#xD;
	  my $cnt   = $_[2];&#xD;
	  &#xD;
	  if ( $cnt == undef )&#xD;
	  {&#xD;
	       $cnt = 9999;&#xD;
	  }&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:rangeQuery.ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
	  &#xD;
	  &#xD;
	  my @row;&#xD;
	  &#xD;
	  while( $skip &gt; 0 )&#xD;
	  {&#xD;
	       @row = $sth-&gt;fetchrow_array;&#xD;
	       &#xD;
	       if ( ! @row )&#xD;
	       {&#xD;
	            return $resultList;&#xD;
	       }&#xD;
	       $skip--;&#xD;
	  }&#xD;
&#xD;
	  while ( @row = $sth-&gt;fetchrow_array ) &#xD;
	  { &#xD;
	      if ( $cnt &gt; 0 )&#xD;
	      {&#xD;
	           push(@$resultList,[@row]);&#xD;
	           $cnt--;&#xD;
	      }     &#xD;
	      else&#xD;
	      {&#xD;
	           return $resultList;&#xD;
	      }&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub singleQuery&#xD;
{&#xD;
	  my $sql   = $_[0];&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  &#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:singleQuery.ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
	  &#xD;
&#xD;
	  while ( my @row = $sth-&gt;fetchrow_array ) &#xD;
	  { &#xD;
	      push(@$resultList,$row[0]);&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub hashQuery&#xD;
{&#xD;
	  my $sql = $_[0];&#xD;
	  &#xD;
	  my $resultList = [];&#xD;
	  &#xD;
	  my $sth = $dbh-&gt;prepare($sql); &#xD;
	  $sth-&gt;execute() || die "\n&gt;&gt;&gt;[$!:hashQuery.ERROR]&lt;&lt;&lt;\n$sql\n---end---\n\n";&#xD;
	  &#xD;
&#xD;
	  while ( my $hashref = $sth-&gt;fetchrow_hashref ) &#xD;
	  { &#xD;
	      push(@$resultList,$hashref);&#xD;
	  } 	  &#xD;
	  &#xD;
	  return $resultList;&#xD;
}&#xD;
&#xD;
sub info()&#xD;
{&#xD;
	return $dbh;&#xD;
}&#xD;
&#xD;
1;&#xD;
&#xD;
__END__&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
package Cache;&#xD;
&#xD;
use strict;&#xD;
&#xD;
use Storable;&#xD;
use Fcntl ':flock';&#xD;
&#xD;
sub new&#xD;
{&#xD;
    my($type) = $_[0];&#xD;
    my($name) = $_[1];&#xD;
    &#xD;
    my $fd;&#xD;
    &#xD;
    open($fd, "+&lt;$name.dat") or &#xD;
        ##print "try again\n!";&#xD;
        open($fd, "+&gt;$name.dat") or&#xD;
              die "&gt;&gt;&gt;Cannot open file[$name.dat].[$!] error&lt;&lt;&lt;";&#xD;
    &#xD;
    binmode($fd);&#xD;
&#xD;
    my($self) = {};&#xD;
&#xD;
    $self-&gt;{fd} = $fd;&#xD;
     &#xD;
    bless($self, $type);&#xD;
    return($self);&#xD;
}&#xD;
&#xD;
sub commit&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    &#xD;
    my $table  = $self-&gt;{data};&#xD;
    my $fd     = $self-&gt;{fd};&#xD;
&#xD;
    my $serialized = Storable::freeze $table;&#xD;
    &#xD;
    truncate( $fd, 0 );&#xD;
    seek($fd,0,0);&#xD;
    print $fd $serialized;&#xD;
    flock($fd, LOCK_UN);    &#xD;
}&#xD;
&#xD;
sub rollback&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    &#xD;
    my $fd     = $self-&gt;{fd};&#xD;
    &#xD;
    flock($fd, LOCK_UN);    &#xD;
}&#xD;
&#xD;
sub checkOut&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    my $fd = $self-&gt;{fd};&#xD;
    &#xD;
    flock($fd, LOCK_EX);&#xD;
    &#xD;
    seek($fd,0,0);&#xD;
    &#xD;
    my $serialized;&#xD;
    my $buffer;&#xD;
    &#xD;
    while ( my $nBytes = read($fd, $buffer, 1024) ) &#xD;
    {&#xD;
        $serialized .= $buffer;   &#xD;
    }    &#xD;
    &#xD;
    if ( length($serialized) == 0 )&#xD;
    {&#xD;
         $self-&gt;{data} = {};&#xD;
    }&#xD;
&#xD;
    else&#xD;
    {&#xD;
         $self-&gt;{data} = Storable::thaw($serialized);&#xD;
    }    &#xD;
    &#xD;
    return $self-&gt;{data};&#xD;
}&#xD;
&#xD;
sub readOut&#xD;
{&#xD;
    my ($self) = shift;&#xD;
    my $fd = $self-&gt;{fd};&#xD;
    &#xD;
    &#xD;
    flock($fd, LOCK_SH);&#xD;
    &#xD;
    seek($fd,0,0);&#xD;
    &#xD;
    my $serialized;&#xD;
    my $buffer;&#xD;
    &#xD;
    while ( my $nBytes = read($fd, $buffer, 1024) ) &#xD;
    {&#xD;
        $serialized .= $buffer;   &#xD;
    }    &#xD;
    &#xD;
    &#xD;
&#xD;
    flock($fd, LOCK_UN);    &#xD;
    &#xD;
    if ( length($serialized) == 0 )&#xD;
    {&#xD;
         return {};   &#xD;
    }&#xD;
&#xD;
    return Storable::thaw($serialized);&#xD;
}&#xD;
&#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
use Cache;&#xD;
&#xD;
package Setup;&#xD;
&#xD;
my $dataSrc = ['DBI:mysql:mytest:localhost:3306', 'kore6817', 'kore6817'];&#xD;
&#xD;
$PAGE_SIZE = 10;&#xD;
&#xD;
sub PageSize&#xD;
{&#xD;
    return $PAGE_SIZE;    &#xD;
}&#xD;
    &#xD;
sub dataSource&#xD;
{&#xD;
    return $dataSrc;&#xD;
}&#xD;
&#xD;
&#xD;
=comment&#xD;
sub cacheInit&#xD;
{&#xD;
    my $name = shift;&#xD;
    &#xD;
    if (! $name )&#xD;
    {&#xD;
         die 'no name provided!';   &#xD;
    }&#xD;
    &#xD;
    my @list = ();&#xD;
    &#xD;
    my $sql  = "SELECT ID FROM board where board_name = '$name' ORDER BY ID DESC";&#xD;
    my $idList = Dbx::singleQuery($sql);&#xD;
    &#xD;
    my $size = @$idList;&#xD;
    &#xD;
    my $cnt = 0;&#xD;
    my $line;&#xD;
    &#xD;
    &#xD;
    &#xD;
    foreach $item (@$idList)&#xD;
    {&#xD;
         if ( $cnt == 0 )&#xD;
         {&#xD;
              $line = $item;  &#xD;
         }&#xD;
         &#xD;
         $cnt++;&#xD;
         &#xD;
         if ( $cnt &gt;= $PAGE_SIZE )&#xD;
         {&#xD;
              my @rec = ($line,$cnt);           &#xD;
              unshift(@list,[@rec]);&#xD;
              $cnt = 0;&#xD;
         }&#xD;
    }&#xD;
    &#xD;
    if ( $cnt &gt; 0 )&#xD;
    {&#xD;
              my @rec = ($line,$cnt);           &#xD;
              unshift(@list,[@rec]);&#xD;
    }&#xD;
    &#xD;
    my $lastID;&#xD;
    if ( $size &gt; 0 )&#xD;
    {&#xD;
         $lastID = $idList-&gt;[$size-1];&#xD;
         $lastID = $lastID/100000000;&#xD;
         $lastID--;&#xD;
         $lastID = $lastID*100000000;&#xD;
    }&#xD;
    else&#xD;
    {&#xD;
         $lastID = 99999900000000;&#xD;
    }     &#xD;
        &#xD;
    my $cache = Cache-&gt;new($name);&#xD;
    my $hashref = $cache-&gt;checkOut;&#xD;
    &#xD;
    $hashref-&gt;{list} = [@list];&#xD;
    $hashref-&gt;{lastID} = $lastID;&#xD;
    &#xD;
    $cache-&gt;commit;&#xD;
    &#xD;
}   &#xD;
=cut&#xD;
1;&#xD;
&#xD;
&#xD;
&#xD;
package User;&#xD;
&#xD;
use Dbx;&#xD;
&#xD;
sub insert&#xD;
{&#xD;
     my $sql = shift;&#xD;
     &#xD;
     my $pwd = crypt $sql-&gt;{PASSWORD},'$$'.$sql-&gt;{USER_ID};&#xD;
     &#xD;
     $sql-&gt;{PASSWORD} = $pwd;&#xD;
     &#xD;
     if ( $sql-&gt;{EMAIL} )&#xD;
     {&#xD;
         my $checkEmailDupSQL = "SELECT count(*) from USERS where EMAIL = '$sql-&gt;{EMAIL}'";&#xD;
         &#xD;
         my $cnt = Dbx::get($checkEmailDupSQL);&#xD;
         &#xD;
         if ( $cnt &gt; 0 ) &#xD;
         {&#xD;
            return "Dup Account!" &#xD;
         }&#xD;
     }    &#xD;
          &#xD;
     Dbx::insert('USERS',$sql);&#xD;
     &#xD;
     return "ok";&#xD;
}&#xD;
&#xD;
sub login&#xD;
{&#xD;
    my ($userID,$password) = @_;&#xD;
    &#xD;
    my $sql = "SELECT USER_NAME,ENG_NAME,USER_TYPE,PASSWORD FROM USERS WHERE USER_ID='$userID'";&#xD;
    &#xD;
    my $ref = Dbx::getRef($sql);&#xD;
        &#xD;
    my $pwd = crypt $password, '$$'.$userID;&#xD;
    &#xD;
    die "Password is wrong!" if $pwd != $ref-&gt;{PASSWORD};&#xD;
    &#xD;
    delete $ref-&gt;{PASSWORD};&#xD;
    &#xD;
    return $ref;&#xD;
}&#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
use CGI;&#xD;
use BoardManager;&#xD;
use Data::Dumper;&#xD;
use Cache;&#xD;
use strict 'vars';&#xD;
&#xD;
&amp;input1;&#xD;
&amp;cacheDump;&#xD;
&#xD;
sub input1&#xD;
{&#xD;
my $input = { action=&gt;'insert' , &#xD;
              board=&gt;'general', &#xD;
              id=&gt;0,&#xD;
              userID=&gt;'test',&#xD;
              userName=&gt;'test',&#xD;
              subject=&gt;'this subject1',&#xD;
              content=&gt;'test content1\n test2\n' };&#xD;
    &#xD;
    execute($input);&#xD;
}&#xD;
&#xD;
sub select1&#xD;
{&#xD;
    my $input = { action=&gt;'select' , board=&gt;'general', page=&gt;1 };&#xD;
    &#xD;
    execute($input);&#xD;
}&#xD;
&#xD;
sub execute&#xD;
{&#xD;
    my $input = shift;&#xD;
    &#xD;
    my $cgi = CGI-&gt;new($input);&#xD;
    &#xD;
    my $resultRef = BoardManager::execute($cgi);&#xD;
    &#xD;
    print "\n\n------------dump.start------------\n";&#xD;
    &#xD;
    print $resultRef-&gt;{SUBJECT},"---&gt;\n";&#xD;
    print Dumper($resultRef);&#xD;
    print "\n------------dump.end------------\n";&#xD;
    &#xD;
}&#xD;
&#xD;
sub cacheDump&#xD;
{&#xD;
    my $cache = Cache-&gt;new('general');&#xD;
    &#xD;
    my $cachedRef = $cache-&gt;readOut;&#xD;
    &#xD;
    print "\n\n------------cache.start------------\n";&#xD;
    print Dumper($cachedRef);&#xD;
    print "\n------------cache.end------------\n";&#xD;
    &#xD;
    my $list = $cachedRef-&gt;{list};&#xD;
    &#xD;
    my $size = @$list;&#xD;
    &#xD;
    foreach my $row (@$list)&#xD;
    {&#xD;
         my $id1 = substr($row-&gt;[0],0,6);;&#xD;
         my $id2 = substr($row-&gt;[0],6);;&#xD;
         print $id1,'-&gt;',$id2,'  #',$row-&gt;[1],"\n";&#xD;
    }   &#xD;
}&#xD;
&#xD;
sub testx&#xD;
{&#xD;
     my $size;&#xD;
     &#xD;
     if ( $size == 0 )&#xD;
     {&#xD;
         print "yes\n";&#xD;
     }&#xD;
     else&#xD;
     {&#xD;
         print "no\n";&#xD;
     }&#xD;
}&#xD;
&#xD;
&#xD;
&#xD;
1;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
package Util;&#xD;
&#xD;
use strict;&#xD;
&#xD;
use JSON;&#xD;
my $json  = JSON-&gt;new-&gt;utf8;&#xD;
&#xD;
sub encode&#xD;
{&#xD;
    my $value = shift;&#xD;
    return $json-&gt;encode($value);&#xD;
}    &#xD;
&#xD;
sub decode&#xD;
{&#xD;
    my $value = shift;&#xD;
    return $json-&gt;decode($value);&#xD;
}    &#xD;
&#xD;
sub dump&#xD;
{&#xD;
    my $value = shift;&#xD;
    &#xD;
    print Data::Dumper($value);&#xD;
}&#xD;
1;&#xD;
&#xD;
&#xD;
create table USERS (&#xD;
USER_ID varchar(32) not null primary key,&#xD;
USER_NAME varchar(32) not null,&#xD;
USER_TYPE char(1) not null default 'G',&#xD;
ENG_NAME  varchar(32),&#xD;
PHONE_HOME  varchar(32),&#xD;
PHONE_WORK  varchar(32),&#xD;
PHONE_CELL  varchar(32),&#xD;
EMAIL   varchar(64),&#xD;
EMAIL2  varchar(64),&#xD;
JOINED date,&#xD;
LAST_VISIT timestamp default CURRENT_TIMESTAMP,&#xD;
COMPANY varchar(64),&#xD;
IMMIGRATED date,&#xD;
FAMILY   varchar(255),&#xD;
HOBBY    varchar(1024),&#xD;
SPECIALTY varchar(1024),&#xD;
BIRTH_DAY date,&#xD;
PASSWORD  varchar(255),&#xD;
WHO_AM_I  varchar(8192),&#xD;
LIKING    varchar(8192)&#xD;
)&#xD;
&#xD;
create table BOARD (&#xD;
BOARD_NAME varchar(32) not null,&#xD;
BOARD_ID   bigint       not null,&#xD;
USER_ID    varchar(32) not null,&#xD;
USER_NAME  varchar(32) not null,&#xD;
SUBJECT    varchar(255) not null,&#xD;
CONTENT    text,&#xD;
READ_COUNT smallint default 0,&#xD;
GOOD_COUNT smallint default 0,&#xD;
CMMT_COUNT smallint default 0,&#xD;
UPDATED    timestamp default CURRENT_TIMESTAMP,&#xD;
OPTIONS    varchar(1024),&#xD;
ATTACHED   varchar(1024),&#xD;
primary key(BOARD_NAME,BOARD_ID),&#xD;
foreign key(USER_ID) references USERS(USER_ID)&#xD;
);&#xD;
&#xD;
create table COMMENTS (&#xD;
BOARD_NAME varchar(32) not null,&#xD;
BOARD_ID   bigint       not null,&#xD;
SERIAL_NO  smallint    not null,&#xD;
USER_ID    varchar(32) not null,&#xD;
USER_NAME  varchar(32) not null,&#xD;
COMMENT    varchar(8192),&#xD;
UPDATED    timestamp default CURRENT_TIMESTAMP,&#xD;
primary key(BOARD_NAME,BOARD_ID,SERIAL_NO),&#xD;
foreign key(BOARD_NAME,BOARD_ID) references BOARD(BOARD_NAME,BOARD_ID)&#xD;
);&#xD;
&#xD;
create table MEMO (&#xD;
USER_ID varchar(32) not null,&#xD;
FROM_ID varchar(32) not null,&#xD;
CREATED timestamp default CURRENT_TIMESTAMP,&#xD;
MEMO_TYPE char(1) default 'N',&#xD;
CONTENT varchar(8192),&#xD;
IS_READ char(1) default 'N',&#xD;
primary key(USER_ID,FROM_ID,CREATED),&#xD;
foreign key(USER_ID) references USERS(USER_ID),&#xD;
foreign key(FROM_ID) references USERS(USER_ID)&#xD;
);</content>
    <postId>C7D00875-A954-4C6D-983B-713457039970</postId>
    <pubDate>2011-08-18T00:00:00-04:00</pubDate>
    <title>test2</title>
</post>
