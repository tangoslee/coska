<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>박성민</author>
    <comments>
        <comment>
            <author>김경환</author>
            <date>2011-02-25T00:00:00-05:00</date>
            <content>대단하십니다. 근데 저걸 영어로 설명할려면 -_-;;&#xD;
영어 때문에 오늘도 흰머리가 몇개나 더 생겼는지....</content>
        </comment>
    </comments>
    <content>1. 주요 네트워크 개념&#xD;
네트워크를 이해한다는 것은 어떤 면에서는 컴퓨터의 한 부분을 이해하는 면도 있지만 근래의 모든 장비들이 다른 시스템들과 연동이 되는 점을 염두에 둘 때 네트워크의 중요성은 단순한 하나의 도구나 수많은 언어 중 하나의 위치라고 보기 보다는 시스템의 연결을 위한 Backbone의 역할과 모바일 환경과 통신 장비의 발전을 고려할 때 시스템 개발자 들에게 어느 정도의 DB 지식과 같은 위치를 필요로 할 지 모른다는 생각을 종종 합니다. 지금은 어느 정도 일반인들도 많이 아는 IPv4 에서  IP v6로의 변화와 고갈되는 IPv4가 여전히 사용되는 이유(NAT 이라는 개념), 그리고 IPv6으로 할 수 있는 일들, 리눅스를 부팅할 때 보이는 snmpd와 같은 SNMP protocol의 역할, 알고리듬 교재에 보이는 Dijkstra 박사의 SPF(Shortest Path First)와 같은 그래프 이론이 실제로 가장 중요한 인터넷 경로 설정을 위한 이론적 근거로 사용되는 것, 그러한 이론들이 현재 인터넷 장비 업체의 선두 주자에 해당하는 Cisco에서 OSPF 등과 같은 프로토콜로 구현된 것 등..네트워크의 중요한 이슈도 너무 범위가 넓어서 어느 한 사람의 지식이 모두 따라잡기에는 방대하고 한계가 있다는 것도 지적하고 싶습니다.&#xD;
&#xD;
제 개인적인 생각에 어느 회사에서든지 네트워크에 대한 개념이 있는지 물어보고 싶으면 제일 먼저 이 STP 프로토콜은 필수라는 생각이 듭니다.&#xD;
그리고 VLAN이라고 하는 Virtual(가상) LAN 구성에 대한 개념도 네트워크를 한다면 어느 정도 반드시 이해를 해야 하는 부분이고..그리고 IPv4의 체계와 NAT 개념,자주 듣게 되는 OSI 7 Layer에서 Router와 Switch 가 하는 역할이 어떤 것인가 하는 정도는 분명히 이해를 하고 있어야 어느 정도 네트워크를 이해한다고 믿습니다.&#xD;
&#xD;
많이 들어본 TCP/IP 부터 해서 ARP, ICMP, IGMP, SNMP, NTP 등 수십 개의 프로토콜들과 RADIUS, DHCP, TACACS 서버 설정 작업들을 스위치나 라우터 장비에서 확인을 하다보면 여전히 스위치와 라우터의 근본적인 차이에 대해 정확하게 이해하는 것이 쉽지 않다는 생각을 합니다. 물론 "Layer3 스위치" 라는 제품이 있는 것을 보면 (스위치는 Layer2에서 움직이는 것이 상식이라 굳이 Layer3에서도 움직이는 스위치라는 것을 강조하기 위한 것이니까..) 분명히 가장 근본적인 차이는 움직이는 OSI Layer (층)이 다르다는 것이 가장 정답인 듯 싶습니다.&#xD;
&#xD;
&#xD;
개인적으로는 보안 관련 회사에서 면접을 볼 때 질문을 받은 것은 SNMP(Simple Network Management Protocol) 이었습니다. 근래 개발자를 찾는 사이트를 보면 의외로 이 프로토콜을 사용한 경험을 요구하는 곳이 심심하지 않게 보았습니다. (일반화의 위험을 무릅쓰고) 쉽게 말씀 드리면 특정한 네트워크 상 안에서 수많은 네트워크 장비들 간의 물리적 port 의 특성이나 연결 상태등을 모두 관리하는 프로토콜인데 이 프로토콜에 대해서 답변을 할 때 Simple로 시작하는 이름과는 다르게 절대 Simple한 프로토콜이 아니었다고 대답을 하면 거의 정답에 가깝습니다.&#xD;
&#xD;
.&#xD;
.&#xD;
&#xD;
2. STP 개념&#xD;
&#xD;
STP 프로토콜을 이해하시기 조금 쉽도록 상황 설명을 드리면.. (제가 틀릴 수도 있습니다만..)&#xD;
이 프로토콜은 일반 Desktop에서 필요한 프로토콜이 아니라 라우터나 스위치 같은 네트워크 장비에서 필요한 프로토콜로 이해하는 것이 편하다는 말씀을 드리고 싶습니다.  그리고 만약 제가 컴퓨터를 부팅을 해서 인터넷을 연결해서 한국의 어느 사이트를 들어간다고 시도를 할 때 그 중간 경로를 결정하는 과정에 대해서 저희는 전혀 고민을 하지 않습니다. 그리고 그 안에 있는 특정 한 두 개의 네트워크 장비는 새로 추가되거나 없어지는 식으로 항상 변할 수도 있습니다.&#xD;
&#xD;
(먼저 다음 사이트를 보시면 약간의 경로가 결정되는 과정에 대해서 느낌이 오시리라 생각합니다.)&#xD;
&#xD;
http://www.cs.sunysb.edu/~skiena/combinatorica/animations/dijkstra.html&#xD;
&#xD;
경로가 설정되는 과정을 잘 관찰해보면 순환회로가 생기지 않도록 하는 것이 가장 중요합니다. Spanning Tree 굳이 우리 말로 하면 확장 나무..와 같이 개념을 정의한 이유가 만약 내부적인 네트워크의 한 종류인 Ring Topology와 같은 순환 회로가 외부 네트워크 망에서 구성된 경우 ..(여러가지 문제가 있지만) 가장 큰 문제 중 하나는...우리가 보낸 packet 들이 우주 미아가 되어서 계속 망을 돌고 있게될 지 모르는 문제들이 발생할 수 있습니다.&#xD;
&#xD;
&#xD;
그래서 실제로 스위치나 라우터와 같은 네트워크 장비들(우리 회사의 경영진들은 Smart-Grid라는 말을 좋아하더군요) 간에서  STP을 구성하는 경우 물리적으로는 LAN 선이 모두 연결되어 있다고 하더라도 Spanning Tree 를 구성하는 선만 남겨두고 나머지는 논리적으로 사용불가하도록 운영체제에서 만들어 놓습니다.&#xD;
&#xD;
&#xD;
조금 더 이해를 쉽게 하기 위해서 실제로 제가 회사에서 작업하는 스위치를 가지고 보여드리면 다음과 같습니다.&#xD;
&#xD;
&#xD;
https://docs.google.com/document/d/1QMaYw40aS9tQfF_iXpoKz9qjXRLUuetj50dcVgdtDhk/edit?hl=en&amp;authkey=CLmqsvIF&amp;pli=1#&#xD;
&#xD;
&#xD;
처음 화면은 그냥 스위치 운영체제에 로그인을 하는 것이고 들어가면 2) 화면의 메인 메뉴입니다.&#xD;
그 안에서 보면 스위치의 수많은 기능 중에서 Spanning Tree 가 중요한 TOP 메뉴 10 개 중 하나로 자리 잡고 있습니다. 그리고 그 안에 들어가면 실제로 운영체제에서 많이 사용하는 RSTP(Rapid-STP) ..그러니까... 네트워크에 문제가 있을 때 빠른 시간 내에 다시 STP를 계산하는 RSTP 설정들이 메뉴를 이루고 있습니다.&#xD;
&#xD;
&#xD;
그 밑으로 보면 MSTI 라는 다른 프로토콜이 다시 보이는데 이는 VLAN 들을 구성한 네트워크에서 필요한 Multiple-STP프로토콜의 Instance 들이라 이 설명은 하고 싶지 않습니다. (더 많은 이야기를 해야하니까..)&#xD;
&#xD;
&#xD;
중요한 것은 이 프로토콜은 네트워크의 가장 중요한 개념 중 하나이라는 것입니다.&#xD;
&#xD;
&#xD;
마지막 그림을 보면 RSTP의 속성들을 저장한 rstpCfg라는 테이블을 조회해 보면 Hello Time과 Max Age Time 이라는 것이 있는데.. 이 것이 필요한 이유는 이 프로토콜의 성격 상 2 초마다 자기가 설정해 놓은 경로 안에 있는 다른 장비에게 살아 있냐고 물어보고 만약 Max Age Time로 설정한 20초 안에도 대답이 오지 않으면 문제가 있는 것으로 알고 다시 경로를 설정한다는 의미를 가지고 있습니다.</content>
    <postId>A0D3591A-57FC-49F2-BB76-0317F1E4E6A0</postId>
    <pubDate>2011-02-25T00:00:00-05:00</pubDate>
    <title>Spanning Tree Protocol 이야기</title>
</post>
