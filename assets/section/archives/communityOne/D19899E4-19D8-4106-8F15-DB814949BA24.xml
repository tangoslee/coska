<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<post>
    <author>김성욱</author>
    <comments/>
    <content>Below is the email content from Andrew Sheen. I'll look into this sooner.&#xD;
&#xD;
--------------&#xD;
강의 중의 2개의 synchronized를 쓰는 두개의 예제가 있었습니다. 하나는DBManager class이고 다른 하나는 ServiceControllerCreator class. 전자는 instance로 lock를 한것이고, 두번째 것은 김성욱씨 처럼 따로 lock object를 만들었습니다.&#xD;
차이점이 있지요. 첨부한 화일(Test1.java. see the bottom)에서, DBManager의 dump 메써드는 print 메써드가 아직 lock를 풀지 않은 상황에서도 접근이 됩니다. 왜냐하면 "end &gt;sleep"라는 것이 보이기 전에, 두번째 Thread에서 dump를 접근하기 때문이죠. 그래서 인스턴스 전체에 lock이 걸리는 것이 아니라, 해당 메써드에 걸린다고 볼 수 있죠. 그러나 Test1 class에 있는 setMyValue의 synchronized는 잘못된 것이죠. 이것은 아무&#xD;
의미가 없습니다. 이때는 김성욱씨 말처럼 따로이 lock object를 만들어야 합니다. &#xD;
&lt;pre&gt;&#xD;
public void setMyName(String name)  { &#xD;
   synchronized(lock) {&#xD;
      _name = name; &#xD;
   }&#xD;
} &#xD;
&lt;/pre&gt;&#xD;
이렇게 되어야 옳습니다. 일단 shared되는 object가 무엇인가 생각해보고, shared가 아니라면 synchronized의 문제가&#xD;
생기지 않고, 클래스 전체가 shared되는지 (database처럼 로직(***METHOD***)을 shared하는 경우) 아니면, 일부 static value가 shared되는지(대개 data object). &#xD;
&#xD;
----------- java samples&#xD;
&lt;pre&gt;&#xD;
package test;&#xD;
&#xD;
class DBManager&#xD;
{&#xD;
       int           _value;&#xD;
       String        _name;&#xD;
       &#xD;
       public DBManager(String name, int value) throws Exception&#xD;
       {&#xD;
              _value = value;&#xD;
              _name  = name;&#xD;
       }&#xD;
       &#xD;
&#xD;
       public synchronized void print() throws Exception&#xD;
       {&#xD;
               System.out.println("........ start Sleep for " + _name );&#xD;
                Thread.sleep(1000);&#xD;
               System.out.println("........  end  Sleep for " + _name );&#xD;
       }&#xD;
       &#xD;
       public void dump()&#xD;
       {&#xD;
          &#xD;
               System.out.println(" DUMP: name  = " + _name + " value = " + _value );&#xD;
       }&#xD;
&#xD;
}&#xD;
&#xD;
public class Test1 extends Thread&#xD;
{&#xD;
       DBManager _value;&#xD;
       &#xD;
       static  String _name;&#xD;
       &#xD;
       public Test1(DBManager value)&#xD;
       {&#xD;
              _value = value;   &#xD;
       }&#xD;
       &#xD;
       public void run()&#xD;
       {&#xD;
              try&#xD;
              {&#xD;
                  _value.dump();&#xD;
                  _value.print();&#xD;
              }&#xD;
              catch(Exception exp)&#xD;
              {&#xD;
                    System.out.println(exp);&#xD;
              }   &#xD;
       }&#xD;
       &#xD;
       public synchronized void setMyName(String name)&#xD;
       {&#xD;
              _name = name;&#xD;
       }&#xD;
       &#xD;
&#xD;
       public static void main(String[] args) throws Exception&#xD;
       {&#xD;
               DBManager myValue = new DBManager("orange",100);&#xD;
               Test1 test1 = new Test1(myValue);               &#xD;
               Test1 test2 = new Test1(myValue);               &#xD;
               &#xD;
               test1.start();&#xD;
               test2.start();&#xD;
       }     &#xD;
}     &#xD;
&#xD;
&lt;/pre&gt;</content>
    <postId>D19899E4-19D8-4106-8F15-DB814949BA24</postId>
    <pubDate>2004-03-30T00:00:00-05:00</pubDate>
    <title>Andrew's explanation</title>
</post>
